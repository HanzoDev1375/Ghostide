[
  {
    "name": "add_child_handler",
    "doc": "Register a new child handler."
  },
  {
    "name": "attach_loop",
    "doc": "Attach the watcher to an event loop."
  },
  {
    "name": "close",
    "doc": "Close the watcher."
  },
  {
    "name": "is_active",
    "doc": "Return ``True`` if the watcher is active and is used by the event loop."
  },
  {
    "name": "remove_child_handler",
    "doc": "Removes the handler for process 'pid'."
  },
  {
    "name": "_timer_handle_cancelled",
    "doc": "Notification that a TimerHandle has been cancelled."
  },
  {
    "name": "add_reader",
    "doc": ""
  },
  {
    "name": "add_signal_handler",
    "doc": ""
  },
  {
    "name": "add_writer",
    "doc": ""
  },
  {
    "name": "call_at",
    "doc": ""
  },
  {
    "name": "call_exception_handler",
    "doc": ""
  },
  {
    "name": "call_later",
    "doc": ""
  },
  {
    "name": "call_soon",
    "doc": ""
  },
  {
    "name": "call_soon_threadsafe",
    "doc": ""
  },
  {
    "name": "close",
    "doc": "Close the loop."
  },
  {
    "name": "connect_accepted_socket",
    "doc": "Handle an accepted connection."
  },
  {
    "name": "connect_read_pipe",
    "doc": "Register read pipe in event loop. Set the pipe to non-blocking mode."
  },
  {
    "name": "connect_write_pipe",
    "doc": "Register write pipe in event loop."
  },
  {
    "name": "create_connection",
    "doc": ""
  },
  {
    "name": "create_datagram_endpoint",
    "doc": "A coroutine which creates a datagram endpoint."
  },
  {
    "name": "create_future",
    "doc": ""
  },
  {
    "name": "create_server",
    "doc": "A coroutine which creates a TCP server bound to host and port."
  },
  {
    "name": "create_task",
    "doc": ""
  },
  {
    "name": "create_unix_connection",
    "doc": ""
  },
  {
    "name": "create_unix_server",
    "doc": "A coroutine which creates a UNIX Domain Socket server."
  },
  {
    "name": "default_exception_handler",
    "doc": ""
  },
  {
    "name": "get_debug",
    "doc": ""
  },
  {
    "name": "get_exception_handler",
    "doc": ""
  },
  {
    "name": "get_task_factory",
    "doc": ""
  },
  {
    "name": "getaddrinfo",
    "doc": ""
  },
  {
    "name": "getnameinfo",
    "doc": ""
  },
  {
    "name": "is_closed",
    "doc": "Returns True if the event loop was closed."
  },
  {
    "name": "is_running",
    "doc": "Return whether the event loop is currently running."
  },
  {
    "name": "remove_reader",
    "doc": ""
  },
  {
    "name": "remove_signal_handler",
    "doc": ""
  },
  {
    "name": "remove_writer",
    "doc": ""
  },
  {
    "name": "run_forever",
    "doc": "Run the event loop until stop() is called."
  },
  {
    "name": "run_in_executor",
    "doc": ""
  },
  {
    "name": "run_until_complete",
    "doc": "Run the event loop until a Future is done."
  },
  {
    "name": "sendfile",
    "doc": "Send a file through a transport."
  },
  {
    "name": "set_debug",
    "doc": ""
  },
  {
    "name": "set_default_executor",
    "doc": ""
  },
  {
    "name": "set_exception_handler",
    "doc": ""
  },
  {
    "name": "set_task_factory",
    "doc": ""
  },
  {
    "name": "shutdown_asyncgens",
    "doc": "Shutdown all active asynchronous generators."
  },
  {
    "name": "shutdown_default_executor",
    "doc": "Schedule the shutdown of the default executor."
  },
  {
    "name": "sock_accept",
    "doc": ""
  },
  {
    "name": "sock_connect",
    "doc": ""
  },
  {
    "name": "sock_recv",
    "doc": ""
  },
  {
    "name": "sock_recv_into",
    "doc": ""
  },
  {
    "name": "sock_recvfrom",
    "doc": ""
  },
  {
    "name": "sock_recvfrom_into",
    "doc": ""
  },
  {
    "name": "sock_sendall",
    "doc": ""
  },
  {
    "name": "sock_sendfile",
    "doc": ""
  },
  {
    "name": "sock_sendto",
    "doc": ""
  },
  {
    "name": "start_tls",
    "doc": "Upgrade a transport to TLS."
  },
  {
    "name": "stop",
    "doc": "Stop the event loop as soon as reasonable."
  },
  {
    "name": "subprocess_exec",
    "doc": ""
  },
  {
    "name": "subprocess_shell",
    "doc": ""
  },
  {
    "name": "time",
    "doc": ""
  },
  {
    "name": "get_child_watcher",
    "doc": "Get the watcher for child processes."
  },
  {
    "name": "get_event_loop",
    "doc": "Get the event loop for the current context."
  },
  {
    "name": "new_event_loop",
    "doc": "Create and return a new event loop object according to this"
  },
  {
    "name": "set_child_watcher",
    "doc": "Set the watcher for child processes."
  },
  {
    "name": "set_event_loop",
    "doc": "Set the event loop for the current context to loop."
  },
  {
    "name": "close",
    "doc": "Stop serving.  This leaves existing connections open."
  },
  {
    "name": "get_loop",
    "doc": "Get the event loop the Server object is attached to."
  },
  {
    "name": "is_serving",
    "doc": "Return True if the server is accepting connections."
  },
  {
    "name": "serve_forever",
    "doc": "Start accepting connections until the coroutine is cancelled."
  },
  {
    "name": "start_serving",
    "doc": "Start accepting connections."
  },
  {
    "name": "wait_closed",
    "doc": "Coroutine to wait until service is closed."
  },
  {
    "name": "_block",
    "doc": ""
  },
  {
    "name": "_exit",
    "doc": ""
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "_release",
    "doc": ""
  },
  {
    "name": "_wait",
    "doc": ""
  },
  {
    "name": "abort",
    "doc": "Place the barrier into a 'broken' state."
  },
  {
    "name": "reset",
    "doc": "Reset the barrier to the initial state."
  },
  {
    "name": "wait",
    "doc": "Wait for the barrier."
  },
  {
    "name": "_add_callback",
    "doc": "Add a Handle to _ready."
  },
  {
    "name": "_add_callback_signalsafe",
    "doc": "Like _add_callback() but called from a signal handler."
  },
  {
    "name": "_asyncgen_finalizer_hook",
    "doc": ""
  },
  {
    "name": "_asyncgen_firstiter_hook",
    "doc": ""
  },
  {
    "name": "_call_soon",
    "doc": ""
  },
  {
    "name": "_check_callback",
    "doc": ""
  },
  {
    "name": "_check_closed",
    "doc": ""
  },
  {
    "name": "_check_default_executor",
    "doc": ""
  },
  {
    "name": "_check_running",
    "doc": ""
  },
  {
    "name": "_check_sendfile_params",
    "doc": ""
  },
  {
    "name": "_check_thread",
    "doc": "Check that the current thread is the thread running the event loop."
  },
  {
    "name": "_connect_sock",
    "doc": "Create, bind and connect one socket."
  },
  {
    "name": "_create_connection_transport",
    "doc": ""
  },
  {
    "name": "_create_server_getaddrinfo",
    "doc": ""
  },
  {
    "name": "_do_shutdown",
    "doc": ""
  },
  {
    "name": "_ensure_resolved",
    "doc": ""
  },
  {
    "name": "_getaddrinfo_debug",
    "doc": ""
  },
  {
    "name": "_log_subprocess",
    "doc": ""
  },
  {
    "name": "_make_datagram_transport",
    "doc": "Create datagram transport."
  },
  {
    "name": "_make_read_pipe_transport",
    "doc": "Create read pipe transport."
  },
  {
    "name": "_make_socket_transport",
    "doc": "Create socket transport."
  },
  {
    "name": "_make_ssl_transport",
    "doc": "Create SSL transport."
  },
  {
    "name": "_make_subprocess_transport",
    "doc": "Create subprocess transport."
  },
  {
    "name": "_make_write_pipe_transport",
    "doc": "Create write pipe transport."
  },
  {
    "name": "_process_events",
    "doc": "Process selector events."
  },
  {
    "name": "_run_once",
    "doc": "Run one full iteration of the event loop."
  },
  {
    "name": "_sendfile_fallback",
    "doc": ""
  },
  {
    "name": "_sendfile_native",
    "doc": ""
  },
  {
    "name": "_set_coroutine_origin_tracking",
    "doc": ""
  },
  {
    "name": "_sock_sendfile_fallback",
    "doc": ""
  },
  {
    "name": "_sock_sendfile_native",
    "doc": ""
  },
  {
    "name": "_timer_handle_cancelled",
    "doc": "Notification that a TimerHandle has been cancelled."
  },
  {
    "name": "_write_to_self",
    "doc": "Write a byte to self-pipe, to wake up the event loop."
  },
  {
    "name": "add_reader",
    "doc": ""
  },
  {
    "name": "add_signal_handler",
    "doc": ""
  },
  {
    "name": "add_writer",
    "doc": ""
  },
  {
    "name": "call_at",
    "doc": "Like call_later(), but uses an absolute time."
  },
  {
    "name": "call_exception_handler",
    "doc": "Call the current event loop's exception handler."
  },
  {
    "name": "call_later",
    "doc": "Arrange for a callback to be called at a given time."
  },
  {
    "name": "call_soon",
    "doc": "Arrange for a callback to be called as soon as possible."
  },
  {
    "name": "call_soon_threadsafe",
    "doc": "Like call_soon(), but thread-safe."
  },
  {
    "name": "close",
    "doc": "Close the event loop."
  },
  {
    "name": "connect_accepted_socket",
    "doc": "Handle an accepted connection."
  },
  {
    "name": "connect_read_pipe",
    "doc": "Register read pipe in event loop. Set the pipe to non-blocking mode."
  },
  {
    "name": "connect_write_pipe",
    "doc": "Register write pipe in event loop."
  },
  {
    "name": "create_connection",
    "doc": "Connect to a TCP server."
  },
  {
    "name": "create_datagram_endpoint",
    "doc": "Create datagram connection."
  },
  {
    "name": "create_future",
    "doc": "Create a Future object attached to the loop."
  },
  {
    "name": "create_server",
    "doc": "Create a TCP server."
  },
  {
    "name": "create_task",
    "doc": "Schedule a coroutine object."
  },
  {
    "name": "create_unix_connection",
    "doc": ""
  },
  {
    "name": "create_unix_server",
    "doc": "A coroutine which creates a UNIX Domain Socket server."
  },
  {
    "name": "default_exception_handler",
    "doc": "Default exception handler."
  },
  {
    "name": "get_debug",
    "doc": ""
  },
  {
    "name": "get_exception_handler",
    "doc": "Return an exception handler, or None if the default one is in use."
  },
  {
    "name": "get_task_factory",
    "doc": "Return a task factory, or None if the default one is in use."
  },
  {
    "name": "getaddrinfo",
    "doc": ""
  },
  {
    "name": "getnameinfo",
    "doc": ""
  },
  {
    "name": "is_closed",
    "doc": "Returns True if the event loop was closed."
  },
  {
    "name": "is_running",
    "doc": "Returns True if the event loop is running."
  },
  {
    "name": "remove_reader",
    "doc": ""
  },
  {
    "name": "remove_signal_handler",
    "doc": ""
  },
  {
    "name": "remove_writer",
    "doc": ""
  },
  {
    "name": "run_forever",
    "doc": "Run until stop() is called."
  },
  {
    "name": "run_in_executor",
    "doc": ""
  },
  {
    "name": "run_until_complete",
    "doc": "Run until the Future is done."
  },
  {
    "name": "sendfile",
    "doc": "Send a file to transport."
  },
  {
    "name": "set_debug",
    "doc": ""
  },
  {
    "name": "set_default_executor",
    "doc": ""
  },
  {
    "name": "set_exception_handler",
    "doc": "Set handler as the new event loop exception handler."
  },
  {
    "name": "set_task_factory",
    "doc": "Set a task factory that will be used by loop.create_task()."
  },
  {
    "name": "shutdown_asyncgens",
    "doc": "Shutdown all active asynchronous generators."
  },
  {
    "name": "shutdown_default_executor",
    "doc": "Schedule the shutdown of the default executor."
  },
  {
    "name": "sock_accept",
    "doc": ""
  },
  {
    "name": "sock_connect",
    "doc": ""
  },
  {
    "name": "sock_recv",
    "doc": ""
  },
  {
    "name": "sock_recv_into",
    "doc": ""
  },
  {
    "name": "sock_recvfrom",
    "doc": ""
  },
  {
    "name": "sock_recvfrom_into",
    "doc": ""
  },
  {
    "name": "sock_sendall",
    "doc": ""
  },
  {
    "name": "sock_sendfile",
    "doc": ""
  },
  {
    "name": "sock_sendto",
    "doc": ""
  },
  {
    "name": "start_tls",
    "doc": "Upgrade transport to TLS."
  },
  {
    "name": "stop",
    "doc": "Stop running the event loop."
  },
  {
    "name": "subprocess_exec",
    "doc": ""
  },
  {
    "name": "subprocess_shell",
    "doc": ""
  },
  {
    "name": "time",
    "doc": "Return the time according to the event loop's clock."
  },
  {
    "name": "connection_lost",
    "doc": "Called when the connection is lost or closed."
  },
  {
    "name": "connection_made",
    "doc": "Called when a connection is made."
  },
  {
    "name": "pause_writing",
    "doc": "Called when the transport's buffer goes over the high-water mark."
  },
  {
    "name": "resume_writing",
    "doc": "Called when the transport's buffer drains below the low-water mark."
  },
  {
    "name": "close",
    "doc": "Close the transport."
  },
  {
    "name": "get_extra_info",
    "doc": "Get optional transport information."
  },
  {
    "name": "get_protocol",
    "doc": "Return the current protocol."
  },
  {
    "name": "is_closing",
    "doc": "Return True if the transport is closing or closed."
  },
  {
    "name": "set_protocol",
    "doc": "Set a new protocol."
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "_wake_up_next",
    "doc": "Wake up the first waiter that isn't done."
  },
  {
    "name": "acquire",
    "doc": "Acquire a semaphore."
  },
  {
    "name": "locked",
    "doc": "Returns True if semaphore cannot be acquired immediately."
  },
  {
    "name": "release",
    "doc": "Release a semaphore, incrementing the internal counter by one."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "buffer_updated",
    "doc": "Called when the buffer was updated with the received data."
  },
  {
    "name": "connection_lost",
    "doc": "Called when the connection is lost or closed."
  },
  {
    "name": "connection_made",
    "doc": "Called when a connection is made."
  },
  {
    "name": "eof_received",
    "doc": "Called when the other end calls write_eof() or equivalent."
  },
  {
    "name": "get_buffer",
    "doc": "Called to allocate a new receive buffer."
  },
  {
    "name": "pause_writing",
    "doc": "Called when the transport's buffer goes over the high-water mark."
  },
  {
    "name": "resume_writing",
    "doc": "Called when the transport's buffer drains below the low-water mark."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "notify",
    "doc": "By default, wake up one coroutine waiting on this condition, if any."
  },
  {
    "name": "notify_all",
    "doc": "Wake up all threads waiting on this condition. This method acts"
  },
  {
    "name": "wait",
    "doc": "Wait until notified."
  },
  {
    "name": "wait_for",
    "doc": "Wait until a predicate becomes true."
  },
  {
    "name": "connection_lost",
    "doc": "Called when the connection is lost or closed."
  },
  {
    "name": "connection_made",
    "doc": "Called when a connection is made."
  },
  {
    "name": "datagram_received",
    "doc": "Called when some datagram is received."
  },
  {
    "name": "error_received",
    "doc": "Called when a send or receive operation raises an OSError."
  },
  {
    "name": "pause_writing",
    "doc": "Called when the transport's buffer goes over the high-water mark."
  },
  {
    "name": "resume_writing",
    "doc": "Called when the transport's buffer drains below the low-water mark."
  },
  {
    "name": "abort",
    "doc": "Close the transport immediately."
  },
  {
    "name": "close",
    "doc": "Close the transport."
  },
  {
    "name": "get_extra_info",
    "doc": "Get optional transport information."
  },
  {
    "name": "get_protocol",
    "doc": "Return the current protocol."
  },
  {
    "name": "is_closing",
    "doc": "Return True if the transport is closing or closed."
  },
  {
    "name": "sendto",
    "doc": "Send data to the transport."
  },
  {
    "name": "set_protocol",
    "doc": "Set a new protocol."
  },
  {
    "name": "_Local",
    "doc": "Thread-local data"
  },
  {
    "name": "_init_watcher",
    "doc": ""
  },
  {
    "name": "_loop_factory",
    "doc": "Unix event loop."
  },
  {
    "name": "get_child_watcher",
    "doc": "Get the watcher for child processes."
  },
  {
    "name": "get_event_loop",
    "doc": "Get the event loop for the current context."
  },
  {
    "name": "new_event_loop",
    "doc": "Create a new event loop."
  },
  {
    "name": "set_child_watcher",
    "doc": "Set the watcher for child processes."
  },
  {
    "name": "set_event_loop",
    "doc": "Set the event loop."
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": "Reset the internal flag to false. Subsequently, coroutines calling"
  },
  {
    "name": "is_set",
    "doc": "Return True if and only if the internal flag is true."
  },
  {
    "name": "set",
    "doc": "Set the internal flag to true. All coroutines waiting for it to"
  },
  {
    "name": "wait",
    "doc": "Block until the internal flag is true."
  },
  {
    "name": "_do_waitpid",
    "doc": ""
  },
  {
    "name": "_do_waitpid_all",
    "doc": ""
  },
  {
    "name": "_sig_chld",
    "doc": ""
  },
  {
    "name": "add_child_handler",
    "doc": "Register a new child handler."
  },
  {
    "name": "attach_loop",
    "doc": "Attach the watcher to an event loop."
  },
  {
    "name": "close",
    "doc": "Close the watcher."
  },
  {
    "name": "is_active",
    "doc": "Return ``True`` if the watcher is active and is used by the event loop."
  },
  {
    "name": "remove_child_handler",
    "doc": "Removes the handler for process 'pid'."
  },
  {
    "name": "_make_cancelled_error",
    "doc": "Create the CancelledError to raise if the Future is cancelled."
  },
  {
    "name": "add_done_callback",
    "doc": "Add a callback to be run when the future becomes done."
  },
  {
    "name": "cancel",
    "doc": "Cancel the future and schedule callbacks."
  },
  {
    "name": "cancelled",
    "doc": "Return True if the future was cancelled."
  },
  {
    "name": "done",
    "doc": "Return True if the future is done."
  },
  {
    "name": "exception",
    "doc": "Return the exception that was set on this future."
  },
  {
    "name": "get_loop",
    "doc": "Return the event loop the Future is bound to."
  },
  {
    "name": "remove_done_callback",
    "doc": "Remove all instances of a callback from the \"call when done\" list."
  },
  {
    "name": "result",
    "doc": "Return the result this future represents."
  },
  {
    "name": "set_exception",
    "doc": "Mark the future done and set an exception."
  },
  {
    "name": "set_result",
    "doc": "Mark the future done and set its result."
  },
  {
    "name": "_repr_info",
    "doc": ""
  },
  {
    "name": "_run",
    "doc": ""
  },
  {
    "name": "cancel",
    "doc": ""
  },
  {
    "name": "cancelled",
    "doc": ""
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_format",
    "doc": ""
  },
  {
    "name": "_get",
    "doc": ""
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "_init",
    "doc": ""
  },
  {
    "name": "_put",
    "doc": ""
  },
  {
    "name": "_wakeup_next",
    "doc": ""
  },
  {
    "name": "empty",
    "doc": "Return True if the queue is empty, False otherwise."
  },
  {
    "name": "full",
    "doc": "Return True if there are maxsize items in the queue."
  },
  {
    "name": "get",
    "doc": "Remove and return an item from the queue."
  },
  {
    "name": "get_nowait",
    "doc": "Remove and return an item from the queue."
  },
  {
    "name": "join",
    "doc": "Block until all items in the queue have been gotten and processed."
  },
  {
    "name": "put",
    "doc": "Put an item into the queue."
  },
  {
    "name": "put_nowait",
    "doc": "Put an item into the queue without blocking."
  },
  {
    "name": "qsize",
    "doc": "Number of items in the queue."
  },
  {
    "name": "task_done",
    "doc": "Indicate that a formerly enqueued task is complete."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "_wake_up_first",
    "doc": "Wake up the first waiter if it isn't done."
  },
  {
    "name": "acquire",
    "doc": "Acquire a lock."
  },
  {
    "name": "locked",
    "doc": "Return True if lock is acquired."
  },
  {
    "name": "release",
    "doc": "Release a lock."
  },
  {
    "name": "_do_waitpid",
    "doc": ""
  },
  {
    "name": "_do_waitpid_all",
    "doc": ""
  },
  {
    "name": "_sig_chld",
    "doc": ""
  },
  {
    "name": "add_child_handler",
    "doc": "Register a new child handler."
  },
  {
    "name": "attach_loop",
    "doc": "Attach the watcher to an event loop."
  },
  {
    "name": "close",
    "doc": "Close the watcher."
  },
  {
    "name": "is_active",
    "doc": "Return ``True`` if the watcher is active and is used by the event loop."
  },
  {
    "name": "remove_child_handler",
    "doc": "Removes the handler for process 'pid'."
  },
  {
    "name": "_do_wait",
    "doc": ""
  },
  {
    "name": "add_child_handler",
    "doc": "Register a new child handler."
  },
  {
    "name": "attach_loop",
    "doc": "Attach the watcher to an event loop."
  },
  {
    "name": "close",
    "doc": "Close the watcher."
  },
  {
    "name": "is_active",
    "doc": "Return ``True`` if the watcher is active and is used by the event loop."
  },
  {
    "name": "remove_child_handler",
    "doc": "Removes the handler for process 'pid'."
  },
  {
    "name": "_format",
    "doc": ""
  },
  {
    "name": "_get",
    "doc": ""
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "_init",
    "doc": ""
  },
  {
    "name": "_put",
    "doc": ""
  },
  {
    "name": "_wakeup_next",
    "doc": ""
  },
  {
    "name": "empty",
    "doc": "Return True if the queue is empty, False otherwise."
  },
  {
    "name": "full",
    "doc": "Return True if there are maxsize items in the queue."
  },
  {
    "name": "get",
    "doc": "Remove and return an item from the queue."
  },
  {
    "name": "get_nowait",
    "doc": "Remove and return an item from the queue."
  },
  {
    "name": "join",
    "doc": "Block until all items in the queue have been gotten and processed."
  },
  {
    "name": "put",
    "doc": "Put an item into the queue."
  },
  {
    "name": "put_nowait",
    "doc": "Put an item into the queue without blocking."
  },
  {
    "name": "qsize",
    "doc": "Number of items in the queue."
  },
  {
    "name": "task_done",
    "doc": "Indicate that a formerly enqueued task is complete."
  },
  {
    "name": "connection_lost",
    "doc": "Called when the connection is lost or closed."
  },
  {
    "name": "connection_made",
    "doc": "Called when a connection is made."
  },
  {
    "name": "data_received",
    "doc": "Called when some data is received."
  },
  {
    "name": "eof_received",
    "doc": "Called when the other end calls write_eof() or equivalent."
  },
  {
    "name": "pause_writing",
    "doc": "Called when the transport's buffer goes over the high-water mark."
  },
  {
    "name": "resume_writing",
    "doc": "Called when the transport's buffer drains below the low-water mark."
  },
  {
    "name": "_format",
    "doc": ""
  },
  {
    "name": "_get",
    "doc": ""
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "_init",
    "doc": ""
  },
  {
    "name": "_put",
    "doc": ""
  },
  {
    "name": "_wakeup_next",
    "doc": ""
  },
  {
    "name": "empty",
    "doc": "Return True if the queue is empty, False otherwise."
  },
  {
    "name": "full",
    "doc": "Return True if there are maxsize items in the queue."
  },
  {
    "name": "get",
    "doc": "Remove and return an item from the queue."
  },
  {
    "name": "get_nowait",
    "doc": "Remove and return an item from the queue."
  },
  {
    "name": "join",
    "doc": "Block until all items in the queue have been gotten and processed."
  },
  {
    "name": "put",
    "doc": "Put an item into the queue."
  },
  {
    "name": "put_nowait",
    "doc": "Put an item into the queue without blocking."
  },
  {
    "name": "qsize",
    "doc": "Number of items in the queue."
  },
  {
    "name": "task_done",
    "doc": "Indicate that a formerly enqueued task is complete."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "close",
    "doc": "Close the transport."
  },
  {
    "name": "get_extra_info",
    "doc": "Get optional transport information."
  },
  {
    "name": "get_protocol",
    "doc": "Return the current protocol."
  },
  {
    "name": "is_closing",
    "doc": "Return True if the transport is closing or closed."
  },
  {
    "name": "is_reading",
    "doc": "Return True if the transport is receiving."
  },
  {
    "name": "pause_reading",
    "doc": "Pause the receiving end."
  },
  {
    "name": "resume_reading",
    "doc": "Resume the receiving end."
  },
  {
    "name": "set_protocol",
    "doc": "Set a new protocol."
  },
  {
    "name": "_lazy_init",
    "doc": ""
  },
  {
    "name": "_on_sigint",
    "doc": ""
  },
  {
    "name": "close",
    "doc": "Shutdown and close event loop."
  },
  {
    "name": "get_loop",
    "doc": "Return embedded event loop."
  },
  {
    "name": "run",
    "doc": "Run a coroutine inside the embedded event loop."
  },
  {
    "name": "_do_waitpid",
    "doc": ""
  },
  {
    "name": "_do_waitpid_all",
    "doc": ""
  },
  {
    "name": "_sig_chld",
    "doc": ""
  },
  {
    "name": "add_child_handler",
    "doc": "Register a new child handler."
  },
  {
    "name": "attach_loop",
    "doc": "Attach the watcher to an event loop."
  },
  {
    "name": "close",
    "doc": "Close the watcher."
  },
  {
    "name": "is_active",
    "doc": "Return ``True`` if the watcher is active and is used by the event loop."
  },
  {
    "name": "remove_child_handler",
    "doc": "Removes the handler for process 'pid'."
  },
  {
    "name": "_accept_connection",
    "doc": ""
  },
  {
    "name": "_accept_connection2",
    "doc": ""
  },
  {
    "name": "_add_callback",
    "doc": "Add a Handle to _ready."
  },
  {
    "name": "_add_callback_signalsafe",
    "doc": "Like _add_callback() but called from a signal handler."
  },
  {
    "name": "_add_reader",
    "doc": ""
  },
  {
    "name": "_add_writer",
    "doc": ""
  },
  {
    "name": "_asyncgen_finalizer_hook",
    "doc": ""
  },
  {
    "name": "_asyncgen_firstiter_hook",
    "doc": ""
  },
  {
    "name": "_call_soon",
    "doc": ""
  },
  {
    "name": "_check_callback",
    "doc": ""
  },
  {
    "name": "_check_closed",
    "doc": ""
  },
  {
    "name": "_check_default_executor",
    "doc": ""
  },
  {
    "name": "_check_running",
    "doc": ""
  },
  {
    "name": "_check_sendfile_params",
    "doc": ""
  },
  {
    "name": "_check_signal",
    "doc": "Internal helper to validate a signal."
  },
  {
    "name": "_check_thread",
    "doc": "Check that the current thread is the thread running the event loop."
  },
  {
    "name": "_child_watcher_callback",
    "doc": ""
  },
  {
    "name": "_close_self_pipe",
    "doc": ""
  },
  {
    "name": "_connect_sock",
    "doc": "Create, bind and connect one socket."
  },
  {
    "name": "_create_connection_transport",
    "doc": ""
  },
  {
    "name": "_create_server_getaddrinfo",
    "doc": ""
  },
  {
    "name": "_do_shutdown",
    "doc": ""
  },
  {
    "name": "_ensure_fd_no_transport",
    "doc": ""
  },
  {
    "name": "_ensure_resolved",
    "doc": ""
  },
  {
    "name": "_getaddrinfo_debug",
    "doc": ""
  },
  {
    "name": "_handle_signal",
    "doc": "Internal helper that is the actual signal handler."
  },
  {
    "name": "_log_subprocess",
    "doc": ""
  },
  {
    "name": "_make_datagram_transport",
    "doc": "Create datagram transport."
  },
  {
    "name": "_make_read_pipe_transport",
    "doc": "Create read pipe transport."
  },
  {
    "name": "_make_self_pipe",
    "doc": ""
  },
  {
    "name": "_make_socket_transport",
    "doc": "Create socket transport."
  },
  {
    "name": "_make_ssl_transport",
    "doc": "Create SSL transport."
  },
  {
    "name": "_make_subprocess_transport",
    "doc": "Create subprocess transport."
  },
  {
    "name": "_make_write_pipe_transport",
    "doc": "Create write pipe transport."
  },
  {
    "name": "_process_events",
    "doc": "Process selector events."
  },
  {
    "name": "_process_self_data",
    "doc": ""
  },
  {
    "name": "_read_from_self",
    "doc": ""
  },
  {
    "name": "_remove_reader",
    "doc": ""
  },
  {
    "name": "_remove_writer",
    "doc": "Remove a writer callback."
  },
  {
    "name": "_run_once",
    "doc": "Run one full iteration of the event loop."
  },
  {
    "name": "_sendfile_fallback",
    "doc": ""
  },
  {
    "name": "_sendfile_native",
    "doc": ""
  },
  {
    "name": "_set_coroutine_origin_tracking",
    "doc": ""
  },
  {
    "name": "_sock_accept",
    "doc": ""
  },
  {
    "name": "_sock_add_cancellation_callback",
    "doc": ""
  },
  {
    "name": "_sock_connect",
    "doc": ""
  },
  {
    "name": "_sock_connect_cb",
    "doc": ""
  },
  {
    "name": "_sock_read_done",
    "doc": ""
  },
  {
    "name": "_sock_recv",
    "doc": ""
  },
  {
    "name": "_sock_recv_into",
    "doc": ""
  },
  {
    "name": "_sock_recvfrom",
    "doc": ""
  },
  {
    "name": "_sock_recvfrom_into",
    "doc": ""
  },
  {
    "name": "_sock_sendall",
    "doc": ""
  },
  {
    "name": "_sock_sendfile_fallback",
    "doc": ""
  },
  {
    "name": "_sock_sendfile_native",
    "doc": ""
  },
  {
    "name": "_sock_sendfile_native_impl",
    "doc": ""
  },
  {
    "name": "_sock_sendfile_update_filepos",
    "doc": ""
  },
  {
    "name": "_sock_sendto",
    "doc": ""
  },
  {
    "name": "_sock_write_done",
    "doc": ""
  },
  {
    "name": "_start_serving",
    "doc": ""
  },
  {
    "name": "_stop_serving",
    "doc": ""
  },
  {
    "name": "_timer_handle_cancelled",
    "doc": "Notification that a TimerHandle has been cancelled."
  },
  {
    "name": "_write_to_self",
    "doc": "Write a byte to self-pipe, to wake up the event loop."
  },
  {
    "name": "add_reader",
    "doc": "Add a reader callback."
  },
  {
    "name": "add_signal_handler",
    "doc": "Add a handler for a signal.  UNIX only."
  },
  {
    "name": "add_writer",
    "doc": "Add a writer callback.."
  },
  {
    "name": "call_at",
    "doc": "Like call_later(), but uses an absolute time."
  },
  {
    "name": "call_exception_handler",
    "doc": "Call the current event loop's exception handler."
  },
  {
    "name": "call_later",
    "doc": "Arrange for a callback to be called at a given time."
  },
  {
    "name": "call_soon",
    "doc": "Arrange for a callback to be called as soon as possible."
  },
  {
    "name": "call_soon_threadsafe",
    "doc": "Like call_soon(), but thread-safe."
  },
  {
    "name": "close",
    "doc": "Close the event loop."
  },
  {
    "name": "connect_accepted_socket",
    "doc": "Handle an accepted connection."
  },
  {
    "name": "connect_read_pipe",
    "doc": "Register read pipe in event loop. Set the pipe to non-blocking mode."
  },
  {
    "name": "connect_write_pipe",
    "doc": "Register write pipe in event loop."
  },
  {
    "name": "create_connection",
    "doc": "Connect to a TCP server."
  },
  {
    "name": "create_datagram_endpoint",
    "doc": "Create datagram connection."
  },
  {
    "name": "create_future",
    "doc": "Create a Future object attached to the loop."
  },
  {
    "name": "create_server",
    "doc": "Create a TCP server."
  },
  {
    "name": "create_task",
    "doc": "Schedule a coroutine object."
  },
  {
    "name": "create_unix_connection",
    "doc": ""
  },
  {
    "name": "create_unix_server",
    "doc": "A coroutine which creates a UNIX Domain Socket server."
  },
  {
    "name": "default_exception_handler",
    "doc": "Default exception handler."
  },
  {
    "name": "get_debug",
    "doc": ""
  },
  {
    "name": "get_exception_handler",
    "doc": "Return an exception handler, or None if the default one is in use."
  },
  {
    "name": "get_task_factory",
    "doc": "Return a task factory, or None if the default one is in use."
  },
  {
    "name": "getaddrinfo",
    "doc": ""
  },
  {
    "name": "getnameinfo",
    "doc": ""
  },
  {
    "name": "is_closed",
    "doc": "Returns True if the event loop was closed."
  },
  {
    "name": "is_running",
    "doc": "Returns True if the event loop is running."
  },
  {
    "name": "remove_reader",
    "doc": "Remove a reader callback."
  },
  {
    "name": "remove_signal_handler",
    "doc": "Remove a handler for a signal.  UNIX only."
  },
  {
    "name": "remove_writer",
    "doc": "Remove a writer callback."
  },
  {
    "name": "run_forever",
    "doc": "Run until stop() is called."
  },
  {
    "name": "run_in_executor",
    "doc": ""
  },
  {
    "name": "run_until_complete",
    "doc": "Run until the Future is done."
  },
  {
    "name": "sendfile",
    "doc": "Send a file to transport."
  },
  {
    "name": "set_debug",
    "doc": ""
  },
  {
    "name": "set_default_executor",
    "doc": ""
  },
  {
    "name": "set_exception_handler",
    "doc": "Set handler as the new event loop exception handler."
  },
  {
    "name": "set_task_factory",
    "doc": "Set a task factory that will be used by loop.create_task()."
  },
  {
    "name": "shutdown_asyncgens",
    "doc": "Shutdown all active asynchronous generators."
  },
  {
    "name": "shutdown_default_executor",
    "doc": "Schedule the shutdown of the default executor."
  },
  {
    "name": "sock_accept",
    "doc": "Accept a connection."
  },
  {
    "name": "sock_connect",
    "doc": "Connect to a remote socket at address."
  },
  {
    "name": "sock_recv",
    "doc": "Receive data from the socket."
  },
  {
    "name": "sock_recv_into",
    "doc": "Receive data from the socket."
  },
  {
    "name": "sock_recvfrom",
    "doc": "Receive a datagram from a datagram socket."
  },
  {
    "name": "sock_recvfrom_into",
    "doc": "Receive data from the socket."
  },
  {
    "name": "sock_sendall",
    "doc": "Send data to the socket."
  },
  {
    "name": "sock_sendfile",
    "doc": ""
  },
  {
    "name": "sock_sendto",
    "doc": "Send data to the socket."
  },
  {
    "name": "start_tls",
    "doc": "Upgrade transport to TLS."
  },
  {
    "name": "stop",
    "doc": "Stop running the event loop."
  },
  {
    "name": "subprocess_exec",
    "doc": ""
  },
  {
    "name": "subprocess_shell",
    "doc": ""
  },
  {
    "name": "time",
    "doc": "Return the time according to the event loop's clock."
  },
  {
    "name": "_get_loop",
    "doc": ""
  },
  {
    "name": "_wake_up_next",
    "doc": "Wake up the first waiter that isn't done."
  },
  {
    "name": "acquire",
    "doc": "Acquire a semaphore."
  },
  {
    "name": "locked",
    "doc": "Returns True if semaphore cannot be acquired immediately."
  },
  {
    "name": "release",
    "doc": "Release a semaphore, incrementing the internal counter by one."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_attach",
    "doc": ""
  },
  {
    "name": "_detach",
    "doc": ""
  },
  {
    "name": "_start_serving",
    "doc": ""
  },
  {
    "name": "_wakeup",
    "doc": ""
  },
  {
    "name": "close",
    "doc": "Stop serving.  This leaves existing connections open."
  },
  {
    "name": "get_loop",
    "doc": "Get the event loop the Server object is attached to."
  },
  {
    "name": "is_serving",
    "doc": "Return True if the server is accepting connections."
  },
  {
    "name": "serve_forever",
    "doc": "Start accepting connections until the coroutine is cancelled."
  },
  {
    "name": "start_serving",
    "doc": "Start accepting connections."
  },
  {
    "name": "wait_closed",
    "doc": "Coroutine to wait until service is closed."
  },
  {
    "name": "_maybe_resume_transport",
    "doc": ""
  },
  {
    "name": "_wait_for_data",
    "doc": "Wait until feed_data() or feed_eof() is called."
  },
  {
    "name": "_wakeup_waiter",
    "doc": "Wakeup read*() functions waiting for data or EOF."
  },
  {
    "name": "at_eof",
    "doc": "Return True if the buffer is empty and 'feed_eof' was called."
  },
  {
    "name": "exception",
    "doc": ""
  },
  {
    "name": "feed_data",
    "doc": ""
  },
  {
    "name": "feed_eof",
    "doc": ""
  },
  {
    "name": "read",
    "doc": "Read up to `n` bytes from the stream."
  },
  {
    "name": "readexactly",
    "doc": "Read exactly `n` bytes."
  },
  {
    "name": "readline",
    "doc": "Read chunk of data from the stream until newline (b'"
  },
  {
    "name": "readuntil",
    "doc": "Read data from the stream until ``separator`` is found."
  },
  {
    "name": "set_exception",
    "doc": ""
  },
  {
    "name": "set_transport",
    "doc": ""
  },
  {
    "name": "_drain_helper",
    "doc": ""
  },
  {
    "name": "_get_close_waiter",
    "doc": ""
  },
  {
    "name": "_replace_writer",
    "doc": ""
  },
  {
    "name": "connection_lost",
    "doc": "Called when the connection is lost or closed."
  },
  {
    "name": "connection_made",
    "doc": "Called when a connection is made."
  },
  {
    "name": "data_received",
    "doc": "Called when some data is received."
  },
  {
    "name": "eof_received",
    "doc": "Called when the other end calls write_eof() or equivalent."
  },
  {
    "name": "pause_writing",
    "doc": "Called when the transport's buffer goes over the high-water mark."
  },
  {
    "name": "resume_writing",
    "doc": "Called when the transport's buffer drains below the low-water mark."
  },
  {
    "name": "can_write_eof",
    "doc": ""
  },
  {
    "name": "close",
    "doc": ""
  },
  {
    "name": "drain",
    "doc": "Flush the write buffer."
  },
  {
    "name": "get_extra_info",
    "doc": ""
  },
  {
    "name": "is_closing",
    "doc": ""
  },
  {
    "name": "start_tls",
    "doc": "Upgrade an existing stream-based connection to TLS."
  },
  {
    "name": "wait_closed",
    "doc": ""
  },
  {
    "name": "write",
    "doc": ""
  },
  {
    "name": "write_eof",
    "doc": ""
  },
  {
    "name": "writelines",
    "doc": ""
  },
  {
    "name": "connection_lost",
    "doc": "Called when the connection is lost or closed."
  },
  {
    "name": "connection_made",
    "doc": "Called when a connection is made."
  },
  {
    "name": "pause_writing",
    "doc": "Called when the transport's buffer goes over the high-water mark."
  },
  {
    "name": "pipe_connection_lost",
    "doc": "Called when a file descriptor associated with the child process is"
  },
  {
    "name": "pipe_data_received",
    "doc": "Called when the subprocess writes data into stdout/stderr pipe."
  },
  {
    "name": "process_exited",
    "doc": "Called when subprocess has exited."
  },
  {
    "name": "resume_writing",
    "doc": "Called when the transport's buffer drains below the low-water mark."
  },
  {
    "name": "close",
    "doc": "Close the transport."
  },
  {
    "name": "get_extra_info",
    "doc": "Get optional transport information."
  },
  {
    "name": "get_pid",
    "doc": "Get subprocess id."
  },
  {
    "name": "get_pipe_transport",
    "doc": "Get transport for pipe with number fd."
  },
  {
    "name": "get_protocol",
    "doc": "Return the current protocol."
  },
  {
    "name": "get_returncode",
    "doc": "Get subprocess returncode."
  },
  {
    "name": "is_closing",
    "doc": "Return True if the transport is closing or closed."
  },
  {
    "name": "kill",
    "doc": "Kill the subprocess."
  },
  {
    "name": "send_signal",
    "doc": "Send signal to subprocess."
  },
  {
    "name": "set_protocol",
    "doc": "Set a new protocol."
  },
  {
    "name": "terminate",
    "doc": "Stop the subprocess."
  },
  {
    "name": "_make_cancelled_error",
    "doc": "Create the CancelledError to raise if the Task is cancelled."
  },
  {
    "name": "add_done_callback",
    "doc": "Add a callback to be run when the future becomes done."
  },
  {
    "name": "cancel",
    "doc": "Request that this task cancel itself."
  },
  {
    "name": "cancelled",
    "doc": "Return True if the future was cancelled."
  },
  {
    "name": "cancelling",
    "doc": "Return the count of the task's cancellation requests."
  },
  {
    "name": "done",
    "doc": "Return True if the future is done."
  },
  {
    "name": "exception",
    "doc": "Return the exception that was set on this future."
  },
  {
    "name": "get_coro",
    "doc": ""
  },
  {
    "name": "get_loop",
    "doc": "Return the event loop the Future is bound to."
  },
  {
    "name": "get_name",
    "doc": ""
  },
  {
    "name": "get_stack",
    "doc": "Return the list of stack frames for this task's coroutine."
  },
  {
    "name": "print_stack",
    "doc": "Print the stack or traceback for this task's coroutine."
  },
  {
    "name": "remove_done_callback",
    "doc": "Remove all instances of a callback from the \"call when done\" list."
  },
  {
    "name": "result",
    "doc": "Return the result this future represents."
  },
  {
    "name": "set_exception",
    "doc": "Mark the future done and set an exception."
  },
  {
    "name": "set_name",
    "doc": ""
  },
  {
    "name": "set_result",
    "doc": "Mark the future done and set its result."
  },
  {
    "name": "uncancel",
    "doc": "Decrement the task's count of cancellation requests."
  },
  {
    "name": "_abort",
    "doc": ""
  },
  {
    "name": "_is_base_error",
    "doc": ""
  },
  {
    "name": "_on_task_done",
    "doc": ""
  },
  {
    "name": "create_task",
    "doc": "Create a new task in this group and return it."
  },
  {
    "name": "_do_waitpid",
    "doc": ""
  },
  {
    "name": "_join_threads",
    "doc": "Internal: Join all non-daemon threads"
  },
  {
    "name": "add_child_handler",
    "doc": "Register a new child handler."
  },
  {
    "name": "attach_loop",
    "doc": "Attach the watcher to an event loop."
  },
  {
    "name": "close",
    "doc": "Close the watcher."
  },
  {
    "name": "is_active",
    "doc": "Return ``True`` if the watcher is active and is used by the event loop."
  },
  {
    "name": "remove_child_handler",
    "doc": "Removes the handler for process 'pid'."
  },
  {
    "name": "_on_timeout",
    "doc": ""
  },
  {
    "name": "expired",
    "doc": "Is timeout expired during execution?"
  },
  {
    "name": "reschedule",
    "doc": "Reschedule the timeout."
  },
  {
    "name": "when",
    "doc": "Return the current deadline."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_repr_info",
    "doc": ""
  },
  {
    "name": "_run",
    "doc": ""
  },
  {
    "name": "cancel",
    "doc": ""
  },
  {
    "name": "cancelled",
    "doc": ""
  },
  {
    "name": "when",
    "doc": "Return a scheduled callback time."
  },
  {
    "name": "abort",
    "doc": "Close the transport immediately."
  },
  {
    "name": "can_write_eof",
    "doc": "Return True if this transport supports write_eof(), False if not."
  },
  {
    "name": "close",
    "doc": "Close the transport."
  },
  {
    "name": "get_extra_info",
    "doc": "Get optional transport information."
  },
  {
    "name": "get_protocol",
    "doc": "Return the current protocol."
  },
  {
    "name": "get_write_buffer_limits",
    "doc": "Get the high and low watermarks for write flow control."
  },
  {
    "name": "get_write_buffer_size",
    "doc": "Return the current size of the write buffer."
  },
  {
    "name": "is_closing",
    "doc": "Return True if the transport is closing or closed."
  },
  {
    "name": "is_reading",
    "doc": "Return True if the transport is receiving."
  },
  {
    "name": "pause_reading",
    "doc": "Pause the receiving end."
  },
  {
    "name": "resume_reading",
    "doc": "Resume the receiving end."
  },
  {
    "name": "set_protocol",
    "doc": "Set a new protocol."
  },
  {
    "name": "set_write_buffer_limits",
    "doc": "Set the high- and low-water limits for write flow control."
  },
  {
    "name": "write",
    "doc": "Write some data bytes to the transport."
  },
  {
    "name": "write_eof",
    "doc": "Close the write end after flushing buffered data."
  },
  {
    "name": "writelines",
    "doc": "Write a list (or any iterable) of data bytes to the transport."
  },
  {
    "name": "abort",
    "doc": "Close the transport immediately."
  },
  {
    "name": "can_write_eof",
    "doc": "Return True if this transport supports write_eof(), False if not."
  },
  {
    "name": "close",
    "doc": "Close the transport."
  },
  {
    "name": "get_extra_info",
    "doc": "Get optional transport information."
  },
  {
    "name": "get_protocol",
    "doc": "Return the current protocol."
  },
  {
    "name": "get_write_buffer_limits",
    "doc": "Get the high and low watermarks for write flow control."
  },
  {
    "name": "get_write_buffer_size",
    "doc": "Return the current size of the write buffer."
  },
  {
    "name": "is_closing",
    "doc": "Return True if the transport is closing or closed."
  },
  {
    "name": "set_protocol",
    "doc": "Set a new protocol."
  },
  {
    "name": "set_write_buffer_limits",
    "doc": "Set the high- and low-water limits for write flow control."
  },
  {
    "name": "write",
    "doc": "Write some data bytes to the transport."
  },
  {
    "name": "write_eof",
    "doc": "Close the write end after flushing buffered data."
  },
  {
    "name": "writelines",
    "doc": "Write a list (or any iterable) of data bytes to the transport."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "filtered_cached",
    "doc": "Split an iterable of paths in `sources` into two sets."
  },
  {
    "name": "get_file_data",
    "doc": "Return file data for path."
  },
  {
    "name": "hash_digest",
    "doc": "Return hash digest for path."
  },
  {
    "name": "is_changed",
    "doc": "Check if source has changed compared to cached version."
  },
  {
    "name": "read",
    "doc": "Read the cache if it exists and is well-formed."
  },
  {
    "name": "write",
    "doc": "Update the cache file data and write a new cache file."
  },
  {
    "name": "_maybe_empty_lines",
    "doc": ""
  },
  {
    "name": "_maybe_empty_lines_for_class_or_def",
    "doc": ""
  },
  {
    "name": "maybe_empty_lines",
    "doc": "Return the number of extra empty lines before and after the `current_line`."
  },
  {
    "name": "capitalize",
    "doc": "Return a capitalized version of the string."
  },
  {
    "name": "casefold",
    "doc": "Return a version of the string suitable for caseless comparisons."
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "count",
    "doc": "S.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "encode",
    "doc": "Encode the string using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "S.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "find",
    "doc": "S.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "format",
    "doc": "S.format(*args, **kwargs) -> str"
  },
  {
    "name": "format_map",
    "doc": "S.format_map(mapping) -> str"
  },
  {
    "name": "index",
    "doc": "S.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "isalnum",
    "doc": "Return True if the string is an alpha-numeric string, False otherwise."
  },
  {
    "name": "isalpha",
    "doc": "Return True if the string is an alphabetic string, False otherwise."
  },
  {
    "name": "isascii",
    "doc": "Return True if all characters in the string are ASCII, False otherwise."
  },
  {
    "name": "isdecimal",
    "doc": "Return True if the string is a decimal string, False otherwise."
  },
  {
    "name": "isdigit",
    "doc": "Return True if the string is a digit string, False otherwise."
  },
  {
    "name": "isidentifier",
    "doc": "Return True if the string is a valid Python identifier, False otherwise."
  },
  {
    "name": "islower",
    "doc": "Return True if the string is a lowercase string, False otherwise."
  },
  {
    "name": "isnumeric",
    "doc": "Return True if the string is a numeric string, False otherwise."
  },
  {
    "name": "isprintable",
    "doc": "Return True if the string is printable, False otherwise."
  },
  {
    "name": "isspace",
    "doc": "Return True if the string is a whitespace string, False otherwise."
  },
  {
    "name": "istitle",
    "doc": "Return True if the string is a title-cased string, False otherwise."
  },
  {
    "name": "isupper",
    "doc": "Return True if the string is an uppercase string, False otherwise."
  },
  {
    "name": "join",
    "doc": "Concatenate any number of strings."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "Return a copy of the string converted to lowercase."
  },
  {
    "name": "lstrip",
    "doc": "Return a copy of the string with leading whitespace removed."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table usable for str.translate()."
  },
  {
    "name": "partition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "removeprefix",
    "doc": "Return a str with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a str with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "rfind",
    "doc": "S.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "S.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "rstrip",
    "doc": "Return a copy of the string with trailing whitespace removed."
  },
  {
    "name": "split",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the string, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "S.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Return a copy of the string with leading and trailing whitespace removed."
  },
  {
    "name": "swapcase",
    "doc": "Convert uppercase characters to lowercase and lowercase characters to uppercase."
  },
  {
    "name": "title",
    "doc": "Return a version of the string where each word is titlecased."
  },
  {
    "name": "translate",
    "doc": "Replace each character in the string using the given translation table."
  },
  {
    "name": "upper",
    "doc": "Return a copy of the string converted to uppercase."
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "capitalize",
    "doc": "Return a capitalized version of the string."
  },
  {
    "name": "casefold",
    "doc": "Return a version of the string suitable for caseless comparisons."
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "count",
    "doc": "S.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "encode",
    "doc": "Encode the string using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "S.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "find",
    "doc": "S.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "format",
    "doc": "S.format(*args, **kwargs) -> str"
  },
  {
    "name": "format_map",
    "doc": "S.format_map(mapping) -> str"
  },
  {
    "name": "index",
    "doc": "S.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "isalnum",
    "doc": "Return True if the string is an alpha-numeric string, False otherwise."
  },
  {
    "name": "isalpha",
    "doc": "Return True if the string is an alphabetic string, False otherwise."
  },
  {
    "name": "isascii",
    "doc": "Return True if all characters in the string are ASCII, False otherwise."
  },
  {
    "name": "isdecimal",
    "doc": "Return True if the string is a decimal string, False otherwise."
  },
  {
    "name": "isdigit",
    "doc": "Return True if the string is a digit string, False otherwise."
  },
  {
    "name": "isidentifier",
    "doc": "Return True if the string is a valid Python identifier, False otherwise."
  },
  {
    "name": "islower",
    "doc": "Return True if the string is a lowercase string, False otherwise."
  },
  {
    "name": "isnumeric",
    "doc": "Return True if the string is a numeric string, False otherwise."
  },
  {
    "name": "isprintable",
    "doc": "Return True if the string is printable, False otherwise."
  },
  {
    "name": "isspace",
    "doc": "Return True if the string is a whitespace string, False otherwise."
  },
  {
    "name": "istitle",
    "doc": "Return True if the string is a title-cased string, False otherwise."
  },
  {
    "name": "isupper",
    "doc": "Return True if the string is an uppercase string, False otherwise."
  },
  {
    "name": "join",
    "doc": "Concatenate any number of strings."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "Return a copy of the string converted to lowercase."
  },
  {
    "name": "lstrip",
    "doc": "Return a copy of the string with leading whitespace removed."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table usable for str.translate()."
  },
  {
    "name": "partition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "removeprefix",
    "doc": "Return a str with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a str with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "rfind",
    "doc": "S.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "S.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "rstrip",
    "doc": "Return a copy of the string with trailing whitespace removed."
  },
  {
    "name": "split",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the string, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "S.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Return a copy of the string with leading and trailing whitespace removed."
  },
  {
    "name": "swapcase",
    "doc": "Convert uppercase characters to lowercase and lowercase characters to uppercase."
  },
  {
    "name": "title",
    "doc": "Return a version of the string where each word is titlecased."
  },
  {
    "name": "translate",
    "doc": "Replace each character in the string using the given translation table."
  },
  {
    "name": "upper",
    "doc": "Return a copy of the string converted to uppercase."
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "get_cache_key",
    "doc": ""
  },
  {
    "name": "close",
    "doc": "Raise GeneratorExit inside generator."
  },
  {
    "name": "send",
    "doc": "Send a value into the generator."
  },
  {
    "name": "throw",
    "doc": "Raise an exception in the generator."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_eq",
    "doc": "Compare two nodes for equality."
  },
  {
    "name": "changed",
    "doc": ""
  },
  {
    "name": "clone",
    "doc": "Return a cloned (deep) copy of self."
  },
  {
    "name": "depth",
    "doc": ""
  },
  {
    "name": "get_lineno",
    "doc": "Return the line number which generated the invocant node."
  },
  {
    "name": "get_suffix",
    "doc": "Return the string immediately following the invocant node. This is"
  },
  {
    "name": "leaves",
    "doc": ""
  },
  {
    "name": "post_order",
    "doc": "Return a post-order iterator for the tree."
  },
  {
    "name": "pre_order",
    "doc": "Return a pre-order iterator for the tree."
  },
  {
    "name": "remove",
    "doc": "Remove the node from the tree. Returns the position of the node in its"
  },
  {
    "name": "replace",
    "doc": "Replace this node with a new one in the parent."
  },
  {
    "name": "line",
    "doc": "Generate a line."
  },
  {
    "name": "visit",
    "doc": "Main method to visit `node` and its children."
  },
  {
    "name": "visit_DEDENT",
    "doc": "Decrease indentation level, maybe yield a line."
  },
  {
    "name": "visit_ENDMARKER",
    "doc": "End of file. Process outstanding comments and end with a newline."
  },
  {
    "name": "visit_INDENT",
    "doc": "Increase indentation level, maybe yield a line."
  },
  {
    "name": "visit_NUMBER",
    "doc": ""
  },
  {
    "name": "visit_SEMI",
    "doc": "Remove a semicolon and put the other statement on a separate line."
  },
  {
    "name": "visit_STANDALONE_COMMENT",
    "doc": ""
  },
  {
    "name": "visit_STRING",
    "doc": ""
  },
  {
    "name": "visit_async_stmt",
    "doc": "Visit `async def`, `async for`, `async with`."
  },
  {
    "name": "visit_atom",
    "doc": "Visit any atom"
  },
  {
    "name": "visit_decorators",
    "doc": "Visit decorators."
  },
  {
    "name": "visit_default",
    "doc": "Default `visit_*()` implementation. Recurses to children of `node`."
  },
  {
    "name": "visit_dictsetmaker",
    "doc": ""
  },
  {
    "name": "visit_factor",
    "doc": "Force parentheses between a unary op and a binary power:"
  },
  {
    "name": "visit_fstring",
    "doc": ""
  },
  {
    "name": "visit_funcdef",
    "doc": "Visit function definition."
  },
  {
    "name": "visit_match_case",
    "doc": "Visit either a match or case statement."
  },
  {
    "name": "visit_paramspec",
    "doc": ""
  },
  {
    "name": "visit_power",
    "doc": ""
  },
  {
    "name": "visit_simple_stmt",
    "doc": "Visit a statement without nested statements."
  },
  {
    "name": "visit_stmt",
    "doc": "Visit a statement."
  },
  {
    "name": "visit_suite",
    "doc": "Visit a suite."
  },
  {
    "name": "visit_test",
    "doc": "Visit an `x if y else z` test"
  },
  {
    "name": "visit_tname",
    "doc": "Add potential parentheses around types in function parameter lists to be made"
  },
  {
    "name": "visit_typeparams",
    "doc": ""
  },
  {
    "name": "visit_typevartuple",
    "doc": ""
  },
  {
    "name": "all_lines",
    "doc": ""
  },
  {
    "name": "get_cache_key",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "D.popitem() -> (k, v), remove and return some (key, value) pair"
  },
  {
    "name": "setdefault",
    "doc": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D"
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "capitalize",
    "doc": "Return a capitalized version of the string."
  },
  {
    "name": "casefold",
    "doc": "Return a version of the string suitable for caseless comparisons."
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "count",
    "doc": "S.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "encode",
    "doc": "Encode the string using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "S.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "find",
    "doc": "S.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "format",
    "doc": "S.format(*args, **kwargs) -> str"
  },
  {
    "name": "format_map",
    "doc": "S.format_map(mapping) -> str"
  },
  {
    "name": "index",
    "doc": "S.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "isalnum",
    "doc": "Return True if the string is an alpha-numeric string, False otherwise."
  },
  {
    "name": "isalpha",
    "doc": "Return True if the string is an alphabetic string, False otherwise."
  },
  {
    "name": "isascii",
    "doc": "Return True if all characters in the string are ASCII, False otherwise."
  },
  {
    "name": "isdecimal",
    "doc": "Return True if the string is a decimal string, False otherwise."
  },
  {
    "name": "isdigit",
    "doc": "Return True if the string is a digit string, False otherwise."
  },
  {
    "name": "isidentifier",
    "doc": "Return True if the string is a valid Python identifier, False otherwise."
  },
  {
    "name": "islower",
    "doc": "Return True if the string is a lowercase string, False otherwise."
  },
  {
    "name": "isnumeric",
    "doc": "Return True if the string is a numeric string, False otherwise."
  },
  {
    "name": "isprintable",
    "doc": "Return True if the string is printable, False otherwise."
  },
  {
    "name": "isspace",
    "doc": "Return True if the string is a whitespace string, False otherwise."
  },
  {
    "name": "istitle",
    "doc": "Return True if the string is a title-cased string, False otherwise."
  },
  {
    "name": "isupper",
    "doc": "Return True if the string is an uppercase string, False otherwise."
  },
  {
    "name": "join",
    "doc": "Concatenate any number of strings."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "Return a copy of the string converted to lowercase."
  },
  {
    "name": "lstrip",
    "doc": "Return a copy of the string with leading whitespace removed."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table usable for str.translate()."
  },
  {
    "name": "partition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "removeprefix",
    "doc": "Return a str with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a str with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "rfind",
    "doc": "S.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "S.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "rstrip",
    "doc": "Return a copy of the string with trailing whitespace removed."
  },
  {
    "name": "split",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the string, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "S.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Return a copy of the string with leading and trailing whitespace removed."
  },
  {
    "name": "swapcase",
    "doc": "Convert uppercase characters to lowercase and lowercase characters to uppercase."
  },
  {
    "name": "title",
    "doc": "Return a version of the string where each word is titlecased."
  },
  {
    "name": "translate",
    "doc": "Replace each character in the string using the given translation table."
  },
  {
    "name": "upper",
    "doc": "Return a copy of the string converted to uppercase."
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "_eq",
    "doc": "Compare two nodes for equality."
  },
  {
    "name": "append_child",
    "doc": "Equivalent to 'node.children.append(child)'. This method also sets the"
  },
  {
    "name": "changed",
    "doc": ""
  },
  {
    "name": "clone",
    "doc": "Return a cloned (deep) copy of self."
  },
  {
    "name": "depth",
    "doc": ""
  },
  {
    "name": "get_lineno",
    "doc": "Return the line number which generated the invocant node."
  },
  {
    "name": "get_suffix",
    "doc": "Return the string immediately following the invocant node. This is"
  },
  {
    "name": "insert_child",
    "doc": "Equivalent to 'node.children.insert(i, child)'. This method also sets"
  },
  {
    "name": "invalidate_sibling_maps",
    "doc": ""
  },
  {
    "name": "leaves",
    "doc": ""
  },
  {
    "name": "post_order",
    "doc": "Return a post-order iterator for the tree."
  },
  {
    "name": "pre_order",
    "doc": "Return a pre-order iterator for the tree."
  },
  {
    "name": "remove",
    "doc": "Remove the node from the tree. Returns the position of the node in its"
  },
  {
    "name": "replace",
    "doc": "Replace this node with a new one in the parent."
  },
  {
    "name": "set_child",
    "doc": "Equivalent to 'node.children[i] = child'. This method also sets the"
  },
  {
    "name": "update_sibling_maps",
    "doc": ""
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_format_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parts",
    "doc": ""
  },
  {
    "name": "_make_child",
    "doc": ""
  },
  {
    "name": "_make_child_relpath",
    "doc": ""
  },
  {
    "name": "_parse_args",
    "doc": ""
  },
  {
    "name": "_scandir",
    "doc": ""
  },
  {
    "name": "absolute",
    "doc": "Return an absolute version of this path by prepending the current"
  },
  {
    "name": "as_posix",
    "doc": "Return the string representation of the path with forward (/)"
  },
  {
    "name": "as_uri",
    "doc": "Return the path as a 'file' URI."
  },
  {
    "name": "chmod",
    "doc": "Change the permissions of the path, like os.chmod()."
  },
  {
    "name": "cwd",
    "doc": "Return a new path pointing to the current working directory"
  },
  {
    "name": "exists",
    "doc": "Whether this path exists."
  },
  {
    "name": "expanduser",
    "doc": "Return a new path with expanded ~ and ~user constructs"
  },
  {
    "name": "glob",
    "doc": "Iterate over this subtree and yield all existing files (of any"
  },
  {
    "name": "group",
    "doc": "Return the group name of the file gid."
  },
  {
    "name": "hardlink_to",
    "doc": "Make this path a hard link pointing to the same file as *target*."
  },
  {
    "name": "home",
    "doc": "Return a new path pointing to the user's home directory (as"
  },
  {
    "name": "is_absolute",
    "doc": "True if the path is absolute (has both a root and, if applicable,"
  },
  {
    "name": "is_block_device",
    "doc": "Whether this path is a block device."
  },
  {
    "name": "is_char_device",
    "doc": "Whether this path is a character device."
  },
  {
    "name": "is_dir",
    "doc": "Whether this path is a directory."
  },
  {
    "name": "is_fifo",
    "doc": "Whether this path is a FIFO."
  },
  {
    "name": "is_file",
    "doc": "Whether this path is a regular file (also True for symlinks pointing"
  },
  {
    "name": "is_mount",
    "doc": "Check if this path is a POSIX mount point"
  },
  {
    "name": "is_relative_to",
    "doc": "Return True if the path is relative to another path or False."
  },
  {
    "name": "is_reserved",
    "doc": "Return True if the path contains one of the special names reserved"
  },
  {
    "name": "is_socket",
    "doc": "Whether this path is a socket."
  },
  {
    "name": "is_symlink",
    "doc": "Whether this path is a symbolic link."
  },
  {
    "name": "iterdir",
    "doc": "Iterate over the files in this directory.  Does not yield any"
  },
  {
    "name": "joinpath",
    "doc": "Combine this path with one or several arguments, and return a"
  },
  {
    "name": "lchmod",
    "doc": "Like chmod(), except if the path points to a symlink, the symlink's"
  },
  {
    "name": "link_to",
    "doc": "Make the target path a hard link pointing to this path."
  },
  {
    "name": "lstat",
    "doc": "Like stat(), except if the path points to a symlink, the symlink's"
  },
  {
    "name": "match",
    "doc": "Return True if this path matches the given pattern."
  },
  {
    "name": "mkdir",
    "doc": "Create a new directory at this given path."
  },
  {
    "name": "open",
    "doc": "Open the file pointed by this path and return a file object, as"
  },
  {
    "name": "owner",
    "doc": "Return the login name of the file owner."
  },
  {
    "name": "read_bytes",
    "doc": "Open the file in bytes mode, read it, and close the file."
  },
  {
    "name": "read_text",
    "doc": "Open the file in text mode, read it, and close the file."
  },
  {
    "name": "readlink",
    "doc": "Return the path to which the symbolic link points."
  },
  {
    "name": "relative_to",
    "doc": "Return the relative path to another path identified by the passed"
  },
  {
    "name": "rename",
    "doc": "Rename this path to the target path."
  },
  {
    "name": "replace",
    "doc": "Rename this path to the target path, overwriting if that path exists."
  },
  {
    "name": "resolve",
    "doc": "Make the path absolute, resolving all symlinks on the way and also"
  },
  {
    "name": "rglob",
    "doc": "Recursively yield all existing files (of any kind, including"
  },
  {
    "name": "rmdir",
    "doc": "Remove this directory.  The directory must be empty."
  },
  {
    "name": "samefile",
    "doc": "Return whether other_path is the same or not as this file"
  },
  {
    "name": "stat",
    "doc": "Return the result of the stat() system call on this path, like"
  },
  {
    "name": "symlink_to",
    "doc": "Make this path a symlink pointing to the target path."
  },
  {
    "name": "touch",
    "doc": "Create this file with the given access mode, if it doesn't exist."
  },
  {
    "name": "unlink",
    "doc": "Remove this file or link."
  },
  {
    "name": "with_name",
    "doc": "Return a new path with the file name changed."
  },
  {
    "name": "with_stem",
    "doc": "Return a new path with the stem changed."
  },
  {
    "name": "with_suffix",
    "doc": "Return a new path with the file suffix changed.  If the path"
  },
  {
    "name": "write_bytes",
    "doc": "Open the file in bytes mode, write to it, and close the file."
  },
  {
    "name": "write_text",
    "doc": "Open the file in text mode, write to it, and close the file."
  },
  {
    "name": "_match_file",
    "doc": "Check the file against the patterns."
  },
  {
    "name": "check_file",
    "doc": "Check the files against this path-spec."
  },
  {
    "name": "check_files",
    "doc": "Check the files against this path-spec."
  },
  {
    "name": "check_tree_files",
    "doc": "Walks the specified root path for all files and checks them against this"
  },
  {
    "name": "from_lines",
    "doc": "Compiles the pattern lines."
  },
  {
    "name": "match_entries",
    "doc": "Matches the entries to this path-spec."
  },
  {
    "name": "match_file",
    "doc": "Matches the file to this path-spec."
  },
  {
    "name": "match_files",
    "doc": "Matches the files to this path-spec."
  },
  {
    "name": "match_tree",
    "doc": "Walks the specified root path for all files and matches them to this"
  },
  {
    "name": "match_tree_entries",
    "doc": "Walks the specified root path for all files and matches them to this"
  },
  {
    "name": "match_tree_files",
    "doc": "Walks the specified root path for all files and matches them to this"
  },
  {
    "name": "findall",
    "doc": "Return a list of all non-overlapping matches of pattern in string."
  },
  {
    "name": "finditer",
    "doc": "Return an iterator over all non-overlapping matches for the RE pattern in string."
  },
  {
    "name": "fullmatch",
    "doc": "Matches against all of the string."
  },
  {
    "name": "match",
    "doc": "Matches zero or more characters at the beginning of the string."
  },
  {
    "name": "scanner",
    "doc": ""
  },
  {
    "name": "search",
    "doc": "Scan through string looking for a match, and return a corresponding match object instance."
  },
  {
    "name": "split",
    "doc": "Split string by the occurrences of pattern."
  },
  {
    "name": "sub",
    "doc": "Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl."
  },
  {
    "name": "subn",
    "doc": "Return the tuple (new_string, number_of_subs_made) found by replacing the leftmost non-overlapping occurrences of pattern with the replacement repl."
  },
  {
    "name": "done",
    "doc": "Increment the counter for successful reformatting. Write out a message."
  },
  {
    "name": "failed",
    "doc": "Increment the counter for failed reformatting. Write out a message."
  },
  {
    "name": "path_ignored",
    "doc": ""
  },
  {
    "name": "count",
    "doc": "S.count(value) -> integer -- return number of occurrences of value"
  },
  {
    "name": "index",
    "doc": "S.index(value, [start, [stop]]) -> integer -- return first index of value."
  },
  {
    "name": "astimezone",
    "doc": "tz -> convert to local time in new timezone tz"
  },
  {
    "name": "combine",
    "doc": "date, time -> datetime with same date and time fields"
  },
  {
    "name": "ctime",
    "doc": "Return ctime() style string."
  },
  {
    "name": "date",
    "doc": "Return date object with same year, month and day."
  },
  {
    "name": "dst",
    "doc": "Return self.tzinfo.dst(self)."
  },
  {
    "name": "fromisocalendar",
    "doc": "int, int, int -> Construct a date from the ISO year, week number and weekday."
  },
  {
    "name": "fromisoformat",
    "doc": "string -> datetime from a string in most ISO 8601 formats"
  },
  {
    "name": "fromordinal",
    "doc": "int -> date corresponding to a proleptic Gregorian ordinal."
  },
  {
    "name": "fromtimestamp",
    "doc": "timestamp[, tz] -> tz's local time from POSIX timestamp."
  },
  {
    "name": "isocalendar",
    "doc": "Return a named tuple containing ISO year, week number, and weekday."
  },
  {
    "name": "isoformat",
    "doc": "[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM]."
  },
  {
    "name": "isoweekday",
    "doc": "Return the day of the week represented by the date."
  },
  {
    "name": "now",
    "doc": "Returns new datetime object representing current time local to tz."
  },
  {
    "name": "replace",
    "doc": "Return datetime with new specified fields."
  },
  {
    "name": "strftime",
    "doc": "format -> strftime() style string."
  },
  {
    "name": "strptime",
    "doc": "string, format -> new datetime parsed from a string (like time.strptime())."
  },
  {
    "name": "time",
    "doc": "Return time object with same time but with tzinfo=None."
  },
  {
    "name": "timestamp",
    "doc": "Return POSIX timestamp as float."
  },
  {
    "name": "timetuple",
    "doc": "Return time tuple, compatible with time.localtime()."
  },
  {
    "name": "timetz",
    "doc": "Return time object with same time and tzinfo."
  },
  {
    "name": "today",
    "doc": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time())."
  },
  {
    "name": "toordinal",
    "doc": "Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1."
  },
  {
    "name": "tzname",
    "doc": "Return self.tzinfo.tzname(self)."
  },
  {
    "name": "utcfromtimestamp",
    "doc": "Construct a naive UTC datetime from a POSIX timestamp."
  },
  {
    "name": "utcnow",
    "doc": "Return a new datetime representing UTC day and time."
  },
  {
    "name": "utcoffset",
    "doc": "Return self.tzinfo.utcoffset(self)."
  },
  {
    "name": "utctimetuple",
    "doc": "Return UTC time tuple, compatible with time.localtime()."
  },
  {
    "name": "weekday",
    "doc": "Return the day of the week represented by the date."
  },
  {
    "name": "dst",
    "doc": "Return None."
  },
  {
    "name": "fromutc",
    "doc": "datetime in UTC -> datetime in local time."
  },
  {
    "name": "tzname",
    "doc": "If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'."
  },
  {
    "name": "utcoffset",
    "doc": "Return fixed offset."
  },
  {
    "name": "as_integer_ratio",
    "doc": "Return integer ratio."
  },
  {
    "name": "bit_count",
    "doc": "Number of ones in the binary representation of the absolute value of self."
  },
  {
    "name": "bit_length",
    "doc": "Number of bits necessary to represent self in binary."
  },
  {
    "name": "conjugate",
    "doc": "Returns self, the complex conjugate of any int."
  },
  {
    "name": "from_bytes",
    "doc": "Return the integer represented by the given array of bytes."
  },
  {
    "name": "to_bytes",
    "doc": "Return an array of bytes representing an integer."
  },
  {
    "name": "ArithmeticError",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "AssertionError",
    "doc": "Assertion failed."
  },
  {
    "name": "AttributeError",
    "doc": "Attribute not found."
  },
  {
    "name": "BaseException",
    "doc": "Common base class for all exceptions"
  },
  {
    "name": "BaseExceptionGroup",
    "doc": "A combination of multiple unrelated exceptions."
  },
  {
    "name": "BlockingIOError",
    "doc": "I/O operation would block."
  },
  {
    "name": "BrokenPipeError",
    "doc": "Broken pipe."
  },
  {
    "name": "BufferError",
    "doc": "Buffer error."
  },
  {
    "name": "BytesWarning",
    "doc": "Base class for warnings about bytes and buffer related problems, mostly"
  },
  {
    "name": "ChildProcessError",
    "doc": "Child process error."
  },
  {
    "name": "ConnectionAbortedError",
    "doc": "Connection aborted."
  },
  {
    "name": "ConnectionError",
    "doc": "Connection error."
  },
  {
    "name": "ConnectionRefusedError",
    "doc": "Connection refused."
  },
  {
    "name": "ConnectionResetError",
    "doc": "Connection reset."
  },
  {
    "name": "DeprecationWarning",
    "doc": "Base class for warnings about deprecated features."
  },
  {
    "name": "EOFError",
    "doc": "Read beyond end of file."
  },
  {
    "name": "EncodingWarning",
    "doc": "Base class for warnings about encodings."
  },
  {
    "name": "EnvironmentError",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "Exception",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "ExceptionGroup",
    "doc": "A combination of multiple unrelated exceptions."
  },
  {
    "name": "FileExistsError",
    "doc": "File already exists."
  },
  {
    "name": "FileNotFoundError",
    "doc": "File not found."
  },
  {
    "name": "FloatingPointError",
    "doc": "Floating point operation failed."
  },
  {
    "name": "FutureWarning",
    "doc": "Base class for warnings about constructs that will change semantically"
  },
  {
    "name": "GeneratorExit",
    "doc": "Request that a generator exit."
  },
  {
    "name": "IOError",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "ImportError",
    "doc": "Import can't find module, or can't find name in module."
  },
  {
    "name": "ImportWarning",
    "doc": "Base class for warnings about probable mistakes in module imports"
  },
  {
    "name": "IndentationError",
    "doc": "Improper indentation."
  },
  {
    "name": "IndexError",
    "doc": "Sequence index out of range."
  },
  {
    "name": "InterruptedError",
    "doc": "Interrupted by signal."
  },
  {
    "name": "IsADirectoryError",
    "doc": "Operation doesn't work on directories."
  },
  {
    "name": "KeyError",
    "doc": "Mapping key not found."
  },
  {
    "name": "KeyboardInterrupt",
    "doc": "Program interrupted by user."
  },
  {
    "name": "LookupError",
    "doc": "Base class for lookup errors."
  },
  {
    "name": "MemoryError",
    "doc": "Out of memory."
  },
  {
    "name": "ModuleNotFoundError",
    "doc": "Module not found."
  },
  {
    "name": "NameError",
    "doc": "Name not found globally."
  },
  {
    "name": "NotADirectoryError",
    "doc": "Operation only works on directories."
  },
  {
    "name": "NotImplementedError",
    "doc": "Method or function hasn't been implemented yet."
  },
  {
    "name": "OSError",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "OverflowError",
    "doc": "Result too large to be represented."
  },
  {
    "name": "PendingDeprecationWarning",
    "doc": "Base class for warnings about features which will be deprecated"
  },
  {
    "name": "PermissionError",
    "doc": "Not enough permissions."
  },
  {
    "name": "ProcessLookupError",
    "doc": "Process not found."
  },
  {
    "name": "RecursionError",
    "doc": "Recursion limit exceeded."
  },
  {
    "name": "ReferenceError",
    "doc": "Weak ref proxy used after referent went away."
  },
  {
    "name": "ResourceWarning",
    "doc": "Base class for warnings about resource usage."
  },
  {
    "name": "RuntimeError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "RuntimeWarning",
    "doc": "Base class for warnings about dubious runtime behavior."
  },
  {
    "name": "StopAsyncIteration",
    "doc": "Signal the end from iterator.__anext__()."
  },
  {
    "name": "StopIteration",
    "doc": "Signal the end from iterator.__next__()."
  },
  {
    "name": "SyntaxError",
    "doc": "Invalid syntax."
  },
  {
    "name": "SyntaxWarning",
    "doc": "Base class for warnings about dubious syntax."
  },
  {
    "name": "SystemError",
    "doc": "Internal error in the Python interpreter."
  },
  {
    "name": "SystemExit",
    "doc": "Request to exit from the interpreter."
  },
  {
    "name": "TabError",
    "doc": "Improper mixture of spaces and tabs."
  },
  {
    "name": "TimeoutError",
    "doc": "Timeout expired."
  },
  {
    "name": "TypeError",
    "doc": "Inappropriate argument type."
  },
  {
    "name": "UnboundLocalError",
    "doc": "Local name referenced but not bound to a value."
  },
  {
    "name": "UnicodeDecodeError",
    "doc": "Unicode decoding error."
  },
  {
    "name": "UnicodeEncodeError",
    "doc": "Unicode encoding error."
  },
  {
    "name": "UnicodeError",
    "doc": "Unicode related error."
  },
  {
    "name": "UnicodeTranslateError",
    "doc": "Unicode translation error."
  },
  {
    "name": "UnicodeWarning",
    "doc": "Base class for warnings about Unicode related problems, mostly"
  },
  {
    "name": "UserWarning",
    "doc": "Base class for warnings generated by user code."
  },
  {
    "name": "ValueError",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "Warning",
    "doc": "Base class for warning categories."
  },
  {
    "name": "ZeroDivisionError",
    "doc": "Second argument to a division or modulo operation was zero."
  },
  {
    "name": "abs",
    "doc": "Return the absolute value of the argument."
  },
  {
    "name": "aiter",
    "doc": "Return an AsyncIterator for an AsyncIterable object."
  },
  {
    "name": "all",
    "doc": "Return True if bool(x) is True for all values x in the iterable."
  },
  {
    "name": "anext",
    "doc": "async anext(aiterator[, default])"
  },
  {
    "name": "any",
    "doc": "Return True if bool(x) is True for any x in the iterable."
  },
  {
    "name": "ascii",
    "doc": "Return an ASCII-only representation of an object."
  },
  {
    "name": "bin",
    "doc": "Return the binary representation of an integer."
  },
  {
    "name": "bool",
    "doc": "bool(x) -> bool"
  },
  {
    "name": "breakpoint",
    "doc": "breakpoint(*args, **kws)"
  },
  {
    "name": "bytearray",
    "doc": "bytearray(iterable_of_ints) -> bytearray"
  },
  {
    "name": "bytes",
    "doc": "bytes(iterable_of_ints) -> bytes"
  },
  {
    "name": "callable",
    "doc": "Return whether the object is callable (i.e., some kind of function)."
  },
  {
    "name": "chr",
    "doc": "Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff."
  },
  {
    "name": "classmethod",
    "doc": "classmethod(function) -> method"
  },
  {
    "name": "compile",
    "doc": "Compile source into a code object that can be executed by exec() or eval()."
  },
  {
    "name": "complex",
    "doc": "Create a complex number from a real part and an optional imaginary part."
  },
  {
    "name": "copyright",
    "doc": "interactive prompt objects for printing the license text, a list of"
  },
  {
    "name": "credits",
    "doc": "interactive prompt objects for printing the license text, a list of"
  },
  {
    "name": "delattr",
    "doc": "Deletes the named attribute from the given object."
  },
  {
    "name": "dict",
    "doc": "dict() -> new empty dictionary"
  },
  {
    "name": "dir",
    "doc": "dir([object]) -> list of strings"
  },
  {
    "name": "divmod",
    "doc": "Return the tuple (x//y, x%y).  Invariant: div*y + mod == x."
  },
  {
    "name": "enumerate",
    "doc": "Return an enumerate object."
  },
  {
    "name": "eval",
    "doc": "Evaluate the given source in the context of globals and locals."
  },
  {
    "name": "exec",
    "doc": "Execute the given source in the context of globals and locals."
  },
  {
    "name": "exit",
    "doc": ""
  },
  {
    "name": "filter",
    "doc": "filter(function or None, iterable) --> filter object"
  },
  {
    "name": "float",
    "doc": "Convert a string or number to a floating point number, if possible."
  },
  {
    "name": "format",
    "doc": "Return value.__format__(format_spec)"
  },
  {
    "name": "frozenset",
    "doc": "frozenset() -> empty frozenset object"
  },
  {
    "name": "getattr",
    "doc": "getattr(object, name[, default]) -> value"
  },
  {
    "name": "globals",
    "doc": "Return the dictionary containing the current scope's global variables."
  },
  {
    "name": "hasattr",
    "doc": "Return whether the object has an attribute with the given name."
  },
  {
    "name": "hash",
    "doc": "Return the hash value for the given object."
  },
  {
    "name": "help",
    "doc": "Define the builtin 'help'."
  },
  {
    "name": "hex",
    "doc": "Return the hexadecimal representation of an integer."
  },
  {
    "name": "id",
    "doc": "Return the identity of an object."
  },
  {
    "name": "input",
    "doc": "Read a string from standard input.  The trailing newline is stripped."
  },
  {
    "name": "int",
    "doc": "int([x]) -> integer"
  },
  {
    "name": "isinstance",
    "doc": "Return whether an object is an instance of a class or of a subclass thereof."
  },
  {
    "name": "issubclass",
    "doc": "Return whether 'cls' is derived from another class or is the same class."
  },
  {
    "name": "iter",
    "doc": "iter(iterable) -> iterator"
  },
  {
    "name": "len",
    "doc": "Return the number of items in a container."
  },
  {
    "name": "license",
    "doc": "interactive prompt objects for printing the license text, a list of"
  },
  {
    "name": "list",
    "doc": "Built-in mutable sequence."
  },
  {
    "name": "locals",
    "doc": "Return a dictionary containing the current scope's local variables."
  },
  {
    "name": "map",
    "doc": "map(func, *iterables) --> map object"
  },
  {
    "name": "max",
    "doc": "max(iterable, *[, default=obj, key=func]) -> value"
  },
  {
    "name": "memoryview",
    "doc": "Create a new memoryview object which references the given object."
  },
  {
    "name": "min",
    "doc": "min(iterable, *[, default=obj, key=func]) -> value"
  },
  {
    "name": "next",
    "doc": "next(iterator[, default])"
  },
  {
    "name": "object",
    "doc": "The base class of the class hierarchy."
  },
  {
    "name": "oct",
    "doc": "Return the octal representation of an integer."
  },
  {
    "name": "open",
    "doc": "Open file and return a stream.  Raise OSError upon failure."
  },
  {
    "name": "ord",
    "doc": "Return the Unicode code point for a one-character string."
  },
  {
    "name": "pow",
    "doc": "Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments"
  },
  {
    "name": "print",
    "doc": "Prints the values to a stream, or to sys.stdout by default."
  },
  {
    "name": "property",
    "doc": "Property attribute."
  },
  {
    "name": "quit",
    "doc": ""
  },
  {
    "name": "range",
    "doc": "range(stop) -> range object"
  },
  {
    "name": "repr",
    "doc": "Return the canonical string representation of the object."
  },
  {
    "name": "reversed",
    "doc": "Return a reverse iterator over the values of the given sequence."
  },
  {
    "name": "round",
    "doc": "Round a number to a given precision in decimal digits."
  },
  {
    "name": "set",
    "doc": "set() -> new empty set object"
  },
  {
    "name": "setattr",
    "doc": "Sets the named attribute on the given object to the specified value."
  },
  {
    "name": "slice",
    "doc": "slice(stop)"
  },
  {
    "name": "sorted",
    "doc": "Return a new list containing all items from the iterable in ascending order."
  },
  {
    "name": "staticmethod",
    "doc": "staticmethod(function) -> method"
  },
  {
    "name": "str",
    "doc": "str(object='') -> str"
  },
  {
    "name": "sum",
    "doc": "Return the sum of a 'start' value (default: 0) plus an iterable of numbers"
  },
  {
    "name": "super",
    "doc": "super() -> same as super(__class__, <first argument>)"
  },
  {
    "name": "tuple",
    "doc": "Built-in immutable sequence."
  },
  {
    "name": "type",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "vars",
    "doc": "vars([object]) -> dictionary"
  },
  {
    "name": "zip",
    "doc": "zip(*iterables, strict=False) --> Yield tuples until an input is exhausted."
  },
  {
    "name": "append",
    "doc": "Append a single item to the end of the bytearray."
  },
  {
    "name": "capitalize",
    "doc": "B.capitalize() -> copy of B"
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "clear",
    "doc": "Remove all items from the bytearray."
  },
  {
    "name": "copy",
    "doc": "Return a copy of B."
  },
  {
    "name": "count",
    "doc": "B.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "decode",
    "doc": "Decode the bytearray using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "B.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "extend",
    "doc": "Append all the items from the iterator or sequence to the end of the bytearray."
  },
  {
    "name": "find",
    "doc": "B.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "fromhex",
    "doc": "Create a bytearray object from a string of hexadecimal numbers."
  },
  {
    "name": "hex",
    "doc": "Create a string of hexadecimal numbers from a bytearray object."
  },
  {
    "name": "index",
    "doc": "B.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "insert",
    "doc": "Insert a single item into the bytearray before the given index."
  },
  {
    "name": "isalnum",
    "doc": "B.isalnum() -> bool"
  },
  {
    "name": "isalpha",
    "doc": "B.isalpha() -> bool"
  },
  {
    "name": "isascii",
    "doc": "B.isascii() -> bool"
  },
  {
    "name": "isdigit",
    "doc": "B.isdigit() -> bool"
  },
  {
    "name": "islower",
    "doc": "B.islower() -> bool"
  },
  {
    "name": "isspace",
    "doc": "B.isspace() -> bool"
  },
  {
    "name": "istitle",
    "doc": "B.istitle() -> bool"
  },
  {
    "name": "isupper",
    "doc": "B.isupper() -> bool"
  },
  {
    "name": "join",
    "doc": "Concatenate any number of bytes/bytearray objects."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "B.lower() -> copy of B"
  },
  {
    "name": "lstrip",
    "doc": "Strip leading bytes contained in the argument."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table useable for the bytes or bytearray translate method."
  },
  {
    "name": "partition",
    "doc": "Partition the bytearray into three parts using the given separator."
  },
  {
    "name": "pop",
    "doc": "Remove and return a single item from B."
  },
  {
    "name": "remove",
    "doc": "Remove the first occurrence of a value in the bytearray."
  },
  {
    "name": "removeprefix",
    "doc": "Return a bytearray with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a bytearray with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "reverse",
    "doc": "Reverse the order of the values in B in place."
  },
  {
    "name": "rfind",
    "doc": "B.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "B.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the bytearray into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the sections in the bytearray, using sep as the delimiter."
  },
  {
    "name": "rstrip",
    "doc": "Strip trailing bytes contained in the argument."
  },
  {
    "name": "split",
    "doc": "Return a list of the sections in the bytearray, using sep as the delimiter."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the bytearray, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "B.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Strip leading and trailing bytes contained in the argument."
  },
  {
    "name": "swapcase",
    "doc": "B.swapcase() -> copy of B"
  },
  {
    "name": "title",
    "doc": "B.title() -> copy of B"
  },
  {
    "name": "translate",
    "doc": "Return a copy with each character mapped by the given translation table."
  },
  {
    "name": "upper",
    "doc": "B.upper() -> copy of B"
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "capitalize",
    "doc": "B.capitalize() -> copy of B"
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "count",
    "doc": "B.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "decode",
    "doc": "Decode the bytes using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "B.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "find",
    "doc": "B.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "fromhex",
    "doc": "Create a bytes object from a string of hexadecimal numbers."
  },
  {
    "name": "hex",
    "doc": "Create a string of hexadecimal numbers from a bytes object."
  },
  {
    "name": "index",
    "doc": "B.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "isalnum",
    "doc": "B.isalnum() -> bool"
  },
  {
    "name": "isalpha",
    "doc": "B.isalpha() -> bool"
  },
  {
    "name": "isascii",
    "doc": "B.isascii() -> bool"
  },
  {
    "name": "isdigit",
    "doc": "B.isdigit() -> bool"
  },
  {
    "name": "islower",
    "doc": "B.islower() -> bool"
  },
  {
    "name": "isspace",
    "doc": "B.isspace() -> bool"
  },
  {
    "name": "istitle",
    "doc": "B.istitle() -> bool"
  },
  {
    "name": "isupper",
    "doc": "B.isupper() -> bool"
  },
  {
    "name": "join",
    "doc": "Concatenate any number of bytes objects."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "B.lower() -> copy of B"
  },
  {
    "name": "lstrip",
    "doc": "Strip leading bytes contained in the argument."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table useable for the bytes or bytearray translate method."
  },
  {
    "name": "partition",
    "doc": "Partition the bytes into three parts using the given separator."
  },
  {
    "name": "removeprefix",
    "doc": "Return a bytes object with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a bytes object with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "rfind",
    "doc": "B.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "B.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the bytes into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the sections in the bytes, using sep as the delimiter."
  },
  {
    "name": "rstrip",
    "doc": "Strip trailing bytes contained in the argument."
  },
  {
    "name": "split",
    "doc": "Return a list of the sections in the bytes, using sep as the delimiter."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the bytes, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "B.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Strip leading and trailing bytes contained in the argument."
  },
  {
    "name": "swapcase",
    "doc": "B.swapcase() -> copy of B"
  },
  {
    "name": "title",
    "doc": "B.title() -> copy of B"
  },
  {
    "name": "translate",
    "doc": "Return a copy with each character mapped by the given translation table."
  },
  {
    "name": "upper",
    "doc": "B.upper() -> copy of B"
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "clear",
    "doc": "Clear maps[0], leaving maps[1:] intact."
  },
  {
    "name": "copy",
    "doc": "New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]"
  },
  {
    "name": "fromkeys",
    "doc": "Create a ChainMap with a single dict created from the iterable."
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "new_child",
    "doc": "New ChainMap with a new map followed by all previous maps."
  },
  {
    "name": "pop",
    "doc": "Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0]."
  },
  {
    "name": "popitem",
    "doc": "Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty."
  },
  {
    "name": "setdefault",
    "doc": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D"
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "_keep_positive",
    "doc": "Internal method to strip elements with a negative or zero count"
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": "Return a shallow copy."
  },
  {
    "name": "elements",
    "doc": "Iterator over elements repeating each as many times as its count."
  },
  {
    "name": "fromkeys",
    "doc": "Create a new dictionary with keys from iterable and values set to value."
  },
  {
    "name": "get",
    "doc": "Return the value for key if key is in the dictionary, else default."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "most_common",
    "doc": "List the n most common elements and their counts from the most"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "Remove and return a (key, value) pair as a 2-tuple."
  },
  {
    "name": "setdefault",
    "doc": "Insert key with a value of default if key is not in the dictionary."
  },
  {
    "name": "subtract",
    "doc": "Like dict.update() but subtracts counts instead of replacing them."
  },
  {
    "name": "total",
    "doc": "Sum of the counts"
  },
  {
    "name": "update",
    "doc": "Like dict.update() but add counts instead of replacing them."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "clear",
    "doc": "od.clear() -> None.  Remove all items from od."
  },
  {
    "name": "copy",
    "doc": "od.copy() -> a shallow copy of od"
  },
  {
    "name": "fromkeys",
    "doc": "Create a new ordered dictionary with keys from iterable and values set to value."
  },
  {
    "name": "get",
    "doc": "Return the value for key if key is in the dictionary, else default."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "move_to_end",
    "doc": "Move an existing element to the end (or beginning if last is false)."
  },
  {
    "name": "pop",
    "doc": "od.pop(key[,default]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "Remove and return a (key, value) pair from the dictionary."
  },
  {
    "name": "setdefault",
    "doc": "Insert key with a value of default if key is not in the dictionary."
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": ""
  },
  {
    "name": "fromkeys",
    "doc": ""
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "D.popitem() -> (k, v), remove and return some (key, value) pair"
  },
  {
    "name": "setdefault",
    "doc": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D"
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "_UserList__cast",
    "doc": ""
  },
  {
    "name": "append",
    "doc": "S.append(value) -- append value to the end of the sequence"
  },
  {
    "name": "clear",
    "doc": "S.clear() -> None -- remove all items from S"
  },
  {
    "name": "copy",
    "doc": ""
  },
  {
    "name": "count",
    "doc": "S.count(value) -> integer -- return number of occurrences of value"
  },
  {
    "name": "extend",
    "doc": "S.extend(iterable) -- extend sequence by appending elements from the iterable"
  },
  {
    "name": "index",
    "doc": "S.index(value, [start, [stop]]) -> integer -- return first index of value."
  },
  {
    "name": "insert",
    "doc": "S.insert(index, value) -- insert value before index"
  },
  {
    "name": "pop",
    "doc": "S.pop([index]) -> item -- remove and return item at index (default last)."
  },
  {
    "name": "remove",
    "doc": "S.remove(value) -- remove first occurrence of value."
  },
  {
    "name": "reverse",
    "doc": "S.reverse() -- reverse *IN PLACE*"
  },
  {
    "name": "sort",
    "doc": ""
  },
  {
    "name": "capitalize",
    "doc": ""
  },
  {
    "name": "casefold",
    "doc": ""
  },
  {
    "name": "center",
    "doc": ""
  },
  {
    "name": "count",
    "doc": "S.count(value) -> integer -- return number of occurrences of value"
  },
  {
    "name": "encode",
    "doc": ""
  },
  {
    "name": "endswith",
    "doc": ""
  },
  {
    "name": "expandtabs",
    "doc": ""
  },
  {
    "name": "find",
    "doc": ""
  },
  {
    "name": "format",
    "doc": ""
  },
  {
    "name": "format_map",
    "doc": ""
  },
  {
    "name": "index",
    "doc": "S.index(value, [start, [stop]]) -> integer -- return first index of value."
  },
  {
    "name": "isalnum",
    "doc": ""
  },
  {
    "name": "isalpha",
    "doc": ""
  },
  {
    "name": "isascii",
    "doc": ""
  },
  {
    "name": "isdecimal",
    "doc": ""
  },
  {
    "name": "isdigit",
    "doc": ""
  },
  {
    "name": "isidentifier",
    "doc": ""
  },
  {
    "name": "islower",
    "doc": ""
  },
  {
    "name": "isnumeric",
    "doc": ""
  },
  {
    "name": "isprintable",
    "doc": ""
  },
  {
    "name": "isspace",
    "doc": ""
  },
  {
    "name": "istitle",
    "doc": ""
  },
  {
    "name": "isupper",
    "doc": ""
  },
  {
    "name": "join",
    "doc": ""
  },
  {
    "name": "ljust",
    "doc": ""
  },
  {
    "name": "lower",
    "doc": ""
  },
  {
    "name": "lstrip",
    "doc": ""
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table usable for str.translate()."
  },
  {
    "name": "partition",
    "doc": ""
  },
  {
    "name": "removeprefix",
    "doc": ""
  },
  {
    "name": "removesuffix",
    "doc": ""
  },
  {
    "name": "replace",
    "doc": ""
  },
  {
    "name": "rfind",
    "doc": ""
  },
  {
    "name": "rindex",
    "doc": ""
  },
  {
    "name": "rjust",
    "doc": ""
  },
  {
    "name": "rpartition",
    "doc": ""
  },
  {
    "name": "rsplit",
    "doc": ""
  },
  {
    "name": "rstrip",
    "doc": ""
  },
  {
    "name": "split",
    "doc": ""
  },
  {
    "name": "splitlines",
    "doc": ""
  },
  {
    "name": "startswith",
    "doc": ""
  },
  {
    "name": "strip",
    "doc": ""
  },
  {
    "name": "swapcase",
    "doc": ""
  },
  {
    "name": "title",
    "doc": ""
  },
  {
    "name": "translate",
    "doc": ""
  },
  {
    "name": "upper",
    "doc": ""
  },
  {
    "name": "zfill",
    "doc": ""
  },
  {
    "name": "_from_iterable",
    "doc": "Construct an instance of the class from any iterable input."
  },
  {
    "name": "_hash",
    "doc": "Compute the hash value of a set."
  },
  {
    "name": "isdisjoint",
    "doc": "Return True if two sets have a null intersection."
  },
  {
    "name": "_from_iterable",
    "doc": "Construct an instance of the class from any iterable input."
  },
  {
    "name": "_hash",
    "doc": "Compute the hash value of a set."
  },
  {
    "name": "isdisjoint",
    "doc": "Return True if two sets have a null intersection."
  },
  {
    "name": "from_iterable",
    "doc": "Alternative chain() constructor taking a single iterable argument that evaluates lazily."
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": "D.copy() -> a shallow copy of D."
  },
  {
    "name": "fromkeys",
    "doc": "Create a new dictionary with keys from iterable and values set to value."
  },
  {
    "name": "get",
    "doc": "Return the value for key if key is in the dictionary, else default."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "Remove and return a (key, value) pair as a 2-tuple."
  },
  {
    "name": "setdefault",
    "doc": "Insert key with a value of default if key is not in the dictionary."
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "append",
    "doc": "Add an element to the right side of the deque."
  },
  {
    "name": "appendleft",
    "doc": "Add an element to the left side of the deque."
  },
  {
    "name": "clear",
    "doc": "Remove all elements from the deque."
  },
  {
    "name": "copy",
    "doc": "Return a shallow copy of a deque."
  },
  {
    "name": "count",
    "doc": "D.count(value) -- return number of occurrences of value"
  },
  {
    "name": "extend",
    "doc": "Extend the right side of the deque with elements from the iterable"
  },
  {
    "name": "extendleft",
    "doc": "Extend the left side of the deque with elements from the iterable"
  },
  {
    "name": "index",
    "doc": "D.index(value, [start, [stop]]) -- return first index of value."
  },
  {
    "name": "insert",
    "doc": "D.insert(index, object) -- insert object before index"
  },
  {
    "name": "pop",
    "doc": "Remove and return the rightmost element."
  },
  {
    "name": "popleft",
    "doc": "Remove and return the leftmost element."
  },
  {
    "name": "remove",
    "doc": "D.remove(value) -- remove first occurrence of value."
  },
  {
    "name": "reverse",
    "doc": "D.reverse() -- reverse *IN PLACE*"
  },
  {
    "name": "rotate",
    "doc": "Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left."
  },
  {
    "name": "conjugate",
    "doc": "Return the complex conjugate of its argument. (3-4j).conjugate() == 3+4j."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "ctime",
    "doc": "Return ctime() style string."
  },
  {
    "name": "fromisocalendar",
    "doc": "int, int, int -> Construct a date from the ISO year, week number and weekday."
  },
  {
    "name": "fromisoformat",
    "doc": "str -> Construct a date from a string in ISO 8601 format."
  },
  {
    "name": "fromordinal",
    "doc": "int -> date corresponding to a proleptic Gregorian ordinal."
  },
  {
    "name": "fromtimestamp",
    "doc": "Create a date from a POSIX timestamp."
  },
  {
    "name": "isocalendar",
    "doc": "Return a named tuple containing ISO year, week number, and weekday."
  },
  {
    "name": "isoformat",
    "doc": "Return string in ISO 8601 format, YYYY-MM-DD."
  },
  {
    "name": "isoweekday",
    "doc": "Return the day of the week represented by the date."
  },
  {
    "name": "replace",
    "doc": "Return date with new specified fields."
  },
  {
    "name": "strftime",
    "doc": "format -> strftime() style string."
  },
  {
    "name": "timetuple",
    "doc": "Return time tuple, compatible with time.localtime()."
  },
  {
    "name": "today",
    "doc": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time())."
  },
  {
    "name": "toordinal",
    "doc": "Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1."
  },
  {
    "name": "weekday",
    "doc": "Return the day of the week represented by the date."
  },
  {
    "name": "astimezone",
    "doc": "tz -> convert to local time in new timezone tz"
  },
  {
    "name": "combine",
    "doc": "date, time -> datetime with same date and time fields"
  },
  {
    "name": "ctime",
    "doc": "Return ctime() style string."
  },
  {
    "name": "date",
    "doc": "Return date object with same year, month and day."
  },
  {
    "name": "dst",
    "doc": "Return self.tzinfo.dst(self)."
  },
  {
    "name": "fromisocalendar",
    "doc": "int, int, int -> Construct a date from the ISO year, week number and weekday."
  },
  {
    "name": "fromisoformat",
    "doc": "string -> datetime from a string in most ISO 8601 formats"
  },
  {
    "name": "fromordinal",
    "doc": "int -> date corresponding to a proleptic Gregorian ordinal."
  },
  {
    "name": "fromtimestamp",
    "doc": "timestamp[, tz] -> tz's local time from POSIX timestamp."
  },
  {
    "name": "isocalendar",
    "doc": "Return a named tuple containing ISO year, week number, and weekday."
  },
  {
    "name": "isoformat",
    "doc": "[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM]."
  },
  {
    "name": "isoweekday",
    "doc": "Return the day of the week represented by the date."
  },
  {
    "name": "now",
    "doc": "Returns new datetime object representing current time local to tz."
  },
  {
    "name": "replace",
    "doc": "Return datetime with new specified fields."
  },
  {
    "name": "strftime",
    "doc": "format -> strftime() style string."
  },
  {
    "name": "strptime",
    "doc": "string, format -> new datetime parsed from a string (like time.strptime())."
  },
  {
    "name": "time",
    "doc": "Return time object with same time but with tzinfo=None."
  },
  {
    "name": "timestamp",
    "doc": "Return POSIX timestamp as float."
  },
  {
    "name": "timetuple",
    "doc": "Return time tuple, compatible with time.localtime()."
  },
  {
    "name": "timetz",
    "doc": "Return time object with same time and tzinfo."
  },
  {
    "name": "today",
    "doc": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time())."
  },
  {
    "name": "toordinal",
    "doc": "Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1."
  },
  {
    "name": "tzname",
    "doc": "Return self.tzinfo.tzname(self)."
  },
  {
    "name": "utcfromtimestamp",
    "doc": "Construct a naive UTC datetime from a POSIX timestamp."
  },
  {
    "name": "utcnow",
    "doc": "Return a new datetime representing UTC day and time."
  },
  {
    "name": "utcoffset",
    "doc": "Return self.tzinfo.utcoffset(self)."
  },
  {
    "name": "utctimetuple",
    "doc": "Return UTC time tuple, compatible with time.localtime()."
  },
  {
    "name": "weekday",
    "doc": "Return the day of the week represented by the date."
  },
  {
    "name": "dst",
    "doc": "Return self.tzinfo.dst(self)."
  },
  {
    "name": "fromisoformat",
    "doc": "string -> time from a string in ISO 8601 format"
  },
  {
    "name": "isoformat",
    "doc": "Return string in ISO 8601 format, [HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM]."
  },
  {
    "name": "replace",
    "doc": "Return time with new specified fields."
  },
  {
    "name": "strftime",
    "doc": "format -> strftime() style string."
  },
  {
    "name": "tzname",
    "doc": "Return self.tzinfo.tzname(self)."
  },
  {
    "name": "utcoffset",
    "doc": "Return self.tzinfo.utcoffset(self)."
  },
  {
    "name": "total_seconds",
    "doc": "Total seconds in the duration."
  },
  {
    "name": "dst",
    "doc": "Return None."
  },
  {
    "name": "fromutc",
    "doc": "datetime in UTC -> datetime in local time."
  },
  {
    "name": "tzname",
    "doc": "If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'."
  },
  {
    "name": "utcoffset",
    "doc": "Return fixed offset."
  },
  {
    "name": "dst",
    "doc": "datetime -> DST offset as timedelta positive east of UTC."
  },
  {
    "name": "fromutc",
    "doc": "datetime in UTC -> datetime in local time."
  },
  {
    "name": "tzname",
    "doc": "datetime -> string name of time zone."
  },
  {
    "name": "utcoffset",
    "doc": "datetime -> timedelta showing offset from UTC, negative values indicating West of UTC"
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": "D.copy() -> a shallow copy of D"
  },
  {
    "name": "fromkeys",
    "doc": "Create a new dictionary with keys from iterable and values set to value."
  },
  {
    "name": "get",
    "doc": "Return the value for key if key is in the dictionary, else default."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "Remove and return a (key, value) pair as a 2-tuple."
  },
  {
    "name": "setdefault",
    "doc": "Insert key with a value of default if key is not in the dictionary."
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "deleter",
    "doc": ""
  },
  {
    "name": "getter",
    "doc": ""
  },
  {
    "name": "setter",
    "doc": ""
  },
  {
    "name": "capitalize",
    "doc": "Return a capitalized version of the string."
  },
  {
    "name": "casefold",
    "doc": "Return a version of the string suitable for caseless comparisons."
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "count",
    "doc": "S.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "encode",
    "doc": "Encode the string using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "S.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "find",
    "doc": "S.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "format",
    "doc": "S.format(*args, **kwargs) -> str"
  },
  {
    "name": "format_map",
    "doc": "S.format_map(mapping) -> str"
  },
  {
    "name": "index",
    "doc": "S.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "isalnum",
    "doc": "Return True if the string is an alpha-numeric string, False otherwise."
  },
  {
    "name": "isalpha",
    "doc": "Return True if the string is an alphabetic string, False otherwise."
  },
  {
    "name": "isascii",
    "doc": "Return True if all characters in the string are ASCII, False otherwise."
  },
  {
    "name": "isdecimal",
    "doc": "Return True if the string is a decimal string, False otherwise."
  },
  {
    "name": "isdigit",
    "doc": "Return True if the string is a digit string, False otherwise."
  },
  {
    "name": "isidentifier",
    "doc": "Return True if the string is a valid Python identifier, False otherwise."
  },
  {
    "name": "islower",
    "doc": "Return True if the string is a lowercase string, False otherwise."
  },
  {
    "name": "isnumeric",
    "doc": "Return True if the string is a numeric string, False otherwise."
  },
  {
    "name": "isprintable",
    "doc": "Return True if the string is printable, False otherwise."
  },
  {
    "name": "isspace",
    "doc": "Return True if the string is a whitespace string, False otherwise."
  },
  {
    "name": "istitle",
    "doc": "Return True if the string is a title-cased string, False otherwise."
  },
  {
    "name": "isupper",
    "doc": "Return True if the string is an uppercase string, False otherwise."
  },
  {
    "name": "join",
    "doc": "Concatenate any number of strings."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "Return a copy of the string converted to lowercase."
  },
  {
    "name": "lstrip",
    "doc": "Return a copy of the string with leading whitespace removed."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table usable for str.translate()."
  },
  {
    "name": "partition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "removeprefix",
    "doc": "Return a str with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a str with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "rfind",
    "doc": "S.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "S.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "rstrip",
    "doc": "Return a copy of the string with trailing whitespace removed."
  },
  {
    "name": "split",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the string, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "S.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Return a copy of the string with leading and trailing whitespace removed."
  },
  {
    "name": "swapcase",
    "doc": "Convert uppercase characters to lowercase and lowercase characters to uppercase."
  },
  {
    "name": "title",
    "doc": "Return a version of the string where each word is titlecased."
  },
  {
    "name": "translate",
    "doc": "Replace each character in the string using the given translation table."
  },
  {
    "name": "upper",
    "doc": "Return a copy of the string converted to uppercase."
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "_check_for_existing_members_",
    "doc": ""
  },
  {
    "name": "_convert_",
    "doc": "Create a new Enum subclass that replaces a collection of global constants"
  },
  {
    "name": "_create_",
    "doc": "Convenience method to create a new Enum class."
  },
  {
    "name": "_find_data_repr_",
    "doc": ""
  },
  {
    "name": "_find_data_type_",
    "doc": ""
  },
  {
    "name": "_find_new_",
    "doc": "Returns the __new__ to be used for creating the enum members."
  },
  {
    "name": "_get_mixins_",
    "doc": "Returns the type for creating enum members, and the first inherited"
  },
  {
    "name": "mro",
    "doc": "Return a type's method resolution order."
  },
  {
    "name": "_check_for_existing_members_",
    "doc": ""
  },
  {
    "name": "_convert_",
    "doc": "Create a new Enum subclass that replaces a collection of global constants"
  },
  {
    "name": "_create_",
    "doc": "Convenience method to create a new Enum class."
  },
  {
    "name": "_find_data_repr_",
    "doc": ""
  },
  {
    "name": "_find_data_type_",
    "doc": ""
  },
  {
    "name": "_find_new_",
    "doc": "Returns the __new__ to be used for creating the enum members."
  },
  {
    "name": "_get_mixins_",
    "doc": "Returns the type for creating enum members, and the first inherited"
  },
  {
    "name": "mro",
    "doc": "Return a type's method resolution order."
  },
  {
    "name": "capitalize",
    "doc": "Return a capitalized version of the string."
  },
  {
    "name": "casefold",
    "doc": "Return a version of the string suitable for caseless comparisons."
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "count",
    "doc": "S.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "encode",
    "doc": "Encode the string using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "S.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "find",
    "doc": "S.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "format",
    "doc": "S.format(*args, **kwargs) -> str"
  },
  {
    "name": "format_map",
    "doc": "S.format_map(mapping) -> str"
  },
  {
    "name": "index",
    "doc": "S.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "isalnum",
    "doc": "Return True if the string is an alpha-numeric string, False otherwise."
  },
  {
    "name": "isalpha",
    "doc": "Return True if the string is an alphabetic string, False otherwise."
  },
  {
    "name": "isascii",
    "doc": "Return True if all characters in the string are ASCII, False otherwise."
  },
  {
    "name": "isdecimal",
    "doc": "Return True if the string is a decimal string, False otherwise."
  },
  {
    "name": "isdigit",
    "doc": "Return True if the string is a digit string, False otherwise."
  },
  {
    "name": "isidentifier",
    "doc": "Return True if the string is a valid Python identifier, False otherwise."
  },
  {
    "name": "islower",
    "doc": "Return True if the string is a lowercase string, False otherwise."
  },
  {
    "name": "isnumeric",
    "doc": "Return True if the string is a numeric string, False otherwise."
  },
  {
    "name": "isprintable",
    "doc": "Return True if the string is printable, False otherwise."
  },
  {
    "name": "isspace",
    "doc": "Return True if the string is a whitespace string, False otherwise."
  },
  {
    "name": "istitle",
    "doc": "Return True if the string is a title-cased string, False otherwise."
  },
  {
    "name": "isupper",
    "doc": "Return True if the string is an uppercase string, False otherwise."
  },
  {
    "name": "join",
    "doc": "Concatenate any number of strings."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "Return a copy of the string converted to lowercase."
  },
  {
    "name": "lstrip",
    "doc": "Return a copy of the string with leading whitespace removed."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table usable for str.translate()."
  },
  {
    "name": "partition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "removeprefix",
    "doc": "Return a str with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a str with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "rfind",
    "doc": "S.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "S.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "rstrip",
    "doc": "Return a copy of the string with trailing whitespace removed."
  },
  {
    "name": "split",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the string, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "S.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Return a copy of the string with leading and trailing whitespace removed."
  },
  {
    "name": "swapcase",
    "doc": "Convert uppercase characters to lowercase and lowercase characters to uppercase."
  },
  {
    "name": "title",
    "doc": "Return a version of the string where each word is titlecased."
  },
  {
    "name": "translate",
    "doc": "Replace each character in the string using the given translation table."
  },
  {
    "name": "upper",
    "doc": "Return a copy of the string converted to uppercase."
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "as_integer_ratio",
    "doc": "Return integer ratio."
  },
  {
    "name": "bit_count",
    "doc": "Number of ones in the binary representation of the absolute value of self."
  },
  {
    "name": "bit_length",
    "doc": "Number of bits necessary to represent self in binary."
  },
  {
    "name": "conjugate",
    "doc": "Returns self, the complex conjugate of any int."
  },
  {
    "name": "from_bytes",
    "doc": "Return the integer represented by the given array of bytes."
  },
  {
    "name": "to_bytes",
    "doc": "Return an array of bytes representing an integer."
  },
  {
    "name": "as_integer_ratio",
    "doc": "Return integer ratio."
  },
  {
    "name": "bit_count",
    "doc": "Number of ones in the binary representation of the absolute value of self."
  },
  {
    "name": "bit_length",
    "doc": "Number of bits necessary to represent self in binary."
  },
  {
    "name": "conjugate",
    "doc": "Returns self, the complex conjugate of any int."
  },
  {
    "name": "from_bytes",
    "doc": "Return the integer represented by the given array of bytes."
  },
  {
    "name": "to_bytes",
    "doc": "Return an array of bytes representing an integer."
  },
  {
    "name": "copy",
    "doc": "D.copy() -> a shallow copy of D"
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "capitalize",
    "doc": "Return a capitalized version of the string."
  },
  {
    "name": "casefold",
    "doc": "Return a version of the string suitable for caseless comparisons."
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "count",
    "doc": "S.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "encode",
    "doc": "Encode the string using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "S.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "find",
    "doc": "S.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "format",
    "doc": "S.format(*args, **kwargs) -> str"
  },
  {
    "name": "format_map",
    "doc": "S.format_map(mapping) -> str"
  },
  {
    "name": "index",
    "doc": "S.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "isalnum",
    "doc": "Return True if the string is an alpha-numeric string, False otherwise."
  },
  {
    "name": "isalpha",
    "doc": "Return True if the string is an alphabetic string, False otherwise."
  },
  {
    "name": "isascii",
    "doc": "Return True if all characters in the string are ASCII, False otherwise."
  },
  {
    "name": "isdecimal",
    "doc": "Return True if the string is a decimal string, False otherwise."
  },
  {
    "name": "isdigit",
    "doc": "Return True if the string is a digit string, False otherwise."
  },
  {
    "name": "isidentifier",
    "doc": "Return True if the string is a valid Python identifier, False otherwise."
  },
  {
    "name": "islower",
    "doc": "Return True if the string is a lowercase string, False otherwise."
  },
  {
    "name": "isnumeric",
    "doc": "Return True if the string is a numeric string, False otherwise."
  },
  {
    "name": "isprintable",
    "doc": "Return True if the string is printable, False otherwise."
  },
  {
    "name": "isspace",
    "doc": "Return True if the string is a whitespace string, False otherwise."
  },
  {
    "name": "istitle",
    "doc": "Return True if the string is a title-cased string, False otherwise."
  },
  {
    "name": "isupper",
    "doc": "Return True if the string is an uppercase string, False otherwise."
  },
  {
    "name": "join",
    "doc": "Concatenate any number of strings."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "Return a copy of the string converted to lowercase."
  },
  {
    "name": "lstrip",
    "doc": "Return a copy of the string with leading whitespace removed."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table usable for str.translate()."
  },
  {
    "name": "partition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "removeprefix",
    "doc": "Return a str with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a str with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "rfind",
    "doc": "S.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "S.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "rstrip",
    "doc": "Return a copy of the string with trailing whitespace removed."
  },
  {
    "name": "split",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the string, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "S.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Return a copy of the string with leading and trailing whitespace removed."
  },
  {
    "name": "swapcase",
    "doc": "Convert uppercase characters to lowercase and lowercase characters to uppercase."
  },
  {
    "name": "title",
    "doc": "Return a version of the string where each word is titlecased."
  },
  {
    "name": "translate",
    "doc": "Replace each character in the string using the given translation table."
  },
  {
    "name": "upper",
    "doc": "Return a copy of the string converted to uppercase."
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": "D.copy() -> a shallow copy of D"
  },
  {
    "name": "fromkeys",
    "doc": "Create a new dictionary with keys from iterable and values set to value."
  },
  {
    "name": "get",
    "doc": "Return the value for key if key is in the dictionary, else default."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "Remove and return a (key, value) pair as a 2-tuple."
  },
  {
    "name": "setdefault",
    "doc": "Insert key with a value of default if key is not in the dictionary."
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "deleter",
    "doc": ""
  },
  {
    "name": "getter",
    "doc": ""
  },
  {
    "name": "setter",
    "doc": ""
  },
  {
    "name": "as_integer_ratio",
    "doc": "Return integer ratio."
  },
  {
    "name": "conjugate",
    "doc": "Return self, the complex conjugate of any float."
  },
  {
    "name": "fromhex",
    "doc": "Create a floating-point number from a hexadecimal string."
  },
  {
    "name": "hex",
    "doc": "Return a hexadecimal representation of a floating-point number."
  },
  {
    "name": "is_integer",
    "doc": "Return True if the float is an integer."
  },
  {
    "name": "_acquire_restore",
    "doc": "_acquire_restore(state) -> None"
  },
  {
    "name": "_at_fork_reinit",
    "doc": ""
  },
  {
    "name": "_is_owned",
    "doc": "_is_owned() -> bool"
  },
  {
    "name": "_release_save",
    "doc": "_release_save() -> tuple"
  },
  {
    "name": "acquire",
    "doc": "acquire(blocking=True) -> bool"
  },
  {
    "name": "release",
    "doc": "release()"
  },
  {
    "name": "_asdict",
    "doc": "Return a new dict which maps field names to their values."
  },
  {
    "name": "_make",
    "doc": "Make a new CacheInfo object from a sequence or iterable"
  },
  {
    "name": "_replace",
    "doc": "Return a new CacheInfo object replacing specified fields with new values"
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "append",
    "doc": "Append object to the end of the list."
  },
  {
    "name": "clear",
    "doc": "Remove all items from list."
  },
  {
    "name": "copy",
    "doc": "Return a shallow copy of the list."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "extend",
    "doc": "Extend list by appending elements from the iterable."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "insert",
    "doc": "Insert object before index."
  },
  {
    "name": "pop",
    "doc": "Remove and return item at index (default last)."
  },
  {
    "name": "remove",
    "doc": "Remove first occurrence of value."
  },
  {
    "name": "reverse",
    "doc": "Reverse *IN PLACE*."
  },
  {
    "name": "sort",
    "doc": "Sort the list in ascending order and return None."
  },
  {
    "name": "cache_clear",
    "doc": ""
  },
  {
    "name": "cache_info",
    "doc": ""
  },
  {
    "name": "_make_unbound_method",
    "doc": ""
  },
  {
    "name": "register",
    "doc": "generic_method.register(cls, func) -> func"
  },
  {
    "name": "as_integer_ratio",
    "doc": "Return integer ratio."
  },
  {
    "name": "bit_count",
    "doc": "Number of ones in the binary representation of the absolute value of self."
  },
  {
    "name": "bit_length",
    "doc": "Number of bits necessary to represent self in binary."
  },
  {
    "name": "conjugate",
    "doc": "Returns self, the complex conjugate of any int."
  },
  {
    "name": "from_bytes",
    "doc": "Return the integer represented by the given array of bytes."
  },
  {
    "name": "to_bytes",
    "doc": "Return an array of bytes representing an integer."
  },
  {
    "name": "create_module",
    "doc": "Create a built-in module"
  },
  {
    "name": "exec_module",
    "doc": "Exec a built-in module"
  },
  {
    "name": "find_module",
    "doc": "Find the built-in module."
  },
  {
    "name": "find_spec",
    "doc": ""
  },
  {
    "name": "get_code",
    "doc": "Return None as built-in modules do not have code objects."
  },
  {
    "name": "get_source",
    "doc": "Return None as built-in modules do not have source code."
  },
  {
    "name": "is_package",
    "doc": "Return False as built-in modules are never packages."
  },
  {
    "name": "load_module",
    "doc": "Load the specified module into sys.modules and return it."
  },
  {
    "name": "module_repr",
    "doc": "Return repr for the module."
  },
  {
    "name": "from_iterable",
    "doc": "Alternative chain() constructor taking a single iterable argument that evaluates lazily."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "decode",
    "doc": "Return the Python representation of ``s`` (a ``str`` instance"
  },
  {
    "name": "raw_decode",
    "doc": "Decode a JSON document from ``s`` (a ``str`` beginning with"
  },
  {
    "name": "default",
    "doc": "Implement this method in a subclass such that it returns"
  },
  {
    "name": "encode",
    "doc": "Return a JSON string representation of a Python data structure."
  },
  {
    "name": "iterencode",
    "doc": "Encode the given object and yield each string"
  },
  {
    "name": "append",
    "doc": "Append object to the end of the list."
  },
  {
    "name": "clear",
    "doc": "Remove all items from list."
  },
  {
    "name": "copy",
    "doc": "Return a shallow copy of the list."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "extend",
    "doc": "Extend list by appending elements from the iterable."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "insert",
    "doc": "Insert object before index."
  },
  {
    "name": "pop",
    "doc": "Remove and return item at index (default last)."
  },
  {
    "name": "remove",
    "doc": "Remove first occurrence of value."
  },
  {
    "name": "reverse",
    "doc": "Reverse *IN PLACE*."
  },
  {
    "name": "sort",
    "doc": "Sort the list in ascending order and return None."
  },
  {
    "name": "cast",
    "doc": "Cast a memoryview to a new format or shape."
  },
  {
    "name": "hex",
    "doc": "Return the data in the buffer as a str of hexadecimal numbers."
  },
  {
    "name": "release",
    "doc": "Release the underlying buffer exposed by the memoryview object."
  },
  {
    "name": "tobytes",
    "doc": "Return the data in the buffer as a byte string."
  },
  {
    "name": "tolist",
    "doc": "Return the data in the buffer as a list of elements."
  },
  {
    "name": "toreadonly",
    "doc": "Return a readonly version of the memoryview."
  },
  {
    "name": "AbstractChildWatcher",
    "doc": "Abstract base class for monitoring child processes."
  },
  {
    "name": "AbstractEventLoop",
    "doc": "Abstract event loop."
  },
  {
    "name": "AbstractEventLoopPolicy",
    "doc": "Abstract policy for accessing the event loop."
  },
  {
    "name": "AbstractServer",
    "doc": "Abstract server returned by create_server()."
  },
  {
    "name": "Barrier",
    "doc": "Asyncio equivalent to threading.Barrier"
  },
  {
    "name": "BaseEventLoop",
    "doc": "Abstract event loop."
  },
  {
    "name": "BaseProtocol",
    "doc": "Common base class for protocol interfaces."
  },
  {
    "name": "BaseTransport",
    "doc": "Base class for transports."
  },
  {
    "name": "BoundedSemaphore",
    "doc": "A bounded semaphore implementation."
  },
  {
    "name": "BrokenBarrierError",
    "doc": "Barrier is broken by barrier.abort() call."
  },
  {
    "name": "BufferedProtocol",
    "doc": "Interface for stream protocol with manual buffer control."
  },
  {
    "name": "CancelledError",
    "doc": "The Future or Task was cancelled."
  },
  {
    "name": "Condition",
    "doc": "Asynchronous equivalent to threading.Condition."
  },
  {
    "name": "DatagramProtocol",
    "doc": "Interface for datagram protocol."
  },
  {
    "name": "DatagramTransport",
    "doc": "Interface for datagram (UDP) transports."
  },
  {
    "name": "DefaultEventLoopPolicy",
    "doc": "UNIX event loop policy with a watcher for child processes."
  },
  {
    "name": "Event",
    "doc": "Asynchronous equivalent to threading.Event."
  },
  {
    "name": "FastChildWatcher",
    "doc": "'Fast' child watcher implementation."
  },
  {
    "name": "Future",
    "doc": "This class is *almost* compatible with concurrent.futures.Future."
  },
  {
    "name": "Handle",
    "doc": "Object returned by callback registration methods."
  },
  {
    "name": "IncompleteReadError",
    "doc": "Incomplete read error. Attributes:"
  },
  {
    "name": "InvalidStateError",
    "doc": "The operation is not allowed in this state."
  },
  {
    "name": "LifoQueue",
    "doc": "A subclass of Queue that retrieves most recently added entries first."
  },
  {
    "name": "LimitOverrunError",
    "doc": "Reached the buffer limit while looking for a separator."
  },
  {
    "name": "Lock",
    "doc": "Primitive lock objects."
  },
  {
    "name": "MultiLoopChildWatcher",
    "doc": "A watcher that doesn't require running loop in the main thread."
  },
  {
    "name": "PidfdChildWatcher",
    "doc": "Child watcher implementation using Linux's pid file descriptors."
  },
  {
    "name": "PriorityQueue",
    "doc": "A subclass of Queue; retrieves entries in priority order (lowest first)."
  },
  {
    "name": "Protocol",
    "doc": "Interface for stream protocol."
  },
  {
    "name": "Queue",
    "doc": "A queue, useful for coordinating producer and consumer coroutines."
  },
  {
    "name": "QueueEmpty",
    "doc": "Raised when Queue.get_nowait() is called on an empty Queue."
  },
  {
    "name": "QueueFull",
    "doc": "Raised when the Queue.put_nowait() method is called on a full Queue."
  },
  {
    "name": "ReadTransport",
    "doc": "Interface for read-only transports."
  },
  {
    "name": "Runner",
    "doc": "A context manager that controls event loop life cycle."
  },
  {
    "name": "SafeChildWatcher",
    "doc": "'Safe' child watcher implementation."
  },
  {
    "name": "SelectorEventLoop",
    "doc": "Unix event loop."
  },
  {
    "name": "Semaphore",
    "doc": "A Semaphore implementation."
  },
  {
    "name": "SendfileNotAvailableError",
    "doc": "Sendfile syscall is not available."
  },
  {
    "name": "Server",
    "doc": "Abstract server returned by create_server()."
  },
  {
    "name": "StreamReader",
    "doc": ""
  },
  {
    "name": "StreamReaderProtocol",
    "doc": "Helper class to adapt between Protocol and StreamReader."
  },
  {
    "name": "StreamWriter",
    "doc": "Wraps a Transport."
  },
  {
    "name": "SubprocessProtocol",
    "doc": "Interface for protocol for subprocess calls."
  },
  {
    "name": "SubprocessTransport",
    "doc": "Base class for transports."
  },
  {
    "name": "Task",
    "doc": "A coroutine wrapped in a Future."
  },
  {
    "name": "TaskGroup",
    "doc": "Asynchronous context manager for managing groups of tasks."
  },
  {
    "name": "ThreadedChildWatcher",
    "doc": "Threaded child watcher implementation."
  },
  {
    "name": "Timeout",
    "doc": "Asynchronous context manager for cancelling overdue coroutines."
  },
  {
    "name": "TimeoutError",
    "doc": "Timeout expired."
  },
  {
    "name": "TimerHandle",
    "doc": "Object returned by timed callback registration methods."
  },
  {
    "name": "Transport",
    "doc": "Interface representing a bidirectional transport."
  },
  {
    "name": "WriteTransport",
    "doc": "Interface for write-only transports."
  },
  {
    "name": "_enter_task",
    "doc": "Enter into task execution or resume suspended task."
  },
  {
    "name": "_get_running_loop",
    "doc": "Return the running event loop or None."
  },
  {
    "name": "_leave_task",
    "doc": "Leave task execution or suspend a task."
  },
  {
    "name": "_register_task",
    "doc": "Register a new task in asyncio as executed by loop."
  },
  {
    "name": "_set_running_loop",
    "doc": "Set the running event loop."
  },
  {
    "name": "_unregister_task",
    "doc": "Unregister a task."
  },
  {
    "name": "all_tasks",
    "doc": "Return a set of all tasks for the loop."
  },
  {
    "name": "as_completed",
    "doc": "Return an iterator whose values are coroutines."
  },
  {
    "name": "create_subprocess_exec",
    "doc": ""
  },
  {
    "name": "create_subprocess_shell",
    "doc": ""
  },
  {
    "name": "create_task",
    "doc": "Schedule the execution of a coroutine object in a spawn task."
  },
  {
    "name": "current_task",
    "doc": "Return a currently executed task."
  },
  {
    "name": "ensure_future",
    "doc": "Wrap a coroutine or an awaitable in a future."
  },
  {
    "name": "gather",
    "doc": "Return a future aggregating results from the given coroutines/futures."
  },
  {
    "name": "get_child_watcher",
    "doc": "Equivalent to calling get_event_loop_policy().get_child_watcher()."
  },
  {
    "name": "get_event_loop",
    "doc": "Return an asyncio event loop."
  },
  {
    "name": "get_event_loop_policy",
    "doc": "Get the current event loop policy."
  },
  {
    "name": "get_running_loop",
    "doc": "Return the running event loop.  Raise a RuntimeError if there is none."
  },
  {
    "name": "iscoroutine",
    "doc": "Return True if obj is a coroutine object."
  },
  {
    "name": "iscoroutinefunction",
    "doc": "Return True if func is a decorated coroutine function."
  },
  {
    "name": "isfuture",
    "doc": "Check for a Future."
  },
  {
    "name": "new_event_loop",
    "doc": "Equivalent to calling get_event_loop_policy().new_event_loop()."
  },
  {
    "name": "open_connection",
    "doc": "A wrapper for create_connection() returning a (reader, writer) pair."
  },
  {
    "name": "open_unix_connection",
    "doc": "Similar to `open_connection` but works with UNIX Domain Sockets."
  },
  {
    "name": "run",
    "doc": "Execute the coroutine and return the result."
  },
  {
    "name": "run_coroutine_threadsafe",
    "doc": "Submit a coroutine object to a given event loop."
  },
  {
    "name": "set_child_watcher",
    "doc": "Equivalent to calling"
  },
  {
    "name": "set_event_loop",
    "doc": "Equivalent to calling get_event_loop_policy().set_event_loop(loop)."
  },
  {
    "name": "set_event_loop_policy",
    "doc": "Set the current event loop policy."
  },
  {
    "name": "shield",
    "doc": "Wait for a future, shielding it from cancellation."
  },
  {
    "name": "sleep",
    "doc": "Coroutine that completes after a given time (in seconds)."
  },
  {
    "name": "start_server",
    "doc": "Start a socket server, call back for each client connected."
  },
  {
    "name": "start_unix_server",
    "doc": "Similar to `start_server` but works with UNIX Domain Sockets."
  },
  {
    "name": "timeout",
    "doc": "Timeout async context manager."
  },
  {
    "name": "timeout_at",
    "doc": "Schedule the timeout at absolute time."
  },
  {
    "name": "to_thread",
    "doc": "Asynchronously run function *func* in a separate thread."
  },
  {
    "name": "wait",
    "doc": "Wait for the Futures or Tasks given by fs to complete."
  },
  {
    "name": "wait_for",
    "doc": "Wait for the single Future or coroutine to complete, with timeout."
  },
  {
    "name": "wrap_future",
    "doc": "Wrap concurrent.futures.Future object."
  },
  {
    "name": "bisect",
    "doc": "Return the index where to insert item x in list a, assuming a is sorted."
  },
  {
    "name": "bisect_left",
    "doc": "Return the index where to insert item x in list a, assuming a is sorted."
  },
  {
    "name": "bisect_right",
    "doc": "Return the index where to insert item x in list a, assuming a is sorted."
  },
  {
    "name": "insort",
    "doc": "Insert item x in list a, and keep it sorted assuming a is sorted."
  },
  {
    "name": "insort_left",
    "doc": "Insert item x in list a, and keep it sorted assuming a is sorted."
  },
  {
    "name": "insort_right",
    "doc": "Insert item x in list a, and keep it sorted assuming a is sorted."
  },
  {
    "name": "ASTSafetyError",
    "doc": "Raised when Black's generated code is not equivalent to the old AST."
  },
  {
    "name": "Any",
    "doc": "Special type indicating an unconstrained type."
  },
  {
    "name": "Cache",
    "doc": "Cache(mode: black.mode.Mode, cache_file: pathlib.Path, file_data: dict[str, black.cache.FileData] = <factory>)"
  },
  {
    "name": "Changed",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "Collection",
    "doc": ""
  },
  {
    "name": "EmptyLineTracker",
    "doc": "Provides a stateful method that returns the number of potential extra"
  },
  {
    "name": "Encoding",
    "doc": "str(object='') -> str"
  },
  {
    "name": "Enum",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "Feature",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "FileContent",
    "doc": "str(object='') -> str"
  },
  {
    "name": "FileMode",
    "doc": "Mode(target_versions: set[black.mode.TargetVersion] = <factory>, line_length: int = 88, string_normalization: bool = True, is_pyi: bool = False, is_ipynb: bool = False, skip_source_first_line: bool = False, magic_trailing_comma: bool = True, python_cell_magics: set[str] = <factory>, preview: bool = False, unstable: bool = False, enabled_features: set[black.mode.Preview] = <factory>)"
  },
  {
    "name": "Generator",
    "doc": ""
  },
  {
    "name": "GitWildMatchPatternError",
    "doc": "The :class:`GitWildMatchPatternError` indicates an invalid git wild match"
  },
  {
    "name": "InvalidInput",
    "doc": "Raised when input source code fails all parse attempts."
  },
  {
    "name": "Iterator",
    "doc": ""
  },
  {
    "name": "JSONDecodeError",
    "doc": "Subclass of ValueError with the following additional properties:"
  },
  {
    "name": "LN",
    "doc": ""
  },
  {
    "name": "Leaf",
    "doc": "Concrete implementation for leaf nodes."
  },
  {
    "name": "LineGenerator",
    "doc": "Generates reformatted Line objects.  Empty lines are not emitted."
  },
  {
    "name": "LinesBlock",
    "doc": "Class that holds information about a block of formatted lines."
  },
  {
    "name": "Mode",
    "doc": "Mode(target_versions: set[black.mode.TargetVersion] = <factory>, line_length: int = 88, string_normalization: bool = True, is_pyi: bool = False, is_ipynb: bool = False, skip_source_first_line: bool = False, magic_trailing_comma: bool = True, python_cell_magics: set[str] = <factory>, preview: bool = False, unstable: bool = False, enabled_features: set[black.mode.Preview] = <factory>)"
  },
  {
    "name": "MutableMapping",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "NewLine",
    "doc": "str(object='') -> str"
  },
  {
    "name": "Node",
    "doc": "Concrete implementation for interior nodes."
  },
  {
    "name": "NothingChanged",
    "doc": "Raised when reformatted code is the same as source."
  },
  {
    "name": "Optional",
    "doc": "Optional[X] is equivalent to Union[X, None]."
  },
  {
    "name": "ParameterSource",
    "doc": "This is an :class:`~enum.Enum` that indicates the source of a"
  },
  {
    "name": "Path",
    "doc": "PurePath subclass that can make system calls."
  },
  {
    "name": "PathSpec",
    "doc": "The :class:`PathSpec` class is a wrapper around a list of compiled"
  },
  {
    "name": "Pattern",
    "doc": "Compiled regular expression object."
  },
  {
    "name": "Preview",
    "doc": "Individual preview style features."
  },
  {
    "name": "Report",
    "doc": "Provides a reformatting counter. Can be rendered with `str(report)`."
  },
  {
    "name": "Sequence",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "Sized",
    "doc": ""
  },
  {
    "name": "TargetVersion",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "Union",
    "doc": "Union type; Union[X, Y] means either X or Y."
  },
  {
    "name": "WriteBack",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "_black_info",
    "doc": ""
  },
  {
    "name": "_contains_asexpr",
    "doc": "Return True if `node` contains an as-pattern."
  },
  {
    "name": "_format_str_once",
    "doc": ""
  },
  {
    "name": "adjusted_lines",
    "doc": "Returns the adjusted line ranges based on edits from the original code."
  },
  {
    "name": "assert_equivalent",
    "doc": "Raise AssertionError if `src` and `dst` aren't equivalent."
  },
  {
    "name": "assert_stable",
    "doc": "Raise AssertionError if `dst` reformats differently the second time."
  },
  {
    "name": "best_effort_relative_path",
    "doc": ""
  },
  {
    "name": "check_stability_and_equivalence",
    "doc": "Perform stability and equivalence checks."
  },
  {
    "name": "color_diff",
    "doc": "Inject the ANSI color codes to the diff."
  },
  {
    "name": "contextmanager",
    "doc": "@contextmanager decorator."
  },
  {
    "name": "convert_unchanged_lines",
    "doc": "Converts unchanged lines to STANDALONE_COMMENT."
  },
  {
    "name": "datetime",
    "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])"
  },
  {
    "name": "decode_bytes",
    "doc": "Return a tuple of (decoded_contents, encoding, newline)."
  },
  {
    "name": "detect_target_versions",
    "doc": "Detect the version to target based on the nodes used."
  },
  {
    "name": "diff",
    "doc": "Return a unified diff string between strings `a` and `b`."
  },
  {
    "name": "dump_to_file",
    "doc": "Dump `output` to a temporary file. Return path to the file."
  },
  {
    "name": "enable_unstable_feature_callback",
    "doc": "Compute the features from an --enable-unstable-feature flag."
  },
  {
    "name": "err",
    "doc": ""
  },
  {
    "name": "find_project_root",
    "doc": "Return a directory containing .git, .hg, or pyproject.toml."
  },
  {
    "name": "find_pyproject_toml",
    "doc": "Find the absolute filepath to a pyproject.toml if it exists"
  },
  {
    "name": "find_user_pyproject_toml",
    "doc": "Return the path to the top-level user configuration for black."
  },
  {
    "name": "format_cell",
    "doc": "Format code in given cell of Jupyter notebook."
  },
  {
    "name": "format_file_contents",
    "doc": "Reformat contents of a file and return new contents."
  },
  {
    "name": "format_file_in_place",
    "doc": "Format file under `src` path. Return True if changed."
  },
  {
    "name": "format_ipynb_string",
    "doc": "Format Jupyter notebook."
  },
  {
    "name": "format_stdin_to_stdout",
    "doc": "Format file on stdin. Return True if changed."
  },
  {
    "name": "format_str",
    "doc": "Reformat a string and return new contents."
  },
  {
    "name": "gen_python_files",
    "doc": "Generate all files under `path` whose paths are not excluded by the"
  },
  {
    "name": "get_features_used",
    "doc": "Return a set of (relatively) new Python features used in this file."
  },
  {
    "name": "get_future_imports",
    "doc": "Return a set of __future__ imports in the file."
  },
  {
    "name": "get_gitignore",
    "doc": "Return a PathSpec matching gitignore content if present."
  },
  {
    "name": "get_sources",
    "doc": "Compute the set of files to be formatted."
  },
  {
    "name": "ipynb_diff",
    "doc": "Return a unified diff string between each cell in notebooks `a` and `b`."
  },
  {
    "name": "is_number_token",
    "doc": ""
  },
  {
    "name": "is_simple_decorator_expression",
    "doc": "Return True iff `node` could be a 'dotted name' decorator"
  },
  {
    "name": "jupyter_dependencies_are_installed",
    "doc": ""
  },
  {
    "name": "lib2to3_parse",
    "doc": "Given a string with source, return the lib2to3 Node."
  },
  {
    "name": "main",
    "doc": "The uncompromising code formatter."
  },
  {
    "name": "mask_cell",
    "doc": "Mask IPython magics so content becomes parseable Python code."
  },
  {
    "name": "mypyc_attr",
    "doc": ""
  },
  {
    "name": "normalize_fmt_off",
    "doc": "Convert content between `# fmt: off`/`# fmt: on` into standalone comments."
  },
  {
    "name": "nullcontext",
    "doc": "Return an empty context manager."
  },
  {
    "name": "out",
    "doc": ""
  },
  {
    "name": "parse_ast",
    "doc": ""
  },
  {
    "name": "parse_line_ranges",
    "doc": ""
  },
  {
    "name": "parse_pyproject_toml",
    "doc": "Parse a pyproject toml file, pulling out relevant parts for Black."
  },
  {
    "name": "patched_main",
    "doc": ""
  },
  {
    "name": "path_empty",
    "doc": "Exit if there is no `src` provided for formatting"
  },
  {
    "name": "path_is_excluded",
    "doc": ""
  },
  {
    "name": "put_trailing_semicolon_back",
    "doc": "Put trailing semicolon back if cell originally had it."
  },
  {
    "name": "re_compile_maybe_verbose",
    "doc": "Compile a regular expression string in `regex`."
  },
  {
    "name": "read_pyproject_toml",
    "doc": "Inject Black configuration from \"pyproject.toml\" into defaults in `ctx`."
  },
  {
    "name": "reformat_code",
    "doc": "Reformat and print out `content` without spawning child processes."
  },
  {
    "name": "reformat_one",
    "doc": "Reformat a single file under `src` without spawning child processes."
  },
  {
    "name": "remove_trailing_semicolon",
    "doc": "Remove trailing semicolon from Jupyter notebook cell."
  },
  {
    "name": "replace",
    "doc": "Return a new object replacing specified fields with new values."
  },
  {
    "name": "resolves_outside_root_or_cannot_stat",
    "doc": "Returns whether the path is a symbolic link that points outside the"
  },
  {
    "name": "sanitized_lines",
    "doc": "Returns the valid line ranges for the given source."
  },
  {
    "name": "spellcheck_pyproject_toml_keys",
    "doc": ""
  },
  {
    "name": "stringify_ast",
    "doc": "Simple visitor generating strings to compare ASTs by content."
  },
  {
    "name": "supports_feature",
    "doc": ""
  },
  {
    "name": "target_version_option_callback",
    "doc": "Compute the target versions from a --target-version flag."
  },
  {
    "name": "timezone",
    "doc": "Fixed offset from UTC implementation of tzinfo."
  },
  {
    "name": "transform_line",
    "doc": "Transform a `line`, potentially splitting it into many lines."
  },
  {
    "name": "unmask_cell",
    "doc": "Remove replacements from cell."
  },
  {
    "name": "validate_cell",
    "doc": "Check that cell does not already contain TransformerManager transformations,"
  },
  {
    "name": "validate_metadata",
    "doc": "If notebook is marked as non-Python, don't format it."
  },
  {
    "name": "validate_regex",
    "doc": ""
  },
  {
    "name": "wrap_stream_for_windows",
    "doc": "Wrap stream with colorama's wrap_stream so colors are shown on Windows."
  },
  {
    "name": "ChainMap",
    "doc": "A ChainMap groups multiple dicts (or other mappings) together"
  },
  {
    "name": "Counter",
    "doc": "Dict subclass for counting hashable items.  Sometimes called a bag"
  },
  {
    "name": "OrderedDict",
    "doc": "Dictionary that remembers insertion order"
  },
  {
    "name": "UserDict",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "UserList",
    "doc": "A more or less complete user-defined wrapper around list objects."
  },
  {
    "name": "UserString",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "_Link",
    "doc": ""
  },
  {
    "name": "_OrderedDictItemsView",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "_OrderedDictKeysView",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "_OrderedDictValuesView",
    "doc": ""
  },
  {
    "name": "_chain",
    "doc": "chain(*iterables) --> chain object"
  },
  {
    "name": "_count_elements",
    "doc": "Count elements in the iterable, updating the mapping"
  },
  {
    "name": "_eq",
    "doc": "Same as a == b."
  },
  {
    "name": "_iskeyword",
    "doc": "x.__contains__(y) <==> y in x."
  },
  {
    "name": "_itemgetter",
    "doc": "itemgetter(item, ...) --> itemgetter object"
  },
  {
    "name": "_proxy",
    "doc": "Create a proxy object that weakly references 'object'."
  },
  {
    "name": "_recursive_repr",
    "doc": "Decorator to make a repr function return fillvalue for a recursive call"
  },
  {
    "name": "_repeat",
    "doc": "repeat(object [,times]) -> create an iterator which returns the object"
  },
  {
    "name": "_starmap",
    "doc": "Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence."
  },
  {
    "name": "_tuplegetter",
    "doc": ""
  },
  {
    "name": "defaultdict",
    "doc": "defaultdict(default_factory=None, /, [...]) --> dict with default factory"
  },
  {
    "name": "deque",
    "doc": "deque([iterable[, maxlen]]) --> deque object"
  },
  {
    "name": "namedtuple",
    "doc": "Returns a new subclass of tuple with named fields."
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "_copy_immutable",
    "doc": ""
  },
  {
    "name": "_deepcopy_atomic",
    "doc": ""
  },
  {
    "name": "_deepcopy_dict",
    "doc": ""
  },
  {
    "name": "_deepcopy_list",
    "doc": ""
  },
  {
    "name": "_deepcopy_method",
    "doc": ""
  },
  {
    "name": "_deepcopy_tuple",
    "doc": ""
  },
  {
    "name": "_keep_alive",
    "doc": "Keeps a reference to the object x in the memo."
  },
  {
    "name": "_reconstruct",
    "doc": ""
  },
  {
    "name": "copy",
    "doc": "Shallow copy operation on arbitrary Python objects."
  },
  {
    "name": "deepcopy",
    "doc": "Deep copy operation on arbitrary Python objects."
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "date",
    "doc": "date(year, month, day) --> date object"
  },
  {
    "name": "datetime",
    "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])"
  },
  {
    "name": "time",
    "doc": "time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object"
  },
  {
    "name": "timedelta",
    "doc": "Difference between two datetime values."
  },
  {
    "name": "timezone",
    "doc": "Fixed offset from UTC implementation of tzinfo."
  },
  {
    "name": "tzinfo",
    "doc": "Abstract base class for time zone info objects."
  },
  {
    "name": "DynamicClassAttribute",
    "doc": "Route attribute access on a class to __getattr__."
  },
  {
    "name": "Enum",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "EnumCheck",
    "doc": "various conditions to check an enumeration for"
  },
  {
    "name": "EnumMeta",
    "doc": "Metaclass for Enum"
  },
  {
    "name": "EnumType",
    "doc": "Metaclass for Enum"
  },
  {
    "name": "Flag",
    "doc": "Support for flags"
  },
  {
    "name": "FlagBoundary",
    "doc": "control how out of range values are handled"
  },
  {
    "name": "IntEnum",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "IntFlag",
    "doc": "Support for integer-based Flags"
  },
  {
    "name": "MappingProxyType",
    "doc": ""
  },
  {
    "name": "ReprEnum",
    "doc": "Only changes the repr(), leaving str() and format() to the mixed-in type."
  },
  {
    "name": "StrEnum",
    "doc": "Enum where members are also (and must be) strings"
  },
  {
    "name": "_EnumDict",
    "doc": "Track enum member order and ensure member names are not reused."
  },
  {
    "name": "_dedent",
    "doc": "Like textwrap.dedent.  Rewritten because we cannot import textwrap."
  },
  {
    "name": "_high_bit",
    "doc": "returns index of highest bit, or -1 if value is zero or negative"
  },
  {
    "name": "_is_descriptor",
    "doc": "Returns True if obj is a descriptor, False otherwise."
  },
  {
    "name": "_is_dunder",
    "doc": "Returns True if a __dunder__ name, False otherwise."
  },
  {
    "name": "_is_internal_class",
    "doc": ""
  },
  {
    "name": "_is_private",
    "doc": ""
  },
  {
    "name": "_is_single_bit",
    "doc": "True if only one bit set in num (should be an int)"
  },
  {
    "name": "_is_sunder",
    "doc": "Returns True if a _sunder_ name, False otherwise."
  },
  {
    "name": "_iter_bits_lsb",
    "doc": ""
  },
  {
    "name": "_make_class_unpicklable",
    "doc": "Make the given obj un-picklable."
  },
  {
    "name": "_old_convert_",
    "doc": "Create a new Enum subclass that replaces a collection of global constants"
  },
  {
    "name": "_or_",
    "doc": "Same as a | b."
  },
  {
    "name": "_power_of_two",
    "doc": ""
  },
  {
    "name": "_proto_member",
    "doc": "intermediate step for enum members between class execution and final creation"
  },
  {
    "name": "_reduce_ex_by_global_name",
    "doc": ""
  },
  {
    "name": "_simple_enum",
    "doc": "Class decorator that converts a normal class into an :class:`Enum`.  No"
  },
  {
    "name": "_test_simple_enum",
    "doc": "A function that can be used to test an enum created with :func:`_simple_enum`"
  },
  {
    "name": "auto",
    "doc": "Instances are replaced with an appropriate value in Enum class suites."
  },
  {
    "name": "bin",
    "doc": "Like built-in bin(), except negative values are represented in"
  },
  {
    "name": "global_enum",
    "doc": "decorator that makes the repr() of an enum member reference its module"
  },
  {
    "name": "global_enum_repr",
    "doc": "use module.enum_name instead of class.enum_name"
  },
  {
    "name": "global_flag_repr",
    "doc": "use module.flag_name instead of class.flag_name"
  },
  {
    "name": "global_str",
    "doc": "use enum_name instead of class.enum_name"
  },
  {
    "name": "member",
    "doc": "Forces item to become an Enum member during class creation."
  },
  {
    "name": "nonmember",
    "doc": "Protects item from becoming an Enum member during class creation."
  },
  {
    "name": "pickle_by_enum_name",
    "doc": ""
  },
  {
    "name": "pickle_by_global_name",
    "doc": ""
  },
  {
    "name": "property",
    "doc": "This is a descriptor, used to define attributes that act differently"
  },
  {
    "name": "reduce",
    "doc": "reduce(function, iterable[, initial]) -> value"
  },
  {
    "name": "show_flag_values",
    "doc": ""
  },
  {
    "name": "unique",
    "doc": "Class decorator for enumerations ensuring unique member values."
  },
  {
    "name": "verify",
    "doc": "Check an enumeration for various constraints. (see EnumCheck)"
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "RLock",
    "doc": ""
  },
  {
    "name": "_CacheInfo",
    "doc": "CacheInfo(hits, misses, maxsize, currsize)"
  },
  {
    "name": "_HashedSeq",
    "doc": "This class guarantees that hash() will be called no more than once"
  },
  {
    "name": "_c3_merge",
    "doc": "Merges MROs in *sequences* to a single MRO using the C3 algorithm."
  },
  {
    "name": "_c3_mro",
    "doc": "Computes the method resolution order using extended C3 linearization."
  },
  {
    "name": "_compose_mro",
    "doc": "Calculates the method resolution order for a given class *cls*."
  },
  {
    "name": "_find_impl",
    "doc": "Returns the best matching implementation from *registry* for type *cls*."
  },
  {
    "name": "_ge_from_gt",
    "doc": "Return a >= b.  Computed by @total_ordering from (a > b) or (a == b)."
  },
  {
    "name": "_ge_from_le",
    "doc": "Return a >= b.  Computed by @total_ordering from (not a <= b) or (a == b)."
  },
  {
    "name": "_ge_from_lt",
    "doc": "Return a >= b.  Computed by @total_ordering from (not a < b)."
  },
  {
    "name": "_gt_from_ge",
    "doc": "Return a > b.  Computed by @total_ordering from (a >= b) and (a != b)."
  },
  {
    "name": "_gt_from_le",
    "doc": "Return a > b.  Computed by @total_ordering from (not a <= b)."
  },
  {
    "name": "_gt_from_lt",
    "doc": "Return a > b.  Computed by @total_ordering from (not a < b) and (a != b)."
  },
  {
    "name": "_le_from_ge",
    "doc": "Return a <= b.  Computed by @total_ordering from (not a >= b) or (a == b)."
  },
  {
    "name": "_le_from_gt",
    "doc": "Return a <= b.  Computed by @total_ordering from (not a > b)."
  },
  {
    "name": "_le_from_lt",
    "doc": "Return a <= b.  Computed by @total_ordering from (a < b) or (a == b)."
  },
  {
    "name": "_lru_cache_wrapper",
    "doc": "Create a cached callable that wraps another function."
  },
  {
    "name": "_lt_from_ge",
    "doc": "Return a < b.  Computed by @total_ordering from (not a >= b)."
  },
  {
    "name": "_lt_from_gt",
    "doc": "Return a < b.  Computed by @total_ordering from (not a > b) and (a != b)."
  },
  {
    "name": "_lt_from_le",
    "doc": "Return a < b.  Computed by @total_ordering from (a <= b) and (a != b)."
  },
  {
    "name": "_make_key",
    "doc": "Make a cache key from optionally typed positional and keyword arguments"
  },
  {
    "name": "_unwrap_partial",
    "doc": ""
  },
  {
    "name": "cache",
    "doc": "Simple lightweight unbounded cache.  Sometimes called \"memoize\"."
  },
  {
    "name": "cached_property",
    "doc": ""
  },
  {
    "name": "cmp_to_key",
    "doc": "Convert a cmp= function into a key= function."
  },
  {
    "name": "get_cache_token",
    "doc": "Returns the current ABC cache token."
  },
  {
    "name": "lru_cache",
    "doc": "Least-recently-used cache decorator."
  },
  {
    "name": "namedtuple",
    "doc": "Returns a new subclass of tuple with named fields."
  },
  {
    "name": "partial",
    "doc": "partial(func, *args, **keywords) - new function with partial application"
  },
  {
    "name": "partialmethod",
    "doc": "Method descriptor with partial application of the given arguments"
  },
  {
    "name": "recursive_repr",
    "doc": "Decorator to make a repr function return fillvalue for a recursive call"
  },
  {
    "name": "reduce",
    "doc": "reduce(function, iterable[, initial]) -> value"
  },
  {
    "name": "singledispatch",
    "doc": "Single-dispatch generic function decorator."
  },
  {
    "name": "singledispatchmethod",
    "doc": "Single-dispatch generic method descriptor."
  },
  {
    "name": "total_ordering",
    "doc": "Class decorator that fills in missing ordering methods"
  },
  {
    "name": "update_wrapper",
    "doc": "Update a wrapper function to look like the wrapped function"
  },
  {
    "name": "wraps",
    "doc": "Decorator factory to apply update_wrapper() to a wrapper function"
  },
  {
    "name": "_heapify_max",
    "doc": "Maxheap variant of heapify."
  },
  {
    "name": "_heappop_max",
    "doc": "Maxheap variant of heappop."
  },
  {
    "name": "_heapreplace_max",
    "doc": "Maxheap variant of heapreplace."
  },
  {
    "name": "_siftdown",
    "doc": ""
  },
  {
    "name": "_siftdown_max",
    "doc": "Maxheap variant of _siftdown"
  },
  {
    "name": "_siftup",
    "doc": ""
  },
  {
    "name": "_siftup_max",
    "doc": "Maxheap variant of _siftup"
  },
  {
    "name": "heapify",
    "doc": "Transform list into a heap, in-place, in O(len(heap)) time."
  },
  {
    "name": "heappop",
    "doc": "Pop the smallest item off the heap, maintaining the heap invariant."
  },
  {
    "name": "heappush",
    "doc": "Push item onto heap, maintaining the heap invariant."
  },
  {
    "name": "heappushpop",
    "doc": "Push item on the heap, then pop and return the smallest item from the heap."
  },
  {
    "name": "heapreplace",
    "doc": "Pop and return the current smallest value, and add the new item."
  },
  {
    "name": "merge",
    "doc": "Merge multiple sorted inputs into a single sorted output."
  },
  {
    "name": "nlargest",
    "doc": "Find the n largest elements in a dataset."
  },
  {
    "name": "nsmallest",
    "doc": "Find the n smallest elements in a dataset."
  },
  {
    "name": "_grouper",
    "doc": ""
  },
  {
    "name": "_tee",
    "doc": "Iterator wrapped to make it copyable."
  },
  {
    "name": "_tee_dataobject",
    "doc": "teedataobject(iterable, values, next, /)"
  },
  {
    "name": "accumulate",
    "doc": "Return series of accumulated sums (or other binary function results)."
  },
  {
    "name": "chain",
    "doc": "chain(*iterables) --> chain object"
  },
  {
    "name": "combinations",
    "doc": "Return successive r-length combinations of elements in the iterable."
  },
  {
    "name": "combinations_with_replacement",
    "doc": "Return successive r-length combinations of elements in the iterable allowing individual elements to have successive repeats."
  },
  {
    "name": "compress",
    "doc": "Return data elements corresponding to true selector elements."
  },
  {
    "name": "count",
    "doc": "Return a count object whose .__next__() method returns consecutive values."
  },
  {
    "name": "cycle",
    "doc": "Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely."
  },
  {
    "name": "dropwhile",
    "doc": "Drop items from the iterable while predicate(item) is true."
  },
  {
    "name": "filterfalse",
    "doc": "Return those items of iterable for which function(item) is false."
  },
  {
    "name": "groupby",
    "doc": "make an iterator that returns consecutive keys and groups from the iterable"
  },
  {
    "name": "islice",
    "doc": "islice(iterable, stop) --> islice object"
  },
  {
    "name": "pairwise",
    "doc": "Return an iterator of overlapping pairs taken from the input iterator."
  },
  {
    "name": "permutations",
    "doc": "Return successive r-length permutations of elements in the iterable."
  },
  {
    "name": "product",
    "doc": "product(*iterables, repeat=1) --> product object"
  },
  {
    "name": "repeat",
    "doc": "repeat(object [,times]) -> create an iterator which returns the object"
  },
  {
    "name": "starmap",
    "doc": "Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence."
  },
  {
    "name": "takewhile",
    "doc": "Return successive entries from an iterable as long as the predicate evaluates to true for each entry."
  },
  {
    "name": "tee",
    "doc": "Returns a tuple of n independent iterators."
  },
  {
    "name": "zip_longest",
    "doc": "zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object"
  },
  {
    "name": "JSONDecodeError",
    "doc": "Subclass of ValueError with the following additional properties:"
  },
  {
    "name": "JSONDecoder",
    "doc": "Simple JSON <https://json.org> decoder"
  },
  {
    "name": "JSONEncoder",
    "doc": "Extensible JSON <https://json.org> encoder for Python data structures."
  },
  {
    "name": "detect_encoding",
    "doc": ""
  },
  {
    "name": "dump",
    "doc": "Serialize ``obj`` as a JSON formatted stream to ``fp`` (a"
  },
  {
    "name": "dumps",
    "doc": "Serialize ``obj`` to a JSON formatted ``str``."
  },
  {
    "name": "load",
    "doc": "Deserialize ``fp`` (a ``.read()``-supporting file-like object containing"
  },
  {
    "name": "loads",
    "doc": "Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance"
  },
  {
    "name": "acos",
    "doc": "Return the arc cosine (measured in radians) of x."
  },
  {
    "name": "acosh",
    "doc": "Return the inverse hyperbolic cosine of x."
  },
  {
    "name": "asin",
    "doc": "Return the arc sine (measured in radians) of x."
  },
  {
    "name": "asinh",
    "doc": "Return the inverse hyperbolic sine of x."
  },
  {
    "name": "atan",
    "doc": "Return the arc tangent (measured in radians) of x."
  },
  {
    "name": "atan2",
    "doc": "Return the arc tangent (measured in radians) of y/x."
  },
  {
    "name": "atanh",
    "doc": "Return the inverse hyperbolic tangent of x."
  },
  {
    "name": "cbrt",
    "doc": "Return the cube root of x."
  },
  {
    "name": "ceil",
    "doc": "Return the ceiling of x as an Integral."
  },
  {
    "name": "comb",
    "doc": "Number of ways to choose k items from n items without repetition and without order."
  },
  {
    "name": "copysign",
    "doc": "Return a float with the magnitude (absolute value) of x but the sign of y."
  },
  {
    "name": "cos",
    "doc": "Return the cosine of x (measured in radians)."
  },
  {
    "name": "cosh",
    "doc": "Return the hyperbolic cosine of x."
  },
  {
    "name": "degrees",
    "doc": "Convert angle x from radians to degrees."
  },
  {
    "name": "dist",
    "doc": "Return the Euclidean distance between two points p and q."
  },
  {
    "name": "erf",
    "doc": "Error function at x."
  },
  {
    "name": "erfc",
    "doc": "Complementary error function at x."
  },
  {
    "name": "exp",
    "doc": "Return e raised to the power of x."
  },
  {
    "name": "exp2",
    "doc": "Return 2 raised to the power of x."
  },
  {
    "name": "expm1",
    "doc": "Return exp(x)-1."
  },
  {
    "name": "fabs",
    "doc": "Return the absolute value of the float x."
  },
  {
    "name": "factorial",
    "doc": "Find n!."
  },
  {
    "name": "floor",
    "doc": "Return the floor of x as an Integral."
  },
  {
    "name": "fmod",
    "doc": "Return fmod(x, y), according to platform C."
  },
  {
    "name": "frexp",
    "doc": "Return the mantissa and exponent of x, as pair (m, e)."
  },
  {
    "name": "fsum",
    "doc": "Return an accurate floating point sum of values in the iterable seq."
  },
  {
    "name": "gamma",
    "doc": "Gamma function at x."
  },
  {
    "name": "gcd",
    "doc": "Greatest Common Divisor."
  },
  {
    "name": "hypot",
    "doc": "hypot(*coordinates) -> value"
  },
  {
    "name": "isclose",
    "doc": "Determine whether two floating point numbers are close in value."
  },
  {
    "name": "isfinite",
    "doc": "Return True if x is neither an infinity nor a NaN, and False otherwise."
  },
  {
    "name": "isinf",
    "doc": "Return True if x is a positive or negative infinity, and False otherwise."
  },
  {
    "name": "isnan",
    "doc": "Return True if x is a NaN (not a number), and False otherwise."
  },
  {
    "name": "isqrt",
    "doc": "Return the integer part of the square root of the input."
  },
  {
    "name": "lcm",
    "doc": "Least Common Multiple."
  },
  {
    "name": "ldexp",
    "doc": "Return x * (2**i)."
  },
  {
    "name": "lgamma",
    "doc": "Natural logarithm of absolute value of Gamma function at x."
  },
  {
    "name": "log",
    "doc": "log(x, [base=math.e])"
  },
  {
    "name": "log10",
    "doc": "Return the base 10 logarithm of x."
  },
  {
    "name": "log1p",
    "doc": "Return the natural logarithm of 1+x (base e)."
  },
  {
    "name": "log2",
    "doc": "Return the base 2 logarithm of x."
  },
  {
    "name": "modf",
    "doc": "Return the fractional and integer parts of x."
  },
  {
    "name": "nextafter",
    "doc": "Return the next floating-point value after x towards y."
  },
  {
    "name": "perm",
    "doc": "Number of ways to choose k items from n items without repetition and with order."
  },
  {
    "name": "pow",
    "doc": "Return x**y (x to the power of y)."
  },
  {
    "name": "prod",
    "doc": "Calculate the product of all the elements in the input iterable."
  },
  {
    "name": "radians",
    "doc": "Convert angle x from degrees to radians."
  },
  {
    "name": "remainder",
    "doc": "Difference between x and the closest integer multiple of y."
  },
  {
    "name": "sin",
    "doc": "Return the sine of x (measured in radians)."
  },
  {
    "name": "sinh",
    "doc": "Return the hyperbolic sine of x."
  },
  {
    "name": "sqrt",
    "doc": "Return the square root of x."
  },
  {
    "name": "tan",
    "doc": "Return the tangent of x (measured in radians)."
  },
  {
    "name": "tanh",
    "doc": "Return the hyperbolic tangent of x."
  },
  {
    "name": "trunc",
    "doc": "Truncates the Real x to the nearest Integral toward 0."
  },
  {
    "name": "ulp",
    "doc": "Return the value of the least significant bit of the float x."
  },
  {
    "name": "_abs",
    "doc": "Return the absolute value of the argument."
  },
  {
    "name": "abs",
    "doc": "Same as abs(a)."
  },
  {
    "name": "add",
    "doc": "Same as a + b."
  },
  {
    "name": "and_",
    "doc": "Same as a & b."
  },
  {
    "name": "attrgetter",
    "doc": "attrgetter(attr, ...) --> attrgetter object"
  },
  {
    "name": "call",
    "doc": "Same as obj(*args, **kwargs)."
  },
  {
    "name": "concat",
    "doc": "Same as a + b, for a and b sequences."
  },
  {
    "name": "contains",
    "doc": "Same as b in a (note reversed operands)."
  },
  {
    "name": "countOf",
    "doc": "Return the number of items in a which are, or which equal, b."
  },
  {
    "name": "delitem",
    "doc": "Same as del a[b]."
  },
  {
    "name": "eq",
    "doc": "Same as a == b."
  },
  {
    "name": "floordiv",
    "doc": "Same as a // b."
  },
  {
    "name": "ge",
    "doc": "Same as a >= b."
  },
  {
    "name": "getitem",
    "doc": "Same as a[b]."
  },
  {
    "name": "gt",
    "doc": "Same as a > b."
  },
  {
    "name": "iadd",
    "doc": "Same as a += b."
  },
  {
    "name": "iand",
    "doc": "Same as a &= b."
  },
  {
    "name": "iconcat",
    "doc": "Same as a += b, for a and b sequences."
  },
  {
    "name": "ifloordiv",
    "doc": "Same as a //= b."
  },
  {
    "name": "ilshift",
    "doc": "Same as a <<= b."
  },
  {
    "name": "imatmul",
    "doc": "Same as a @= b."
  },
  {
    "name": "imod",
    "doc": "Same as a %= b."
  },
  {
    "name": "imul",
    "doc": "Same as a *= b."
  },
  {
    "name": "index",
    "doc": "Same as a.__index__()"
  },
  {
    "name": "indexOf",
    "doc": "Return the first index of b in a."
  },
  {
    "name": "inv",
    "doc": "Same as ~a."
  },
  {
    "name": "invert",
    "doc": "Same as ~a."
  },
  {
    "name": "ior",
    "doc": "Same as a |= b."
  },
  {
    "name": "ipow",
    "doc": "Same as a **= b."
  },
  {
    "name": "irshift",
    "doc": "Same as a >>= b."
  },
  {
    "name": "is_",
    "doc": "Same as a is b."
  },
  {
    "name": "is_not",
    "doc": "Same as a is not b."
  },
  {
    "name": "isub",
    "doc": "Same as a -= b."
  },
  {
    "name": "itemgetter",
    "doc": "itemgetter(item, ...) --> itemgetter object"
  },
  {
    "name": "itruediv",
    "doc": "Same as a /= b."
  },
  {
    "name": "ixor",
    "doc": "Same as a ^= b."
  },
  {
    "name": "le",
    "doc": "Same as a <= b."
  },
  {
    "name": "length_hint",
    "doc": "Return an estimate of the number of items in obj."
  },
  {
    "name": "lshift",
    "doc": "Same as a << b."
  },
  {
    "name": "lt",
    "doc": "Same as a < b."
  },
  {
    "name": "matmul",
    "doc": "Same as a @ b."
  },
  {
    "name": "methodcaller",
    "doc": "methodcaller(name, ...) --> methodcaller object"
  },
  {
    "name": "mod",
    "doc": "Same as a % b."
  },
  {
    "name": "mul",
    "doc": "Same as a * b."
  },
  {
    "name": "ne",
    "doc": "Same as a != b."
  },
  {
    "name": "neg",
    "doc": "Same as -a."
  },
  {
    "name": "not_",
    "doc": "Same as not a."
  },
  {
    "name": "or_",
    "doc": "Same as a | b."
  },
  {
    "name": "pos",
    "doc": "Same as +a."
  },
  {
    "name": "pow",
    "doc": "Same as a ** b."
  },
  {
    "name": "rshift",
    "doc": "Same as a >> b."
  },
  {
    "name": "setitem",
    "doc": "Same as a[b] = c."
  },
  {
    "name": "sub",
    "doc": "Same as a - b."
  },
  {
    "name": "truediv",
    "doc": "Same as a / b."
  },
  {
    "name": "truth",
    "doc": "Return True if a is true, False otherwise."
  },
  {
    "name": "xor",
    "doc": "Same as a ^ b."
  },
  {
    "name": "DirEntry",
    "doc": ""
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "Mapping",
    "doc": "A Mapping is a generic container for associating key/value"
  },
  {
    "name": "MutableMapping",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "PathLike",
    "doc": "Abstract base class for implementing the file system path protocol."
  },
  {
    "name": "WCOREDUMP",
    "doc": "Return True if the process returning status was dumped to a core file."
  },
  {
    "name": "WEXITSTATUS",
    "doc": "Return the process return code from status."
  },
  {
    "name": "WIFCONTINUED",
    "doc": "Return True if a particular process was continued from a job control stop."
  },
  {
    "name": "WIFEXITED",
    "doc": "Return True if the process returning status exited via the exit() system call."
  },
  {
    "name": "WIFSIGNALED",
    "doc": "Return True if the process returning status was terminated by a signal."
  },
  {
    "name": "WIFSTOPPED",
    "doc": "Return True if the process returning status was stopped."
  },
  {
    "name": "WSTOPSIG",
    "doc": "Return the signal that stopped the process that provided the status value."
  },
  {
    "name": "WTERMSIG",
    "doc": "Return the signal that terminated the process that provided the status value."
  },
  {
    "name": "_Environ",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "_check_methods",
    "doc": ""
  },
  {
    "name": "_execvpe",
    "doc": ""
  },
  {
    "name": "_exists",
    "doc": ""
  },
  {
    "name": "_exit",
    "doc": "Exit to the system with specified status, without normal exit processing."
  },
  {
    "name": "_fspath",
    "doc": "Return the path representation of a path-like object."
  },
  {
    "name": "_fwalk",
    "doc": ""
  },
  {
    "name": "_get_exports_list",
    "doc": ""
  },
  {
    "name": "_spawnvef",
    "doc": ""
  },
  {
    "name": "_walk",
    "doc": ""
  },
  {
    "name": "_wrap_close",
    "doc": ""
  },
  {
    "name": "abort",
    "doc": "Abort the interpreter immediately."
  },
  {
    "name": "access",
    "doc": "Use the real uid/gid to test for access to a path."
  },
  {
    "name": "chdir",
    "doc": "Change the current working directory to the specified path."
  },
  {
    "name": "chmod",
    "doc": "Change the access permissions of a file."
  },
  {
    "name": "chown",
    "doc": "Change the owner and group id of path to the numeric uid and gid.\\"
  },
  {
    "name": "chroot",
    "doc": "Change root directory to path."
  },
  {
    "name": "close",
    "doc": "Close a file descriptor."
  },
  {
    "name": "closerange",
    "doc": "Closes all file descriptors in [fd_low, fd_high), ignoring errors."
  },
  {
    "name": "cpu_count",
    "doc": "Return the number of CPUs in the system; return None if indeterminable."
  },
  {
    "name": "device_encoding",
    "doc": "Return a string describing the encoding of a terminal's file descriptor."
  },
  {
    "name": "dup",
    "doc": "Return a duplicate of a file descriptor."
  },
  {
    "name": "dup2",
    "doc": "Duplicate file descriptor."
  },
  {
    "name": "error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "eventfd",
    "doc": "Creates and returns an event notification file descriptor."
  },
  {
    "name": "eventfd_read",
    "doc": "Read eventfd value"
  },
  {
    "name": "eventfd_write",
    "doc": "Write eventfd value."
  },
  {
    "name": "execl",
    "doc": "execl(file, *args)"
  },
  {
    "name": "execle",
    "doc": "execle(file, *args, env)"
  },
  {
    "name": "execlp",
    "doc": "execlp(file, *args)"
  },
  {
    "name": "execlpe",
    "doc": "execlpe(file, *args, env)"
  },
  {
    "name": "execv",
    "doc": "Execute an executable path with arguments, replacing current process."
  },
  {
    "name": "execve",
    "doc": "Execute an executable path with arguments, replacing current process."
  },
  {
    "name": "execvp",
    "doc": "execvp(file, args)"
  },
  {
    "name": "execvpe",
    "doc": "execvpe(file, args, env)"
  },
  {
    "name": "fchdir",
    "doc": "Change to the directory of the given file descriptor."
  },
  {
    "name": "fchmod",
    "doc": "Change the access permissions of the file given by file descriptor fd."
  },
  {
    "name": "fchown",
    "doc": "Change the owner and group id of the file specified by file descriptor."
  },
  {
    "name": "fdatasync",
    "doc": "Force write of fd to disk without forcing update of metadata."
  },
  {
    "name": "fdopen",
    "doc": ""
  },
  {
    "name": "fork",
    "doc": "Fork a child process."
  },
  {
    "name": "forkpty",
    "doc": "Fork a new process with a new pseudo-terminal as controlling tty."
  },
  {
    "name": "fpathconf",
    "doc": "Return the configuration limit name for the file descriptor fd."
  },
  {
    "name": "fsdecode",
    "doc": "Decode filename (an os.PathLike, bytes, or str) from the filesystem"
  },
  {
    "name": "fsencode",
    "doc": "Encode filename (an os.PathLike, bytes, or str) to the filesystem"
  },
  {
    "name": "fspath",
    "doc": "Return the file system path representation of the object."
  },
  {
    "name": "fstat",
    "doc": "Perform a stat system call on the given file descriptor."
  },
  {
    "name": "fstatvfs",
    "doc": "Perform an fstatvfs system call on the given fd."
  },
  {
    "name": "fsync",
    "doc": "Force write of fd to disk."
  },
  {
    "name": "ftruncate",
    "doc": "Truncate a file, specified by file descriptor, to a specific length."
  },
  {
    "name": "fwalk",
    "doc": "Directory tree generator."
  },
  {
    "name": "get_blocking",
    "doc": "Get the blocking mode of the file descriptor."
  },
  {
    "name": "get_exec_path",
    "doc": "Returns the sequence of directories that will be searched for the"
  },
  {
    "name": "get_inheritable",
    "doc": "Get the close-on-exe flag of the specified file descriptor."
  },
  {
    "name": "get_terminal_size",
    "doc": "Return the size of the terminal window as (columns, lines)."
  },
  {
    "name": "getcwd",
    "doc": "Return a unicode string representing the current working directory."
  },
  {
    "name": "getcwdb",
    "doc": "Return a bytes string representing the current working directory."
  },
  {
    "name": "getegid",
    "doc": "Return the current process's effective group id."
  },
  {
    "name": "getenv",
    "doc": "Get an environment variable, return None if it doesn't exist."
  },
  {
    "name": "getenvb",
    "doc": "Get an environment variable, return None if it doesn't exist."
  },
  {
    "name": "geteuid",
    "doc": "Return the current process's effective user id."
  },
  {
    "name": "getgid",
    "doc": "Return the current process's group id."
  },
  {
    "name": "getgrouplist",
    "doc": "Returns a list of groups to which a user belongs."
  },
  {
    "name": "getgroups",
    "doc": "Return list of supplemental group IDs for the process."
  },
  {
    "name": "getlogin",
    "doc": "Return the actual login name."
  },
  {
    "name": "getpgid",
    "doc": "Call the system call getpgid(), and return the result."
  },
  {
    "name": "getpgrp",
    "doc": "Return the current process group id."
  },
  {
    "name": "getpid",
    "doc": "Return the current process id."
  },
  {
    "name": "getppid",
    "doc": "Return the parent's process id."
  },
  {
    "name": "getpriority",
    "doc": "Return program scheduling priority."
  },
  {
    "name": "getrandom",
    "doc": "Obtain a series of random bytes."
  },
  {
    "name": "getresgid",
    "doc": "Return a tuple of the current process's real, effective, and saved group ids."
  },
  {
    "name": "getresuid",
    "doc": "Return a tuple of the current process's real, effective, and saved user ids."
  },
  {
    "name": "getsid",
    "doc": "Call the system call getsid(pid) and return the result."
  },
  {
    "name": "getuid",
    "doc": "Return the current process's user id."
  },
  {
    "name": "getxattr",
    "doc": "Return the value of extended attribute attribute on path."
  },
  {
    "name": "initgroups",
    "doc": "Initialize the group access list."
  },
  {
    "name": "isatty",
    "doc": "Return True if the fd is connected to a terminal."
  },
  {
    "name": "kill",
    "doc": "Kill a process with a signal."
  },
  {
    "name": "killpg",
    "doc": "Kill a process group with a signal."
  },
  {
    "name": "lchown",
    "doc": "Change the owner and group id of path to the numeric uid and gid."
  },
  {
    "name": "link",
    "doc": "Create a hard link to a file."
  },
  {
    "name": "listdir",
    "doc": "Return a list containing the names of the files in the directory."
  },
  {
    "name": "listxattr",
    "doc": "Return a list of extended attributes on path."
  },
  {
    "name": "login_tty",
    "doc": "Prepare the tty of which fd is a file descriptor for a new login session."
  },
  {
    "name": "lseek",
    "doc": "Set the position of a file descriptor.  Return the new position."
  },
  {
    "name": "lstat",
    "doc": "Perform a stat system call on the given path, without following symbolic links."
  },
  {
    "name": "major",
    "doc": "Extracts a device major number from a raw device number."
  },
  {
    "name": "makedev",
    "doc": "Composes a raw device number from the major and minor device numbers."
  },
  {
    "name": "makedirs",
    "doc": "makedirs(name [, mode=0o777][, exist_ok=False])"
  },
  {
    "name": "minor",
    "doc": "Extracts a device minor number from a raw device number."
  },
  {
    "name": "mkdir",
    "doc": "Create a directory."
  },
  {
    "name": "mkfifo",
    "doc": "Create a \"fifo\" (a POSIX named pipe)."
  },
  {
    "name": "mknod",
    "doc": "Create a node in the file system."
  },
  {
    "name": "nice",
    "doc": "Add increment to the priority of process and return the new priority."
  },
  {
    "name": "open",
    "doc": "Open a file for low level IO.  Returns a file descriptor (integer)."
  },
  {
    "name": "openpty",
    "doc": "Open a pseudo-terminal."
  },
  {
    "name": "pathconf",
    "doc": "Return the configuration limit name for the file or directory path."
  },
  {
    "name": "pidfd_open",
    "doc": "Return a file descriptor referring to the process *pid*."
  },
  {
    "name": "pipe",
    "doc": "Create a pipe."
  },
  {
    "name": "pipe2",
    "doc": "Create a pipe with flags set atomically."
  },
  {
    "name": "popen",
    "doc": ""
  },
  {
    "name": "posix_fadvise",
    "doc": "Announce an intention to access data in a specific pattern."
  },
  {
    "name": "posix_fallocate",
    "doc": "Ensure a file has allocated at least a particular number of bytes on disk."
  },
  {
    "name": "pread",
    "doc": "Read a number of bytes from a file descriptor starting at a particular offset."
  },
  {
    "name": "putenv",
    "doc": "Change or add an environment variable."
  },
  {
    "name": "pwrite",
    "doc": "Write bytes to a file descriptor starting at a particular offset."
  },
  {
    "name": "read",
    "doc": "Read from a file descriptor.  Returns a bytes object."
  },
  {
    "name": "readlink",
    "doc": "Return a string representing the path to which the symbolic link points."
  },
  {
    "name": "readv",
    "doc": "Read from a file descriptor fd into an iterable of buffers."
  },
  {
    "name": "register_at_fork",
    "doc": "Register callables to be called when forking a new process."
  },
  {
    "name": "remove",
    "doc": "Remove a file (same as unlink())."
  },
  {
    "name": "removedirs",
    "doc": "removedirs(name)"
  },
  {
    "name": "removexattr",
    "doc": "Remove extended attribute attribute on path."
  },
  {
    "name": "rename",
    "doc": "Rename a file or directory."
  },
  {
    "name": "renames",
    "doc": "renames(old, new)"
  },
  {
    "name": "replace",
    "doc": "Rename a file or directory, overwriting the destination."
  },
  {
    "name": "rmdir",
    "doc": "Remove a directory."
  },
  {
    "name": "scandir",
    "doc": "Return an iterator of DirEntry objects for given path."
  },
  {
    "name": "sched_get_priority_max",
    "doc": "Get the maximum scheduling priority for policy."
  },
  {
    "name": "sched_get_priority_min",
    "doc": "Get the minimum scheduling priority for policy."
  },
  {
    "name": "sched_getaffinity",
    "doc": "Return the affinity of the process identified by pid (or the current process if zero)."
  },
  {
    "name": "sched_getparam",
    "doc": "Returns scheduling parameters for the process identified by pid."
  },
  {
    "name": "sched_getscheduler",
    "doc": "Get the scheduling policy for the process identified by pid."
  },
  {
    "name": "sched_param",
    "doc": "Currently has only one field: sched_priority"
  },
  {
    "name": "sched_rr_get_interval",
    "doc": "Return the round-robin quantum for the process identified by pid, in seconds."
  },
  {
    "name": "sched_setaffinity",
    "doc": "Set the CPU affinity of the process identified by pid to mask."
  },
  {
    "name": "sched_setparam",
    "doc": "Set scheduling parameters for the process identified by pid."
  },
  {
    "name": "sched_setscheduler",
    "doc": "Set the scheduling policy for the process identified by pid."
  },
  {
    "name": "sched_yield",
    "doc": "Voluntarily relinquish the CPU."
  },
  {
    "name": "sendfile",
    "doc": "Copy count bytes from file descriptor in_fd to file descriptor out_fd."
  },
  {
    "name": "set_blocking",
    "doc": "Set the blocking mode of the specified file descriptor."
  },
  {
    "name": "set_inheritable",
    "doc": "Set the inheritable flag of the specified file descriptor."
  },
  {
    "name": "setegid",
    "doc": "Set the current process's effective group id."
  },
  {
    "name": "seteuid",
    "doc": "Set the current process's effective user id."
  },
  {
    "name": "setgid",
    "doc": "Set the current process's group id."
  },
  {
    "name": "setgroups",
    "doc": "Set the groups of the current process to list."
  },
  {
    "name": "setpgid",
    "doc": "Call the system call setpgid(pid, pgrp)."
  },
  {
    "name": "setpgrp",
    "doc": "Make the current process the leader of its process group."
  },
  {
    "name": "setpriority",
    "doc": "Set program scheduling priority."
  },
  {
    "name": "setregid",
    "doc": "Set the current process's real and effective group ids."
  },
  {
    "name": "setresgid",
    "doc": "Set the current process's real, effective, and saved group ids."
  },
  {
    "name": "setresuid",
    "doc": "Set the current process's real, effective, and saved user ids."
  },
  {
    "name": "setreuid",
    "doc": "Set the current process's real and effective user ids."
  },
  {
    "name": "setsid",
    "doc": "Call the system call setsid()."
  },
  {
    "name": "setuid",
    "doc": "Set the current process's user id."
  },
  {
    "name": "setxattr",
    "doc": "Set extended attribute attribute on path to value."
  },
  {
    "name": "spawnl",
    "doc": "spawnl(mode, file, *args) -> integer"
  },
  {
    "name": "spawnle",
    "doc": "spawnle(mode, file, *args, env) -> integer"
  },
  {
    "name": "spawnlp",
    "doc": "spawnlp(mode, file, *args) -> integer"
  },
  {
    "name": "spawnlpe",
    "doc": "spawnlpe(mode, file, *args, env) -> integer"
  },
  {
    "name": "spawnv",
    "doc": "spawnv(mode, file, args) -> integer"
  },
  {
    "name": "spawnve",
    "doc": "spawnve(mode, file, args, env) -> integer"
  },
  {
    "name": "spawnvp",
    "doc": "spawnvp(mode, file, args) -> integer"
  },
  {
    "name": "spawnvpe",
    "doc": "spawnvpe(mode, file, args, env) -> integer"
  },
  {
    "name": "splice",
    "doc": "Transfer count bytes from one pipe to a descriptor or vice versa."
  },
  {
    "name": "stat",
    "doc": "Perform a stat system call on the given path."
  },
  {
    "name": "stat_result",
    "doc": "stat_result: Result from stat, fstat, or lstat."
  },
  {
    "name": "statvfs",
    "doc": "Perform a statvfs system call on the given path."
  },
  {
    "name": "statvfs_result",
    "doc": "statvfs_result: Result from statvfs or fstatvfs."
  },
  {
    "name": "strerror",
    "doc": "Translate an error code to a message string."
  },
  {
    "name": "symlink",
    "doc": "Create a symbolic link pointing to src named dst."
  },
  {
    "name": "sync",
    "doc": "Force write of everything to disk."
  },
  {
    "name": "sysconf",
    "doc": "Return an integer-valued system configuration variable."
  },
  {
    "name": "system",
    "doc": "Execute the command in a subshell."
  },
  {
    "name": "tcgetpgrp",
    "doc": "Return the process group associated with the terminal specified by fd."
  },
  {
    "name": "tcsetpgrp",
    "doc": "Set the process group associated with the terminal specified by fd."
  },
  {
    "name": "terminal_size",
    "doc": "A tuple of (columns, lines) for holding terminal window size"
  },
  {
    "name": "times",
    "doc": "Return a collection containing process timing information."
  },
  {
    "name": "times_result",
    "doc": "times_result: Result from os.times()."
  },
  {
    "name": "truncate",
    "doc": "Truncate a file, specified by path, to a specific length."
  },
  {
    "name": "ttyname",
    "doc": "Return the name of the terminal device connected to 'fd'."
  },
  {
    "name": "umask",
    "doc": "Set the current numeric umask and return the previous umask."
  },
  {
    "name": "uname",
    "doc": "Return an object identifying the current operating system."
  },
  {
    "name": "uname_result",
    "doc": "uname_result: Result from os.uname()."
  },
  {
    "name": "unlink",
    "doc": "Remove a file (same as remove())."
  },
  {
    "name": "unsetenv",
    "doc": "Delete an environment variable."
  },
  {
    "name": "urandom",
    "doc": "Return a bytes object containing random bytes suitable for cryptographic use."
  },
  {
    "name": "utime",
    "doc": "Set the access and modified time of path."
  },
  {
    "name": "wait",
    "doc": "Wait for completion of a child process."
  },
  {
    "name": "wait4",
    "doc": "Wait for completion of a specific child process."
  },
  {
    "name": "waitid",
    "doc": "Returns the result of waiting for a process or processes."
  },
  {
    "name": "waitid_result",
    "doc": "waitid_result: Result from waitid."
  },
  {
    "name": "waitpid",
    "doc": "Wait for completion of a given child process."
  },
  {
    "name": "waitstatus_to_exitcode",
    "doc": "Convert a wait status to an exit code."
  },
  {
    "name": "walk",
    "doc": "Directory tree generator."
  },
  {
    "name": "write",
    "doc": "Write a bytes object to a file descriptor."
  },
  {
    "name": "writev",
    "doc": "Iterate over buffers, and write the contents of each to a file descriptor."
  },
  {
    "name": "Path",
    "doc": "PurePath subclass that can make system calls."
  },
  {
    "name": "PosixPath",
    "doc": "Path subclass for non-Windows systems."
  },
  {
    "name": "PurePath",
    "doc": "Base class for manipulating paths without I/O."
  },
  {
    "name": "PurePosixPath",
    "doc": "PurePath subclass for non-Windows systems."
  },
  {
    "name": "PureWindowsPath",
    "doc": "PurePath subclass for Windows systems."
  },
  {
    "name": "S_ISBLK",
    "doc": "S_ISBLK(mode) -> bool"
  },
  {
    "name": "S_ISCHR",
    "doc": "S_ISCHR(mode) -> bool"
  },
  {
    "name": "S_ISDIR",
    "doc": "S_ISDIR(mode) -> bool"
  },
  {
    "name": "S_ISFIFO",
    "doc": "S_ISFIFO(mode) -> bool"
  },
  {
    "name": "S_ISLNK",
    "doc": "S_ISLNK(mode) -> bool"
  },
  {
    "name": "S_ISREG",
    "doc": "S_ISREG(mode) -> bool"
  },
  {
    "name": "S_ISSOCK",
    "doc": "S_ISSOCK(mode) -> bool"
  },
  {
    "name": "Sequence",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "WindowsPath",
    "doc": "Path subclass for Windows systems."
  },
  {
    "name": "_Flavour",
    "doc": "A flavour implements a particular (platform-specific) set of path"
  },
  {
    "name": "_PathParents",
    "doc": "This object provides sequence-like access to the logical ancestors"
  },
  {
    "name": "_PosixFlavour",
    "doc": "A flavour implements a particular (platform-specific) set of path"
  },
  {
    "name": "_PreciseSelector",
    "doc": "A selector matches a specific glob pattern part against the children"
  },
  {
    "name": "_RecursiveWildcardSelector",
    "doc": "A selector matches a specific glob pattern part against the children"
  },
  {
    "name": "_Selector",
    "doc": "A selector matches a specific glob pattern part against the children"
  },
  {
    "name": "_TerminatingSelector",
    "doc": ""
  },
  {
    "name": "_WildcardSelector",
    "doc": "A selector matches a specific glob pattern part against the children"
  },
  {
    "name": "_WindowsFlavour",
    "doc": "A flavour implements a particular (platform-specific) set of path"
  },
  {
    "name": "_ignore_error",
    "doc": ""
  },
  {
    "name": "_is_wildcard_pattern",
    "doc": ""
  },
  {
    "name": "_make_selector",
    "doc": ""
  },
  {
    "name": "attrgetter",
    "doc": "attrgetter(attr, ...) --> attrgetter object"
  },
  {
    "name": "urlquote_from_bytes",
    "doc": "Like quote(), but accepts a bytes object rather than a str, and does"
  },
  {
    "name": "Random",
    "doc": "Random number generator base class used by bound module functions."
  },
  {
    "name": "SystemRandom",
    "doc": "Alternate random number generator using sources provided"
  },
  {
    "name": "_Sequence",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "_Set",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "_accumulate",
    "doc": "Return series of accumulated sums (or other binary function results)."
  },
  {
    "name": "_acos",
    "doc": "Return the arc cosine (measured in radians) of x."
  },
  {
    "name": "_bisect",
    "doc": "Return the index where to insert item x in list a, assuming a is sorted."
  },
  {
    "name": "_ceil",
    "doc": "Return the ceiling of x as an Integral."
  },
  {
    "name": "_cos",
    "doc": "Return the cosine of x (measured in radians)."
  },
  {
    "name": "_exp",
    "doc": "Return e raised to the power of x."
  },
  {
    "name": "_floor",
    "doc": "Return the floor of x as an Integral."
  },
  {
    "name": "_index",
    "doc": "Same as a.__index__()"
  },
  {
    "name": "_isfinite",
    "doc": "Return True if x is neither an infinity nor a NaN, and False otherwise."
  },
  {
    "name": "_log",
    "doc": "log(x, [base=math.e])"
  },
  {
    "name": "_repeat",
    "doc": "repeat(object [,times]) -> create an iterator which returns the object"
  },
  {
    "name": "_sha512",
    "doc": "Return a new SHA-512 hash object; optionally initialized with a string."
  },
  {
    "name": "_sin",
    "doc": "Return the sine of x (measured in radians)."
  },
  {
    "name": "_sqrt",
    "doc": "Return the square root of x."
  },
  {
    "name": "_test",
    "doc": ""
  },
  {
    "name": "_test_generator",
    "doc": ""
  },
  {
    "name": "_urandom",
    "doc": "Return a bytes object containing random bytes suitable for cryptographic use."
  },
  {
    "name": "_warn",
    "doc": "Issue a warning, or maybe ignore it or raise an exception."
  },
  {
    "name": "betavariate",
    "doc": "Beta distribution."
  },
  {
    "name": "choice",
    "doc": "Choose a random element from a non-empty sequence."
  },
  {
    "name": "choices",
    "doc": "Return a k sized list of population elements chosen with replacement."
  },
  {
    "name": "expovariate",
    "doc": "Exponential distribution."
  },
  {
    "name": "gammavariate",
    "doc": "Gamma distribution.  Not the gamma function!"
  },
  {
    "name": "gauss",
    "doc": "Gaussian distribution."
  },
  {
    "name": "getrandbits",
    "doc": "getrandbits(k) -> x.  Generates an int with k random bits."
  },
  {
    "name": "getstate",
    "doc": "Return internal state; can be passed to setstate() later."
  },
  {
    "name": "lognormvariate",
    "doc": "Log normal distribution."
  },
  {
    "name": "normalvariate",
    "doc": "Normal distribution."
  },
  {
    "name": "paretovariate",
    "doc": "Pareto distribution.  alpha is the shape parameter."
  },
  {
    "name": "randbytes",
    "doc": "Generate n random bytes."
  },
  {
    "name": "randint",
    "doc": "Return random integer in range [a, b], including both end points."
  },
  {
    "name": "random",
    "doc": "random() -> x in the interval [0, 1)."
  },
  {
    "name": "randrange",
    "doc": "Choose a random item from range(stop) or range(start, stop[, step])."
  },
  {
    "name": "sample",
    "doc": "Chooses k unique random elements from a population sequence."
  },
  {
    "name": "seed",
    "doc": "Initialize internal state from a seed."
  },
  {
    "name": "setstate",
    "doc": "Restore internal state from object returned by getstate()."
  },
  {
    "name": "shuffle",
    "doc": "Shuffle list x in place, and return None."
  },
  {
    "name": "triangular",
    "doc": "Triangular distribution."
  },
  {
    "name": "uniform",
    "doc": "Get a random number in the range [a, b) or [a, b] depending on rounding."
  },
  {
    "name": "vonmisesvariate",
    "doc": "Circular data distribution."
  },
  {
    "name": "weibullvariate",
    "doc": "Weibull distribution."
  },
  {
    "name": "Match",
    "doc": "The result of re.match() and re.search()."
  },
  {
    "name": "Pattern",
    "doc": "Compiled regular expression object."
  },
  {
    "name": "RegexFlag",
    "doc": "An enumeration."
  },
  {
    "name": "Scanner",
    "doc": ""
  },
  {
    "name": "_compile",
    "doc": ""
  },
  {
    "name": "_compile_repl",
    "doc": ""
  },
  {
    "name": "_expand",
    "doc": ""
  },
  {
    "name": "_pickle",
    "doc": ""
  },
  {
    "name": "_subx",
    "doc": ""
  },
  {
    "name": "compile",
    "doc": "Compile a regular expression pattern, returning a Pattern object."
  },
  {
    "name": "error",
    "doc": "Exception raised for invalid regular expressions."
  },
  {
    "name": "escape",
    "doc": "Escape special characters in a string."
  },
  {
    "name": "findall",
    "doc": "Return a list of all non-overlapping matches in the string."
  },
  {
    "name": "finditer",
    "doc": "Return an iterator over all non-overlapping matches in the"
  },
  {
    "name": "fullmatch",
    "doc": "Try to apply the pattern to all of the string, returning"
  },
  {
    "name": "match",
    "doc": "Try to apply the pattern at the start of the string, returning"
  },
  {
    "name": "purge",
    "doc": "Clear the regular expression caches"
  },
  {
    "name": "search",
    "doc": "Scan through string looking for a match to the pattern, returning"
  },
  {
    "name": "split",
    "doc": "Split the source string by the occurrences of the pattern,"
  },
  {
    "name": "sub",
    "doc": "Return the string obtained by replacing the leftmost"
  },
  {
    "name": "subn",
    "doc": "Return a 2-tuple containing (new_string, number)."
  },
  {
    "name": "template",
    "doc": "Compile a template pattern, returning a Pattern object, deprecated"
  },
  {
    "name": "ConnectTimeout",
    "doc": "The request timed out while trying to connect to the remote server."
  },
  {
    "name": "ConnectionError",
    "doc": "A Connection error occurred."
  },
  {
    "name": "DependencyWarning",
    "doc": "Warned when an attempt is made to import a module with missing optional"
  },
  {
    "name": "FileModeWarning",
    "doc": "A file was opened in text mode, but Requests determined its binary length."
  },
  {
    "name": "HTTPError",
    "doc": "An HTTP error occurred."
  },
  {
    "name": "JSONDecodeError",
    "doc": "Couldn't decode the text into json"
  },
  {
    "name": "NullHandler",
    "doc": "This handler does nothing. It's intended to be used to avoid the"
  },
  {
    "name": "PreparedRequest",
    "doc": "The fully mutable :class:`PreparedRequest <PreparedRequest>` object,"
  },
  {
    "name": "ReadTimeout",
    "doc": "The server did not send any data in the allotted amount of time."
  },
  {
    "name": "Request",
    "doc": "A user-created :class:`Request <Request>` object."
  },
  {
    "name": "RequestException",
    "doc": "There was an ambiguous exception that occurred while handling your"
  },
  {
    "name": "RequestsDependencyWarning",
    "doc": "An imported dependency doesn't match the expected version range."
  },
  {
    "name": "Response",
    "doc": "The :class:`Response <Response>` object, which contains a"
  },
  {
    "name": "Session",
    "doc": "A Requests session."
  },
  {
    "name": "Timeout",
    "doc": "The request timed out."
  },
  {
    "name": "TooManyRedirects",
    "doc": "Too many redirects."
  },
  {
    "name": "URLRequired",
    "doc": "A valid URL is required to make a request."
  },
  {
    "name": "_check_cryptography",
    "doc": ""
  },
  {
    "name": "check_compatibility",
    "doc": ""
  },
  {
    "name": "delete",
    "doc": "Sends a DELETE request."
  },
  {
    "name": "get",
    "doc": "Sends a GET request."
  },
  {
    "name": "head",
    "doc": "Sends a HEAD request."
  },
  {
    "name": "options",
    "doc": "Sends an OPTIONS request."
  },
  {
    "name": "patch",
    "doc": "Sends a PATCH request."
  },
  {
    "name": "post",
    "doc": "Sends a POST request."
  },
  {
    "name": "put",
    "doc": "Sends a PUT request."
  },
  {
    "name": "request",
    "doc": "Constructs and sends a :class:`Request <Request>`."
  },
  {
    "name": "session",
    "doc": "Returns a :class:`Session` for context-management."
  },
  {
    "name": "Counter",
    "doc": "Dict subclass for counting hashable items.  Sometimes called a bag"
  },
  {
    "name": "Decimal",
    "doc": "Construct a new Decimal object. 'value' can be an integer, string, tuple,"
  },
  {
    "name": "Fraction",
    "doc": "This class implements rational numbers."
  },
  {
    "name": "LinearRegression",
    "doc": "LinearRegression(slope, intercept)"
  },
  {
    "name": "NormalDist",
    "doc": "Normal distribution of a random variable"
  },
  {
    "name": "StatisticsError",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "_coerce",
    "doc": "Coerce types T and S to a common type, or raise TypeError."
  },
  {
    "name": "_convert",
    "doc": "Convert value to given numeric type T."
  },
  {
    "name": "_decimal_sqrt_of_frac",
    "doc": "Square root of n/m as a Decimal, correctly rounded."
  },
  {
    "name": "_exact_ratio",
    "doc": "Return Real number x to exact (numerator, denominator) pair."
  },
  {
    "name": "_fail_neg",
    "doc": "Iterate over values, failing if any are less than zero."
  },
  {
    "name": "_float_sqrt_of_frac",
    "doc": "Square root of n/m as a float, correctly rounded."
  },
  {
    "name": "_integer_sqrt_of_frac_rto",
    "doc": "Square root of n/m, rounded to the nearest integer using round-to-odd."
  },
  {
    "name": "_isfinite",
    "doc": ""
  },
  {
    "name": "_mean_stdev",
    "doc": "In one pass, compute the mean and sample standard deviation as floats."
  },
  {
    "name": "_normal_dist_inv_cdf",
    "doc": ""
  },
  {
    "name": "_ss",
    "doc": "Return the exact mean and sum of square deviations of sequence data."
  },
  {
    "name": "_sum",
    "doc": "_sum(data) -> (type, sum, count)"
  },
  {
    "name": "bisect_left",
    "doc": "Return the index where to insert item x in list a, assuming a is sorted."
  },
  {
    "name": "bisect_right",
    "doc": "Return the index where to insert item x in list a, assuming a is sorted."
  },
  {
    "name": "correlation",
    "doc": "Pearson's correlation coefficient"
  },
  {
    "name": "covariance",
    "doc": "Covariance"
  },
  {
    "name": "defaultdict",
    "doc": "defaultdict(default_factory=None, /, [...]) --> dict with default factory"
  },
  {
    "name": "erf",
    "doc": "Error function at x."
  },
  {
    "name": "exp",
    "doc": "Return e raised to the power of x."
  },
  {
    "name": "fabs",
    "doc": "Return the absolute value of the float x."
  },
  {
    "name": "fmean",
    "doc": "Convert data to floats and compute the arithmetic mean."
  },
  {
    "name": "fsum",
    "doc": "Return an accurate floating point sum of values in the iterable seq."
  },
  {
    "name": "geometric_mean",
    "doc": "Convert data to floats and compute the geometric mean."
  },
  {
    "name": "groupby",
    "doc": "make an iterator that returns consecutive keys and groups from the iterable"
  },
  {
    "name": "harmonic_mean",
    "doc": "Return the harmonic mean of data."
  },
  {
    "name": "hypot",
    "doc": "hypot(*coordinates) -> value"
  },
  {
    "name": "linear_regression",
    "doc": "Slope and intercept for simple linear regression."
  },
  {
    "name": "log",
    "doc": "log(x, [base=math.e])"
  },
  {
    "name": "mean",
    "doc": "Return the sample arithmetic mean of data."
  },
  {
    "name": "median",
    "doc": "Return the median (middle value) of numeric data."
  },
  {
    "name": "median_grouped",
    "doc": "Estimates the median for numeric data binned around the midpoints"
  },
  {
    "name": "median_high",
    "doc": "Return the high median of data."
  },
  {
    "name": "median_low",
    "doc": "Return the low median of numeric data."
  },
  {
    "name": "mode",
    "doc": "Return the most common data point from discrete or nominal data."
  },
  {
    "name": "mul",
    "doc": "Same as a * b."
  },
  {
    "name": "multimode",
    "doc": "Return a list of the most frequently occurring values."
  },
  {
    "name": "namedtuple",
    "doc": "Returns a new subclass of tuple with named fields."
  },
  {
    "name": "pstdev",
    "doc": "Return the square root of the population variance."
  },
  {
    "name": "pvariance",
    "doc": "Return the population variance of ``data``."
  },
  {
    "name": "quantiles",
    "doc": "Divide *data* into *n* continuous intervals with equal probability."
  },
  {
    "name": "reduce",
    "doc": "reduce(function, iterable[, initial]) -> value"
  },
  {
    "name": "repeat",
    "doc": "repeat(object [,times]) -> create an iterator which returns the object"
  },
  {
    "name": "sqrt",
    "doc": "Return the square root of x."
  },
  {
    "name": "stdev",
    "doc": "Return the square root of the sample variance."
  },
  {
    "name": "variance",
    "doc": "Return the sample variance of data."
  },
  {
    "name": "Formatter",
    "doc": ""
  },
  {
    "name": "Template",
    "doc": "A string class for supporting $-substitutions."
  },
  {
    "name": "_ChainMap",
    "doc": "A ChainMap groups multiple dicts (or other mappings) together"
  },
  {
    "name": "capwords",
    "doc": "capwords(s [,sep]) -> string"
  },
  {
    "name": "CalledProcessError",
    "doc": "Raised when run() is called with check=True and the process"
  },
  {
    "name": "CompletedProcess",
    "doc": "A process that has finished running."
  },
  {
    "name": "Popen",
    "doc": "Execute a child program in a new process."
  },
  {
    "name": "SubprocessError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "TimeoutExpired",
    "doc": "This exception is raised when the timeout expires while waiting for a"
  },
  {
    "name": "_PopenSelector",
    "doc": "Poll-based selector."
  },
  {
    "name": "_WIFSTOPPED",
    "doc": "Return True if the process returning status was stopped."
  },
  {
    "name": "_WSTOPSIG",
    "doc": "Return the signal that stopped the process that provided the status value."
  },
  {
    "name": "_args_from_interpreter_flags",
    "doc": "Return a list of command-line arguments reproducing the current"
  },
  {
    "name": "_cleanup",
    "doc": ""
  },
  {
    "name": "_fork_exec",
    "doc": "fork_exec(args, executable_list, close_fds, pass_fds, cwd, env,"
  },
  {
    "name": "_optim_args_from_interpreter_flags",
    "doc": "Return a list of command-line arguments reproducing the current"
  },
  {
    "name": "_text_encoding",
    "doc": ""
  },
  {
    "name": "_time",
    "doc": "monotonic() -> float"
  },
  {
    "name": "_use_posix_spawn",
    "doc": "Check if posix_spawn() can be used for subprocess."
  },
  {
    "name": "_waitpid",
    "doc": "Wait for completion of a given child process."
  },
  {
    "name": "_waitstatus_to_exitcode",
    "doc": "Convert a wait status to an exit code."
  },
  {
    "name": "call",
    "doc": "Run command with arguments.  Wait for command to complete or"
  },
  {
    "name": "check_call",
    "doc": "Run command with arguments.  Wait for command to complete.  If"
  },
  {
    "name": "check_output",
    "doc": "Run command with arguments and return its output."
  },
  {
    "name": "getoutput",
    "doc": "Return output (stdout or stderr) of executing cmd in a shell."
  },
  {
    "name": "getstatusoutput",
    "doc": "Return (exitcode, output) of executing cmd in a shell."
  },
  {
    "name": "list2cmdline",
    "doc": "Translate a sequence of arguments into a command line"
  },
  {
    "name": "run",
    "doc": "Run command with arguments and return a CompletedProcess instance."
  },
  {
    "name": "_clear_type_cache",
    "doc": "Clear the internal type lookup cache."
  },
  {
    "name": "_current_exceptions",
    "doc": "Return a dict mapping each thread's identifier to its current raised exception."
  },
  {
    "name": "_current_frames",
    "doc": "Return a dict mapping each thread's thread id to its current stack frame."
  },
  {
    "name": "_debugmallocstats",
    "doc": "Print summary info to stderr about the state of pymalloc's structures."
  },
  {
    "name": "_getframe",
    "doc": "Return a frame object from the call stack."
  },
  {
    "name": "_getquickenedcount",
    "doc": ""
  },
  {
    "name": "addaudithook",
    "doc": "Adds a new audit hook callback."
  },
  {
    "name": "audit",
    "doc": "audit(event, *args)"
  },
  {
    "name": "breakpointhook",
    "doc": "breakpointhook(*args, **kws)"
  },
  {
    "name": "call_tracing",
    "doc": "Call func(*args), while tracing is enabled."
  },
  {
    "name": "displayhook",
    "doc": "Print an object to sys.stdout and also save it in builtins._"
  },
  {
    "name": "exc_info",
    "doc": "Return current exception information: (type, value, traceback)."
  },
  {
    "name": "excepthook",
    "doc": "Handle an exception by displaying it with a traceback on sys.stderr."
  },
  {
    "name": "exception",
    "doc": "Return the current exception."
  },
  {
    "name": "exit",
    "doc": "Exit the interpreter by raising SystemExit(status)."
  },
  {
    "name": "get_asyncgen_hooks",
    "doc": "Return the installed asynchronous generators hooks."
  },
  {
    "name": "get_coroutine_origin_tracking_depth",
    "doc": "Check status of origin tracking for coroutine objects in this thread."
  },
  {
    "name": "get_int_max_str_digits",
    "doc": "Return the maximum string digits limit for non-binary int<->str conversions."
  },
  {
    "name": "getallocatedblocks",
    "doc": "Return the number of memory blocks currently allocated."
  },
  {
    "name": "getandroidapilevel",
    "doc": "Return the build time API version of Android as an integer."
  },
  {
    "name": "getdefaultencoding",
    "doc": "Return the current default encoding used by the Unicode implementation."
  },
  {
    "name": "getdlopenflags",
    "doc": "Return the current value of the flags that are used for dlopen calls."
  },
  {
    "name": "getfilesystemencodeerrors",
    "doc": "Return the error mode used Unicode to OS filename conversion."
  },
  {
    "name": "getfilesystemencoding",
    "doc": "Return the encoding used to convert Unicode filenames to OS filenames."
  },
  {
    "name": "getprofile",
    "doc": "Return the profiling function set with sys.setprofile."
  },
  {
    "name": "getrecursionlimit",
    "doc": "Return the current value of the recursion limit."
  },
  {
    "name": "getrefcount",
    "doc": "Return the reference count of object."
  },
  {
    "name": "getsizeof",
    "doc": "getsizeof(object [, default]) -> int"
  },
  {
    "name": "getswitchinterval",
    "doc": "Return the current thread switch interval; see sys.setswitchinterval()."
  },
  {
    "name": "gettrace",
    "doc": "Return the global debug tracing function set with sys.settrace."
  },
  {
    "name": "intern",
    "doc": "``Intern'' the given string."
  },
  {
    "name": "is_finalizing",
    "doc": "Return True if Python is exiting."
  },
  {
    "name": "set_asyncgen_hooks",
    "doc": "set_asyncgen_hooks(* [, firstiter] [, finalizer])"
  },
  {
    "name": "set_coroutine_origin_tracking_depth",
    "doc": "Enable or disable origin tracking for coroutine objects in this thread."
  },
  {
    "name": "set_int_max_str_digits",
    "doc": "Set the maximum string digits limit for non-binary int<->str conversions."
  },
  {
    "name": "setdlopenflags",
    "doc": "Set the flags used by the interpreter for dlopen calls."
  },
  {
    "name": "setprofile",
    "doc": "setprofile(function)"
  },
  {
    "name": "setrecursionlimit",
    "doc": "Set the maximum depth of the Python interpreter stack to n."
  },
  {
    "name": "setswitchinterval",
    "doc": "Set the ideal thread switching delay inside the Python interpreter."
  },
  {
    "name": "settrace",
    "doc": "settrace(function)"
  },
  {
    "name": "unraisablehook",
    "doc": "Handle an unraisable exception."
  },
  {
    "name": "Barrier",
    "doc": "Implements a Barrier."
  },
  {
    "name": "BoundedSemaphore",
    "doc": "Implements a bounded semaphore."
  },
  {
    "name": "BrokenBarrierError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "Condition",
    "doc": "Class that implements a condition variable."
  },
  {
    "name": "Event",
    "doc": "Class implementing event objects."
  },
  {
    "name": "ExceptHookArgs",
    "doc": "ExceptHookArgs"
  },
  {
    "name": "Lock",
    "doc": "allocate_lock() -> lock object"
  },
  {
    "name": "RLock",
    "doc": "Factory function that returns a new reentrant lock."
  },
  {
    "name": "Semaphore",
    "doc": "This class implements semaphore objects."
  },
  {
    "name": "Thread",
    "doc": "A class that represents a thread of control."
  },
  {
    "name": "ThreadError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "Timer",
    "doc": "Call a function after a specified number of seconds:"
  },
  {
    "name": "WeakSet",
    "doc": ""
  },
  {
    "name": "_CRLock",
    "doc": ""
  },
  {
    "name": "_DummyThread",
    "doc": "A class that represents a thread of control."
  },
  {
    "name": "_MainThread",
    "doc": "A class that represents a thread of control."
  },
  {
    "name": "_PyRLock",
    "doc": "This class implements reentrant lock objects."
  },
  {
    "name": "_RLock",
    "doc": "This class implements reentrant lock objects."
  },
  {
    "name": "_after_fork",
    "doc": "Cleanup threading module state that should not exist after a fork."
  },
  {
    "name": "_allocate_lock",
    "doc": "allocate_lock() -> lock object"
  },
  {
    "name": "_count",
    "doc": "Return a count object whose .__next__() method returns consecutive values."
  },
  {
    "name": "_counter",
    "doc": "Implement next(self)."
  },
  {
    "name": "_deque",
    "doc": "deque([iterable[, maxlen]]) --> deque object"
  },
  {
    "name": "_enumerate",
    "doc": ""
  },
  {
    "name": "_islice",
    "doc": "islice(iterable, stop) --> islice object"
  },
  {
    "name": "_maintain_shutdown_locks",
    "doc": "Drop any shutdown locks that don't correspond to running threads anymore."
  },
  {
    "name": "_make_invoke_excepthook",
    "doc": ""
  },
  {
    "name": "_newname",
    "doc": ""
  },
  {
    "name": "_register_atexit",
    "doc": "CPython internal: register *func* to be called before joining threads."
  },
  {
    "name": "_set_sentinel",
    "doc": "_set_sentinel() -> lock"
  },
  {
    "name": "_shutdown",
    "doc": "Wait until the Python thread state of all non-daemon threads get deleted."
  },
  {
    "name": "_start_new_thread",
    "doc": "start_new_thread(function, args[, kwargs])"
  },
  {
    "name": "_time",
    "doc": "monotonic() -> float"
  },
  {
    "name": "activeCount",
    "doc": "Return the number of Thread objects currently alive."
  },
  {
    "name": "active_count",
    "doc": "Return the number of Thread objects currently alive."
  },
  {
    "name": "currentThread",
    "doc": "Return the current Thread object, corresponding to the caller's thread of control."
  },
  {
    "name": "current_thread",
    "doc": "Return the current Thread object, corresponding to the caller's thread of control."
  },
  {
    "name": "enumerate",
    "doc": "Return a list of all Thread objects currently alive."
  },
  {
    "name": "excepthook",
    "doc": "excepthook(exc_type, exc_value, exc_traceback, thread)"
  },
  {
    "name": "get_ident",
    "doc": "get_ident() -> integer"
  },
  {
    "name": "get_native_id",
    "doc": "get_native_id() -> integer"
  },
  {
    "name": "getprofile",
    "doc": "Get the profiler function as set by threading.setprofile()."
  },
  {
    "name": "gettrace",
    "doc": "Get the trace function as set by threading.settrace()."
  },
  {
    "name": "local",
    "doc": "Thread-local data"
  },
  {
    "name": "main_thread",
    "doc": "Return the main thread object."
  },
  {
    "name": "setprofile",
    "doc": "Set a profile function for all threads started from the threading module."
  },
  {
    "name": "settrace",
    "doc": "Set a trace function for all threads started from the threading module."
  },
  {
    "name": "stack_size",
    "doc": "stack_size([size]) -> size"
  },
  {
    "name": "asctime",
    "doc": "asctime([tuple]) -> string"
  },
  {
    "name": "clock_getres",
    "doc": "clock_getres(clk_id) -> floating point number"
  },
  {
    "name": "clock_gettime",
    "doc": "clock_gettime(clk_id) -> float"
  },
  {
    "name": "clock_gettime_ns",
    "doc": "clock_gettime_ns(clk_id) -> int"
  },
  {
    "name": "clock_settime",
    "doc": "clock_settime(clk_id, time)"
  },
  {
    "name": "clock_settime_ns",
    "doc": "clock_settime_ns(clk_id, time)"
  },
  {
    "name": "ctime",
    "doc": "ctime(seconds) -> string"
  },
  {
    "name": "get_clock_info",
    "doc": "get_clock_info(name: str) -> dict"
  },
  {
    "name": "gmtime",
    "doc": "gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,"
  },
  {
    "name": "localtime",
    "doc": "localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,"
  },
  {
    "name": "mktime",
    "doc": "mktime(tuple) -> floating point number"
  },
  {
    "name": "monotonic",
    "doc": "monotonic() -> float"
  },
  {
    "name": "monotonic_ns",
    "doc": "monotonic_ns() -> int"
  },
  {
    "name": "perf_counter",
    "doc": "perf_counter() -> float"
  },
  {
    "name": "perf_counter_ns",
    "doc": "perf_counter_ns() -> int"
  },
  {
    "name": "process_time",
    "doc": "process_time() -> float"
  },
  {
    "name": "process_time_ns",
    "doc": "process_time() -> int"
  },
  {
    "name": "pthread_getcpuclockid",
    "doc": "pthread_getcpuclockid(thread_id) -> int"
  },
  {
    "name": "sleep",
    "doc": "sleep(seconds)"
  },
  {
    "name": "strftime",
    "doc": "strftime(format[, tuple]) -> string"
  },
  {
    "name": "strptime",
    "doc": "strptime(string, format) -> struct_time"
  },
  {
    "name": "struct_time",
    "doc": "The time value as returned by gmtime(), localtime(), and strptime(), and"
  },
  {
    "name": "thread_time",
    "doc": "thread_time() -> float"
  },
  {
    "name": "thread_time_ns",
    "doc": "thread_time() -> int"
  },
  {
    "name": "time",
    "doc": "time() -> floating point number"
  },
  {
    "name": "time_ns",
    "doc": "time_ns() -> int"
  },
  {
    "name": "AsyncGeneratorType",
    "doc": ""
  },
  {
    "name": "BuiltinFunctionType",
    "doc": ""
  },
  {
    "name": "BuiltinMethodType",
    "doc": ""
  },
  {
    "name": "CellType",
    "doc": "Create a new cell object."
  },
  {
    "name": "ClassMethodDescriptorType",
    "doc": ""
  },
  {
    "name": "CodeType",
    "doc": "Create a code object.  Not for the faint of heart."
  },
  {
    "name": "CoroutineType",
    "doc": ""
  },
  {
    "name": "DynamicClassAttribute",
    "doc": "Route attribute access on a class to __getattr__."
  },
  {
    "name": "EllipsisType",
    "doc": ""
  },
  {
    "name": "FrameType",
    "doc": ""
  },
  {
    "name": "FunctionType",
    "doc": "Create a function object."
  },
  {
    "name": "GeneratorType",
    "doc": ""
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "GetSetDescriptorType",
    "doc": ""
  },
  {
    "name": "LambdaType",
    "doc": "Create a function object."
  },
  {
    "name": "MappingProxyType",
    "doc": ""
  },
  {
    "name": "MemberDescriptorType",
    "doc": ""
  },
  {
    "name": "MethodDescriptorType",
    "doc": ""
  },
  {
    "name": "MethodType",
    "doc": "Create a bound instance method object."
  },
  {
    "name": "MethodWrapperType",
    "doc": ""
  },
  {
    "name": "ModuleType",
    "doc": "Create a module object."
  },
  {
    "name": "NoneType",
    "doc": ""
  },
  {
    "name": "NotImplementedType",
    "doc": ""
  },
  {
    "name": "SimpleNamespace",
    "doc": "A simple attribute-based namespace."
  },
  {
    "name": "TracebackType",
    "doc": "TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)"
  },
  {
    "name": "UnionType",
    "doc": "Represent a PEP 604 union type"
  },
  {
    "name": "WrapperDescriptorType",
    "doc": ""
  },
  {
    "name": "_GeneratorWrapper",
    "doc": ""
  },
  {
    "name": "_calculate_meta",
    "doc": "Calculate the most derived metaclass."
  },
  {
    "name": "_cell_factory",
    "doc": ""
  },
  {
    "name": "coroutine",
    "doc": "Convert regular generator function to a coroutine."
  },
  {
    "name": "new_class",
    "doc": "Create a class object dynamically using the appropriate metaclass."
  },
  {
    "name": "prepare_class",
    "doc": "Call the __prepare__ method of the appropriate metaclass."
  },
  {
    "name": "resolve_bases",
    "doc": "Resolve MRO entries dynamically as specified by PEP 560."
  },
  {
    "name": "CallableProxyType",
    "doc": ""
  },
  {
    "name": "KeyedRef",
    "doc": "Specialized reference that includes a key corresponding to the value."
  },
  {
    "name": "ProxyType",
    "doc": ""
  },
  {
    "name": "ReferenceType",
    "doc": ""
  },
  {
    "name": "WeakKeyDictionary",
    "doc": "Mapping class that references keys weakly."
  },
  {
    "name": "WeakMethod",
    "doc": "A custom `weakref.ref` subclass which simulates a weak reference to"
  },
  {
    "name": "WeakSet",
    "doc": ""
  },
  {
    "name": "WeakValueDictionary",
    "doc": "Mapping class that references values weakly."
  },
  {
    "name": "_IterationGuard",
    "doc": ""
  },
  {
    "name": "_remove_dead_weakref",
    "doc": "Atomically remove key from dict if it points to a dead weakref."
  },
  {
    "name": "finalize",
    "doc": "Class for finalization of weakrefable objects"
  },
  {
    "name": "getweakrefcount",
    "doc": "Return the number of weak references to 'object'."
  },
  {
    "name": "getweakrefs",
    "doc": "Return a list of all weak reference objects pointing to 'object'."
  },
  {
    "name": "proxy",
    "doc": "Create a proxy object that weakly references 'object'."
  },
  {
    "name": "ref",
    "doc": ""
  },
  {
    "name": "inode",
    "doc": "Return inode of the entry; cached per entry."
  },
  {
    "name": "is_dir",
    "doc": "Return True if the entry is a directory; cached per entry."
  },
  {
    "name": "is_file",
    "doc": "Return True if the entry is a file; cached per entry."
  },
  {
    "name": "is_symlink",
    "doc": "Return True if the entry is a symbolic link; cached per entry."
  },
  {
    "name": "stat",
    "doc": "Return stat_result object for the entry; cached per entry."
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "D.popitem() -> (k, v), remove and return some (key, value) pair"
  },
  {
    "name": "setdefault",
    "doc": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D"
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": ""
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "D.popitem() -> (k, v), remove and return some (key, value) pair"
  },
  {
    "name": "setdefault",
    "doc": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D"
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "_fix_up_module",
    "doc": ""
  },
  {
    "name": "_resolve_filename",
    "doc": ""
  },
  {
    "name": "create_module",
    "doc": "Set __file__, if able."
  },
  {
    "name": "exec_module",
    "doc": ""
  },
  {
    "name": "find_module",
    "doc": "Find a frozen module."
  },
  {
    "name": "find_spec",
    "doc": ""
  },
  {
    "name": "get_code",
    "doc": "Return the code object for the frozen module."
  },
  {
    "name": "get_source",
    "doc": "Return None as frozen modules do not have source code."
  },
  {
    "name": "is_package",
    "doc": "Return True if the frozen module is a package."
  },
  {
    "name": "load_module",
    "doc": "Load a frozen module."
  },
  {
    "name": "module_repr",
    "doc": "Return repr for the module."
  },
  {
    "name": "close",
    "doc": ""
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "_format_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parts",
    "doc": ""
  },
  {
    "name": "_make_child",
    "doc": ""
  },
  {
    "name": "_make_child_relpath",
    "doc": ""
  },
  {
    "name": "_parse_args",
    "doc": ""
  },
  {
    "name": "_scandir",
    "doc": ""
  },
  {
    "name": "absolute",
    "doc": "Return an absolute version of this path by prepending the current"
  },
  {
    "name": "as_posix",
    "doc": "Return the string representation of the path with forward (/)"
  },
  {
    "name": "as_uri",
    "doc": "Return the path as a 'file' URI."
  },
  {
    "name": "chmod",
    "doc": "Change the permissions of the path, like os.chmod()."
  },
  {
    "name": "cwd",
    "doc": "Return a new path pointing to the current working directory"
  },
  {
    "name": "exists",
    "doc": "Whether this path exists."
  },
  {
    "name": "expanduser",
    "doc": "Return a new path with expanded ~ and ~user constructs"
  },
  {
    "name": "glob",
    "doc": "Iterate over this subtree and yield all existing files (of any"
  },
  {
    "name": "group",
    "doc": "Return the group name of the file gid."
  },
  {
    "name": "hardlink_to",
    "doc": "Make this path a hard link pointing to the same file as *target*."
  },
  {
    "name": "home",
    "doc": "Return a new path pointing to the user's home directory (as"
  },
  {
    "name": "is_absolute",
    "doc": "True if the path is absolute (has both a root and, if applicable,"
  },
  {
    "name": "is_block_device",
    "doc": "Whether this path is a block device."
  },
  {
    "name": "is_char_device",
    "doc": "Whether this path is a character device."
  },
  {
    "name": "is_dir",
    "doc": "Whether this path is a directory."
  },
  {
    "name": "is_fifo",
    "doc": "Whether this path is a FIFO."
  },
  {
    "name": "is_file",
    "doc": "Whether this path is a regular file (also True for symlinks pointing"
  },
  {
    "name": "is_mount",
    "doc": "Check if this path is a POSIX mount point"
  },
  {
    "name": "is_relative_to",
    "doc": "Return True if the path is relative to another path or False."
  },
  {
    "name": "is_reserved",
    "doc": "Return True if the path contains one of the special names reserved"
  },
  {
    "name": "is_socket",
    "doc": "Whether this path is a socket."
  },
  {
    "name": "is_symlink",
    "doc": "Whether this path is a symbolic link."
  },
  {
    "name": "iterdir",
    "doc": "Iterate over the files in this directory.  Does not yield any"
  },
  {
    "name": "joinpath",
    "doc": "Combine this path with one or several arguments, and return a"
  },
  {
    "name": "lchmod",
    "doc": "Like chmod(), except if the path points to a symlink, the symlink's"
  },
  {
    "name": "link_to",
    "doc": "Make the target path a hard link pointing to this path."
  },
  {
    "name": "lstat",
    "doc": "Like stat(), except if the path points to a symlink, the symlink's"
  },
  {
    "name": "match",
    "doc": "Return True if this path matches the given pattern."
  },
  {
    "name": "mkdir",
    "doc": "Create a new directory at this given path."
  },
  {
    "name": "open",
    "doc": "Open the file pointed by this path and return a file object, as"
  },
  {
    "name": "owner",
    "doc": "Return the login name of the file owner."
  },
  {
    "name": "read_bytes",
    "doc": "Open the file in bytes mode, read it, and close the file."
  },
  {
    "name": "read_text",
    "doc": "Open the file in text mode, read it, and close the file."
  },
  {
    "name": "readlink",
    "doc": "Return the path to which the symbolic link points."
  },
  {
    "name": "relative_to",
    "doc": "Return the relative path to another path identified by the passed"
  },
  {
    "name": "rename",
    "doc": "Rename this path to the target path."
  },
  {
    "name": "replace",
    "doc": "Rename this path to the target path, overwriting if that path exists."
  },
  {
    "name": "resolve",
    "doc": "Make the path absolute, resolving all symlinks on the way and also"
  },
  {
    "name": "rglob",
    "doc": "Recursively yield all existing files (of any kind, including"
  },
  {
    "name": "rmdir",
    "doc": "Remove this directory.  The directory must be empty."
  },
  {
    "name": "samefile",
    "doc": "Return whether other_path is the same or not as this file"
  },
  {
    "name": "stat",
    "doc": "Return the result of the stat() system call on this path, like"
  },
  {
    "name": "symlink_to",
    "doc": "Make this path a symlink pointing to the target path."
  },
  {
    "name": "touch",
    "doc": "Create this file with the given access mode, if it doesn't exist."
  },
  {
    "name": "unlink",
    "doc": "Remove this file or link."
  },
  {
    "name": "with_name",
    "doc": "Return a new path with the file name changed."
  },
  {
    "name": "with_stem",
    "doc": "Return a new path with the stem changed."
  },
  {
    "name": "with_suffix",
    "doc": "Return a new path with the file suffix changed.  If the path"
  },
  {
    "name": "write_bytes",
    "doc": "Open the file in bytes mode, write to it, and close the file."
  },
  {
    "name": "write_text",
    "doc": "Open the file in text mode, write to it, and close the file."
  },
  {
    "name": "_format_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parts",
    "doc": ""
  },
  {
    "name": "_make_child",
    "doc": ""
  },
  {
    "name": "_make_child_relpath",
    "doc": ""
  },
  {
    "name": "_parse_args",
    "doc": ""
  },
  {
    "name": "_scandir",
    "doc": ""
  },
  {
    "name": "absolute",
    "doc": "Return an absolute version of this path by prepending the current"
  },
  {
    "name": "as_posix",
    "doc": "Return the string representation of the path with forward (/)"
  },
  {
    "name": "as_uri",
    "doc": "Return the path as a 'file' URI."
  },
  {
    "name": "chmod",
    "doc": "Change the permissions of the path, like os.chmod()."
  },
  {
    "name": "cwd",
    "doc": "Return a new path pointing to the current working directory"
  },
  {
    "name": "exists",
    "doc": "Whether this path exists."
  },
  {
    "name": "expanduser",
    "doc": "Return a new path with expanded ~ and ~user constructs"
  },
  {
    "name": "glob",
    "doc": "Iterate over this subtree and yield all existing files (of any"
  },
  {
    "name": "group",
    "doc": "Return the group name of the file gid."
  },
  {
    "name": "hardlink_to",
    "doc": "Make this path a hard link pointing to the same file as *target*."
  },
  {
    "name": "home",
    "doc": "Return a new path pointing to the user's home directory (as"
  },
  {
    "name": "is_absolute",
    "doc": "True if the path is absolute (has both a root and, if applicable,"
  },
  {
    "name": "is_block_device",
    "doc": "Whether this path is a block device."
  },
  {
    "name": "is_char_device",
    "doc": "Whether this path is a character device."
  },
  {
    "name": "is_dir",
    "doc": "Whether this path is a directory."
  },
  {
    "name": "is_fifo",
    "doc": "Whether this path is a FIFO."
  },
  {
    "name": "is_file",
    "doc": "Whether this path is a regular file (also True for symlinks pointing"
  },
  {
    "name": "is_mount",
    "doc": "Check if this path is a POSIX mount point"
  },
  {
    "name": "is_relative_to",
    "doc": "Return True if the path is relative to another path or False."
  },
  {
    "name": "is_reserved",
    "doc": "Return True if the path contains one of the special names reserved"
  },
  {
    "name": "is_socket",
    "doc": "Whether this path is a socket."
  },
  {
    "name": "is_symlink",
    "doc": "Whether this path is a symbolic link."
  },
  {
    "name": "iterdir",
    "doc": "Iterate over the files in this directory.  Does not yield any"
  },
  {
    "name": "joinpath",
    "doc": "Combine this path with one or several arguments, and return a"
  },
  {
    "name": "lchmod",
    "doc": "Like chmod(), except if the path points to a symlink, the symlink's"
  },
  {
    "name": "link_to",
    "doc": "Make the target path a hard link pointing to this path."
  },
  {
    "name": "lstat",
    "doc": "Like stat(), except if the path points to a symlink, the symlink's"
  },
  {
    "name": "match",
    "doc": "Return True if this path matches the given pattern."
  },
  {
    "name": "mkdir",
    "doc": "Create a new directory at this given path."
  },
  {
    "name": "open",
    "doc": "Open the file pointed by this path and return a file object, as"
  },
  {
    "name": "owner",
    "doc": "Return the login name of the file owner."
  },
  {
    "name": "read_bytes",
    "doc": "Open the file in bytes mode, read it, and close the file."
  },
  {
    "name": "read_text",
    "doc": "Open the file in text mode, read it, and close the file."
  },
  {
    "name": "readlink",
    "doc": "Return the path to which the symbolic link points."
  },
  {
    "name": "relative_to",
    "doc": "Return the relative path to another path identified by the passed"
  },
  {
    "name": "rename",
    "doc": "Rename this path to the target path."
  },
  {
    "name": "replace",
    "doc": "Rename this path to the target path, overwriting if that path exists."
  },
  {
    "name": "resolve",
    "doc": "Make the path absolute, resolving all symlinks on the way and also"
  },
  {
    "name": "rglob",
    "doc": "Recursively yield all existing files (of any kind, including"
  },
  {
    "name": "rmdir",
    "doc": "Remove this directory.  The directory must be empty."
  },
  {
    "name": "samefile",
    "doc": "Return whether other_path is the same or not as this file"
  },
  {
    "name": "stat",
    "doc": "Return the result of the stat() system call on this path, like"
  },
  {
    "name": "symlink_to",
    "doc": "Make this path a symlink pointing to the target path."
  },
  {
    "name": "touch",
    "doc": "Create this file with the given access mode, if it doesn't exist."
  },
  {
    "name": "unlink",
    "doc": "Remove this file or link."
  },
  {
    "name": "with_name",
    "doc": "Return a new path with the file name changed."
  },
  {
    "name": "with_stem",
    "doc": "Return a new path with the stem changed."
  },
  {
    "name": "with_suffix",
    "doc": "Return a new path with the file suffix changed.  If the path"
  },
  {
    "name": "write_bytes",
    "doc": "Open the file in bytes mode, write to it, and close the file."
  },
  {
    "name": "write_text",
    "doc": "Open the file in text mode, write to it, and close the file."
  },
  {
    "name": "_format_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parts",
    "doc": ""
  },
  {
    "name": "_make_child",
    "doc": ""
  },
  {
    "name": "_parse_args",
    "doc": ""
  },
  {
    "name": "as_posix",
    "doc": "Return the string representation of the path with forward (/)"
  },
  {
    "name": "as_uri",
    "doc": "Return the path as a 'file' URI."
  },
  {
    "name": "is_absolute",
    "doc": "True if the path is absolute (has both a root and, if applicable,"
  },
  {
    "name": "is_relative_to",
    "doc": "Return True if the path is relative to another path or False."
  },
  {
    "name": "is_reserved",
    "doc": "Return True if the path contains one of the special names reserved"
  },
  {
    "name": "joinpath",
    "doc": "Combine this path with one or several arguments, and return a"
  },
  {
    "name": "match",
    "doc": "Return True if this path matches the given pattern."
  },
  {
    "name": "relative_to",
    "doc": "Return the relative path to another path identified by the passed"
  },
  {
    "name": "with_name",
    "doc": "Return a new path with the file name changed."
  },
  {
    "name": "with_stem",
    "doc": "Return a new path with the stem changed."
  },
  {
    "name": "with_suffix",
    "doc": "Return a new path with the file suffix changed.  If the path"
  },
  {
    "name": "_format_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parts",
    "doc": ""
  },
  {
    "name": "_make_child",
    "doc": ""
  },
  {
    "name": "_parse_args",
    "doc": ""
  },
  {
    "name": "as_posix",
    "doc": "Return the string representation of the path with forward (/)"
  },
  {
    "name": "as_uri",
    "doc": "Return the path as a 'file' URI."
  },
  {
    "name": "is_absolute",
    "doc": "True if the path is absolute (has both a root and, if applicable,"
  },
  {
    "name": "is_relative_to",
    "doc": "Return True if the path is relative to another path or False."
  },
  {
    "name": "is_reserved",
    "doc": "Return True if the path contains one of the special names reserved"
  },
  {
    "name": "joinpath",
    "doc": "Combine this path with one or several arguments, and return a"
  },
  {
    "name": "match",
    "doc": "Return True if this path matches the given pattern."
  },
  {
    "name": "relative_to",
    "doc": "Return the relative path to another path identified by the passed"
  },
  {
    "name": "with_name",
    "doc": "Return a new path with the file name changed."
  },
  {
    "name": "with_stem",
    "doc": "Return a new path with the stem changed."
  },
  {
    "name": "with_suffix",
    "doc": "Return a new path with the file suffix changed.  If the path"
  },
  {
    "name": "_format_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parts",
    "doc": ""
  },
  {
    "name": "_make_child",
    "doc": ""
  },
  {
    "name": "_parse_args",
    "doc": ""
  },
  {
    "name": "as_posix",
    "doc": "Return the string representation of the path with forward (/)"
  },
  {
    "name": "as_uri",
    "doc": "Return the path as a 'file' URI."
  },
  {
    "name": "is_absolute",
    "doc": "True if the path is absolute (has both a root and, if applicable,"
  },
  {
    "name": "is_relative_to",
    "doc": "Return True if the path is relative to another path or False."
  },
  {
    "name": "is_reserved",
    "doc": "Return True if the path contains one of the special names reserved"
  },
  {
    "name": "joinpath",
    "doc": "Combine this path with one or several arguments, and return a"
  },
  {
    "name": "match",
    "doc": "Return True if this path matches the given pattern."
  },
  {
    "name": "relative_to",
    "doc": "Return the relative path to another path identified by the passed"
  },
  {
    "name": "with_name",
    "doc": "Return a new path with the file name changed."
  },
  {
    "name": "with_stem",
    "doc": "Return a new path with the stem changed."
  },
  {
    "name": "with_suffix",
    "doc": "Return a new path with the file suffix changed.  If the path"
  },
  {
    "name": "count",
    "doc": "S.count(value) -> integer -- return number of occurrences of value"
  },
  {
    "name": "index",
    "doc": "S.index(value, [start, [stop]]) -> integer -- return first index of value."
  },
  {
    "name": "_format_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parsed_parts",
    "doc": ""
  },
  {
    "name": "_from_parts",
    "doc": ""
  },
  {
    "name": "_make_child",
    "doc": ""
  },
  {
    "name": "_make_child_relpath",
    "doc": ""
  },
  {
    "name": "_parse_args",
    "doc": ""
  },
  {
    "name": "_scandir",
    "doc": ""
  },
  {
    "name": "absolute",
    "doc": "Return an absolute version of this path by prepending the current"
  },
  {
    "name": "as_posix",
    "doc": "Return the string representation of the path with forward (/)"
  },
  {
    "name": "as_uri",
    "doc": "Return the path as a 'file' URI."
  },
  {
    "name": "chmod",
    "doc": "Change the permissions of the path, like os.chmod()."
  },
  {
    "name": "cwd",
    "doc": "Return a new path pointing to the current working directory"
  },
  {
    "name": "exists",
    "doc": "Whether this path exists."
  },
  {
    "name": "expanduser",
    "doc": "Return a new path with expanded ~ and ~user constructs"
  },
  {
    "name": "glob",
    "doc": "Iterate over this subtree and yield all existing files (of any"
  },
  {
    "name": "group",
    "doc": "Return the group name of the file gid."
  },
  {
    "name": "hardlink_to",
    "doc": "Make this path a hard link pointing to the same file as *target*."
  },
  {
    "name": "home",
    "doc": "Return a new path pointing to the user's home directory (as"
  },
  {
    "name": "is_absolute",
    "doc": "True if the path is absolute (has both a root and, if applicable,"
  },
  {
    "name": "is_block_device",
    "doc": "Whether this path is a block device."
  },
  {
    "name": "is_char_device",
    "doc": "Whether this path is a character device."
  },
  {
    "name": "is_dir",
    "doc": "Whether this path is a directory."
  },
  {
    "name": "is_fifo",
    "doc": "Whether this path is a FIFO."
  },
  {
    "name": "is_file",
    "doc": "Whether this path is a regular file (also True for symlinks pointing"
  },
  {
    "name": "is_mount",
    "doc": "Check if this path is a POSIX mount point"
  },
  {
    "name": "is_relative_to",
    "doc": "Return True if the path is relative to another path or False."
  },
  {
    "name": "is_reserved",
    "doc": "Return True if the path contains one of the special names reserved"
  },
  {
    "name": "is_socket",
    "doc": "Whether this path is a socket."
  },
  {
    "name": "is_symlink",
    "doc": "Whether this path is a symbolic link."
  },
  {
    "name": "iterdir",
    "doc": "Iterate over the files in this directory.  Does not yield any"
  },
  {
    "name": "joinpath",
    "doc": "Combine this path with one or several arguments, and return a"
  },
  {
    "name": "lchmod",
    "doc": "Like chmod(), except if the path points to a symlink, the symlink's"
  },
  {
    "name": "link_to",
    "doc": "Make the target path a hard link pointing to this path."
  },
  {
    "name": "lstat",
    "doc": "Like stat(), except if the path points to a symlink, the symlink's"
  },
  {
    "name": "match",
    "doc": "Return True if this path matches the given pattern."
  },
  {
    "name": "mkdir",
    "doc": "Create a new directory at this given path."
  },
  {
    "name": "open",
    "doc": "Open the file pointed by this path and return a file object, as"
  },
  {
    "name": "owner",
    "doc": "Return the login name of the file owner."
  },
  {
    "name": "read_bytes",
    "doc": "Open the file in bytes mode, read it, and close the file."
  },
  {
    "name": "read_text",
    "doc": "Open the file in text mode, read it, and close the file."
  },
  {
    "name": "readlink",
    "doc": "Return the path to which the symbolic link points."
  },
  {
    "name": "relative_to",
    "doc": "Return the relative path to another path identified by the passed"
  },
  {
    "name": "rename",
    "doc": "Rename this path to the target path."
  },
  {
    "name": "replace",
    "doc": "Rename this path to the target path, overwriting if that path exists."
  },
  {
    "name": "resolve",
    "doc": "Make the path absolute, resolving all symlinks on the way and also"
  },
  {
    "name": "rglob",
    "doc": "Recursively yield all existing files (of any kind, including"
  },
  {
    "name": "rmdir",
    "doc": "Remove this directory.  The directory must be empty."
  },
  {
    "name": "samefile",
    "doc": "Return whether other_path is the same or not as this file"
  },
  {
    "name": "stat",
    "doc": "Return the result of the stat() system call on this path, like"
  },
  {
    "name": "symlink_to",
    "doc": "Make this path a symlink pointing to the target path."
  },
  {
    "name": "touch",
    "doc": "Create this file with the given access mode, if it doesn't exist."
  },
  {
    "name": "unlink",
    "doc": "Remove this file or link."
  },
  {
    "name": "with_name",
    "doc": "Return a new path with the file name changed."
  },
  {
    "name": "with_stem",
    "doc": "Return a new path with the stem changed."
  },
  {
    "name": "with_suffix",
    "doc": "Return a new path with the file suffix changed.  If the path"
  },
  {
    "name": "write_bytes",
    "doc": "Open the file in bytes mode, write to it, and close the file."
  },
  {
    "name": "write_text",
    "doc": "Open the file in text mode, write to it, and close the file."
  },
  {
    "name": "join_parsed_parts",
    "doc": "Join the two paths represented by the respective"
  },
  {
    "name": "parse_parts",
    "doc": ""
  },
  {
    "name": "count",
    "doc": "S.count(value) -> integer -- return number of occurrences of value"
  },
  {
    "name": "index",
    "doc": "S.index(value, [start, [stop]]) -> integer -- return first index of value."
  },
  {
    "name": "casefold",
    "doc": ""
  },
  {
    "name": "casefold_parts",
    "doc": ""
  },
  {
    "name": "compile_pattern",
    "doc": ""
  },
  {
    "name": "is_reserved",
    "doc": ""
  },
  {
    "name": "join_parsed_parts",
    "doc": "Join the two paths represented by the respective"
  },
  {
    "name": "make_uri",
    "doc": ""
  },
  {
    "name": "parse_parts",
    "doc": ""
  },
  {
    "name": "splitroot",
    "doc": ""
  },
  {
    "name": "_select_from",
    "doc": ""
  },
  {
    "name": "select_from",
    "doc": "Iterate over all child paths of `parent_path` matched by this"
  },
  {
    "name": "_iterate_directories",
    "doc": ""
  },
  {
    "name": "_select_from",
    "doc": ""
  },
  {
    "name": "select_from",
    "doc": "Iterate over all child paths of `parent_path` matched by this"
  },
  {
    "name": "select_from",
    "doc": "Iterate over all child paths of `parent_path` matched by this"
  },
  {
    "name": "_select_from",
    "doc": ""
  },
  {
    "name": "_select_from",
    "doc": ""
  },
  {
    "name": "select_from",
    "doc": "Iterate over all child paths of `parent_path` matched by this"
  },
  {
    "name": "_split_extended_path",
    "doc": ""
  },
  {
    "name": "casefold",
    "doc": ""
  },
  {
    "name": "casefold_parts",
    "doc": ""
  },
  {
    "name": "compile_pattern",
    "doc": ""
  },
  {
    "name": "is_reserved",
    "doc": ""
  },
  {
    "name": "join_parsed_parts",
    "doc": "Join the two paths represented by the respective"
  },
  {
    "name": "make_uri",
    "doc": ""
  },
  {
    "name": "parse_parts",
    "doc": ""
  },
  {
    "name": "splitroot",
    "doc": ""
  },
  {
    "name": "_randbelow",
    "doc": "Return a random int in the range [0,n).  Defined for n > 0."
  },
  {
    "name": "_randbelow_with_getrandbits",
    "doc": "Return a random int in the range [0,n).  Defined for n > 0."
  },
  {
    "name": "_randbelow_without_getrandbits",
    "doc": "Return a random int in the range [0,n).  Defined for n > 0."
  },
  {
    "name": "betavariate",
    "doc": "Beta distribution."
  },
  {
    "name": "choice",
    "doc": "Choose a random element from a non-empty sequence."
  },
  {
    "name": "choices",
    "doc": "Return a k sized list of population elements chosen with replacement."
  },
  {
    "name": "expovariate",
    "doc": "Exponential distribution."
  },
  {
    "name": "gammavariate",
    "doc": "Gamma distribution.  Not the gamma function!"
  },
  {
    "name": "gauss",
    "doc": "Gaussian distribution."
  },
  {
    "name": "getrandbits",
    "doc": "getrandbits(k) -> x.  Generates an int with k random bits."
  },
  {
    "name": "getstate",
    "doc": "Return internal state; can be passed to setstate() later."
  },
  {
    "name": "lognormvariate",
    "doc": "Log normal distribution."
  },
  {
    "name": "normalvariate",
    "doc": "Normal distribution."
  },
  {
    "name": "paretovariate",
    "doc": "Pareto distribution.  alpha is the shape parameter."
  },
  {
    "name": "randbytes",
    "doc": "Generate n random bytes."
  },
  {
    "name": "randint",
    "doc": "Return random integer in range [a, b], including both end points."
  },
  {
    "name": "random",
    "doc": "random() -> x in the interval [0, 1)."
  },
  {
    "name": "randrange",
    "doc": "Choose a random item from range(stop) or range(start, stop[, step])."
  },
  {
    "name": "sample",
    "doc": "Chooses k unique random elements from a population sequence."
  },
  {
    "name": "seed",
    "doc": "Initialize internal state from a seed."
  },
  {
    "name": "setstate",
    "doc": "Restore internal state from object returned by getstate()."
  },
  {
    "name": "shuffle",
    "doc": "Shuffle list x in place, and return None."
  },
  {
    "name": "triangular",
    "doc": "Triangular distribution."
  },
  {
    "name": "uniform",
    "doc": "Get a random number in the range [a, b) or [a, b] depending on rounding."
  },
  {
    "name": "vonmisesvariate",
    "doc": "Circular data distribution."
  },
  {
    "name": "weibullvariate",
    "doc": "Weibull distribution."
  },
  {
    "name": "_notimplemented",
    "doc": "Method should not be called for a system random number generator."
  },
  {
    "name": "_randbelow",
    "doc": "Return a random int in the range [0,n).  Defined for n > 0."
  },
  {
    "name": "_randbelow_with_getrandbits",
    "doc": "Return a random int in the range [0,n).  Defined for n > 0."
  },
  {
    "name": "_randbelow_without_getrandbits",
    "doc": "Return a random int in the range [0,n).  Defined for n > 0."
  },
  {
    "name": "betavariate",
    "doc": "Beta distribution."
  },
  {
    "name": "choice",
    "doc": "Choose a random element from a non-empty sequence."
  },
  {
    "name": "choices",
    "doc": "Return a k sized list of population elements chosen with replacement."
  },
  {
    "name": "expovariate",
    "doc": "Exponential distribution."
  },
  {
    "name": "gammavariate",
    "doc": "Gamma distribution.  Not the gamma function!"
  },
  {
    "name": "gauss",
    "doc": "Gaussian distribution."
  },
  {
    "name": "getrandbits",
    "doc": "getrandbits(k) -> x.  Generates an int with k random bits."
  },
  {
    "name": "getstate",
    "doc": "Method should not be called for a system random number generator."
  },
  {
    "name": "lognormvariate",
    "doc": "Log normal distribution."
  },
  {
    "name": "normalvariate",
    "doc": "Normal distribution."
  },
  {
    "name": "paretovariate",
    "doc": "Pareto distribution.  alpha is the shape parameter."
  },
  {
    "name": "randbytes",
    "doc": "Generate n random bytes."
  },
  {
    "name": "randint",
    "doc": "Return random integer in range [a, b], including both end points."
  },
  {
    "name": "random",
    "doc": "Get the next random number in the range 0.0 <= X < 1.0."
  },
  {
    "name": "randrange",
    "doc": "Choose a random item from range(stop) or range(start, stop[, step])."
  },
  {
    "name": "sample",
    "doc": "Chooses k unique random elements from a population sequence."
  },
  {
    "name": "seed",
    "doc": "Stub method.  Not used for a system random number generator."
  },
  {
    "name": "setstate",
    "doc": "Method should not be called for a system random number generator."
  },
  {
    "name": "shuffle",
    "doc": "Shuffle list x in place, and return None."
  },
  {
    "name": "triangular",
    "doc": "Triangular distribution."
  },
  {
    "name": "uniform",
    "doc": "Get a random number in the range [a, b) or [a, b] depending on rounding."
  },
  {
    "name": "vonmisesvariate",
    "doc": "Circular data distribution."
  },
  {
    "name": "weibullvariate",
    "doc": "Weibull distribution."
  },
  {
    "name": "count",
    "doc": "S.count(value) -> integer -- return number of occurrences of value"
  },
  {
    "name": "index",
    "doc": "S.index(value, [start, [stop]]) -> integer -- return first index of value."
  },
  {
    "name": "_from_iterable",
    "doc": "Construct an instance of the class from any iterable input."
  },
  {
    "name": "_hash",
    "doc": "Compute the hash value of a set."
  },
  {
    "name": "isdisjoint",
    "doc": "Return True if two sets have a null intersection."
  },
  {
    "name": "count",
    "doc": "rangeobject.count(value) -> integer -- return number of occurrences of value"
  },
  {
    "name": "index",
    "doc": "rangeobject.index(value) -> integer -- return index of value."
  },
  {
    "name": "end",
    "doc": "Return index of the end of the substring matched by group."
  },
  {
    "name": "expand",
    "doc": "Return the string obtained by doing backslash substitution on the string template, as done by the sub() method."
  },
  {
    "name": "group",
    "doc": "group([group1, ...]) -> str or tuple."
  },
  {
    "name": "groupdict",
    "doc": "Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name."
  },
  {
    "name": "groups",
    "doc": "Return a tuple containing all the subgroups of the match, from 1."
  },
  {
    "name": "span",
    "doc": "For match object m, return the 2-tuple (m.start(group), m.end(group))."
  },
  {
    "name": "start",
    "doc": "Return index of the start of the substring matched by group."
  },
  {
    "name": "findall",
    "doc": "Return a list of all non-overlapping matches of pattern in string."
  },
  {
    "name": "finditer",
    "doc": "Return an iterator over all non-overlapping matches for the RE pattern in string."
  },
  {
    "name": "fullmatch",
    "doc": "Matches against all of the string."
  },
  {
    "name": "match",
    "doc": "Matches zero or more characters at the beginning of the string."
  },
  {
    "name": "scanner",
    "doc": ""
  },
  {
    "name": "search",
    "doc": "Scan through string looking for a match, and return a corresponding match object instance."
  },
  {
    "name": "split",
    "doc": "Split string by the occurrences of pattern."
  },
  {
    "name": "sub",
    "doc": "Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl."
  },
  {
    "name": "subn",
    "doc": "Return the tuple (new_string, number_of_subs_made) found by replacing the leftmost non-overlapping occurrences of pattern with the replacement repl."
  },
  {
    "name": "as_integer_ratio",
    "doc": "Return integer ratio."
  },
  {
    "name": "bit_count",
    "doc": "Number of ones in the binary representation of the absolute value of self."
  },
  {
    "name": "bit_length",
    "doc": "Number of bits necessary to represent self in binary."
  },
  {
    "name": "conjugate",
    "doc": "Returns self, the complex conjugate of any int."
  },
  {
    "name": "from_bytes",
    "doc": "Return the integer represented by the given array of bytes."
  },
  {
    "name": "to_bytes",
    "doc": "Return an array of bytes representing an integer."
  },
  {
    "name": "scan",
    "doc": ""
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_at_fork_reinit",
    "doc": ""
  },
  {
    "name": "acquire",
    "doc": "Acquire the I/O thread lock."
  },
  {
    "name": "addFilter",
    "doc": "Add the specified filter to this handler."
  },
  {
    "name": "close",
    "doc": "Tidy up any resources used by the handler."
  },
  {
    "name": "createLock",
    "doc": "Acquire a thread lock for serializing access to the underlying I/O."
  },
  {
    "name": "emit",
    "doc": "Stub."
  },
  {
    "name": "filter",
    "doc": "Determine if a record is loggable by consulting all the filters."
  },
  {
    "name": "flush",
    "doc": "Ensure all logging output has been flushed."
  },
  {
    "name": "format",
    "doc": "Format the specified record."
  },
  {
    "name": "get_name",
    "doc": ""
  },
  {
    "name": "handle",
    "doc": "Stub."
  },
  {
    "name": "handleError",
    "doc": "Handle errors which occur during an emit() call."
  },
  {
    "name": "release",
    "doc": "Release the I/O thread lock."
  },
  {
    "name": "removeFilter",
    "doc": "Remove the specified filter from this handler."
  },
  {
    "name": "setFormatter",
    "doc": "Set the formatter for this handler."
  },
  {
    "name": "setLevel",
    "doc": "Set the logging level of this handler.  level must be an int or a str."
  },
  {
    "name": "set_name",
    "doc": ""
  },
  {
    "name": "_encode_files",
    "doc": "Build the body for a multipart/form-data request."
  },
  {
    "name": "_encode_params",
    "doc": "Encode parameters in a piece of data."
  },
  {
    "name": "_get_idna_encoded_host",
    "doc": ""
  },
  {
    "name": "copy",
    "doc": ""
  },
  {
    "name": "deregister_hook",
    "doc": "Deregister a previously registered hook."
  },
  {
    "name": "prepare",
    "doc": "Prepares the entire request with the given parameters."
  },
  {
    "name": "prepare_auth",
    "doc": "Prepares the given HTTP auth data."
  },
  {
    "name": "prepare_body",
    "doc": "Prepares the given HTTP body data."
  },
  {
    "name": "prepare_content_length",
    "doc": "Prepare Content-Length header based on request method and body"
  },
  {
    "name": "prepare_cookies",
    "doc": "Prepares the given HTTP cookie data."
  },
  {
    "name": "prepare_headers",
    "doc": "Prepares the given HTTP headers."
  },
  {
    "name": "prepare_hooks",
    "doc": "Prepares the given hooks."
  },
  {
    "name": "prepare_method",
    "doc": "Prepares the given HTTP method."
  },
  {
    "name": "prepare_url",
    "doc": "Prepares the given HTTP URL."
  },
  {
    "name": "register_hook",
    "doc": "Properly register a hook."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "deregister_hook",
    "doc": "Deregister a previously registered hook."
  },
  {
    "name": "prepare",
    "doc": "Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it."
  },
  {
    "name": "register_hook",
    "doc": "Properly register a hook."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "close",
    "doc": "Releases the connection back to the pool. Once this method has been"
  },
  {
    "name": "iter_content",
    "doc": "Iterates over the response data.  When stream=True is set on the"
  },
  {
    "name": "iter_lines",
    "doc": "Iterates over the response data, one line at a time.  When"
  },
  {
    "name": "json",
    "doc": "Decodes the JSON response body (if any) as a Python object."
  },
  {
    "name": "raise_for_status",
    "doc": "Raises :class:`HTTPError`, if one occurred."
  },
  {
    "name": "close",
    "doc": "Closes all adapters and as such the session"
  },
  {
    "name": "delete",
    "doc": "Sends a DELETE request. Returns :class:`Response` object."
  },
  {
    "name": "get",
    "doc": "Sends a GET request. Returns :class:`Response` object."
  },
  {
    "name": "get_adapter",
    "doc": "Returns the appropriate connection adapter for the given URL."
  },
  {
    "name": "get_redirect_target",
    "doc": "Receives a Response. Returns a redirect URI or ``None``"
  },
  {
    "name": "head",
    "doc": "Sends a HEAD request. Returns :class:`Response` object."
  },
  {
    "name": "merge_environment_settings",
    "doc": "Check the environment and merge it with some settings."
  },
  {
    "name": "mount",
    "doc": "Registers a connection adapter to a prefix."
  },
  {
    "name": "options",
    "doc": "Sends a OPTIONS request. Returns :class:`Response` object."
  },
  {
    "name": "patch",
    "doc": "Sends a PATCH request. Returns :class:`Response` object."
  },
  {
    "name": "post",
    "doc": "Sends a POST request. Returns :class:`Response` object."
  },
  {
    "name": "prepare_request",
    "doc": "Constructs a :class:`PreparedRequest <PreparedRequest>` for"
  },
  {
    "name": "put",
    "doc": "Sends a PUT request. Returns :class:`Response` object."
  },
  {
    "name": "rebuild_auth",
    "doc": "When being redirected we may want to strip authentication from the"
  },
  {
    "name": "rebuild_method",
    "doc": "When being redirected we may want to change the method of the request"
  },
  {
    "name": "rebuild_proxies",
    "doc": "This method re-evaluates the proxy configuration by considering the"
  },
  {
    "name": "request",
    "doc": "Constructs a :class:`Request <Request>`, prepares it and sends it."
  },
  {
    "name": "resolve_redirects",
    "doc": "Receives a Response. Returns a generator of Responses or Requests."
  },
  {
    "name": "send",
    "doc": "Send a given PreparedRequest."
  },
  {
    "name": "should_strip_auth",
    "doc": "Decide whether Authorization header should be removed when redirecting"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add",
    "doc": "Add an element to a set."
  },
  {
    "name": "clear",
    "doc": "Remove all elements from this set."
  },
  {
    "name": "copy",
    "doc": "Return a shallow copy of a set."
  },
  {
    "name": "difference",
    "doc": "Return the difference of two or more sets as a new set."
  },
  {
    "name": "difference_update",
    "doc": "Remove all elements of another set from this set."
  },
  {
    "name": "discard",
    "doc": "Remove an element from a set if it is a member."
  },
  {
    "name": "intersection",
    "doc": "Return the intersection of two sets as a new set."
  },
  {
    "name": "intersection_update",
    "doc": "Update a set with the intersection of itself and another."
  },
  {
    "name": "isdisjoint",
    "doc": "Return True if two sets have a null intersection."
  },
  {
    "name": "issubset",
    "doc": "Report whether another set contains this set."
  },
  {
    "name": "issuperset",
    "doc": "Report whether this set contains another set."
  },
  {
    "name": "pop",
    "doc": "Remove and return an arbitrary set element."
  },
  {
    "name": "remove",
    "doc": "Remove an element from a set; it must be a member."
  },
  {
    "name": "symmetric_difference",
    "doc": "Return the symmetric difference of two sets as a new set."
  },
  {
    "name": "symmetric_difference_update",
    "doc": "Update a set with the symmetric difference of itself and another."
  },
  {
    "name": "union",
    "doc": "Return the union of sets as a new set."
  },
  {
    "name": "update",
    "doc": "Update a set with the union of itself and others."
  },
  {
    "name": "indices",
    "doc": "S.indices(len) -> (start, stop, stride)"
  },
  {
    "name": "_keep_positive",
    "doc": "Internal method to strip elements with a negative or zero count"
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": "Return a shallow copy."
  },
  {
    "name": "elements",
    "doc": "Iterator over elements repeating each as many times as its count."
  },
  {
    "name": "fromkeys",
    "doc": "Create a new dictionary with keys from iterable and values set to value."
  },
  {
    "name": "get",
    "doc": "Return the value for key if key is in the dictionary, else default."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "most_common",
    "doc": "List the n most common elements and their counts from the most"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "Remove and return a (key, value) pair as a 2-tuple."
  },
  {
    "name": "setdefault",
    "doc": "Insert key with a value of default if key is not in the dictionary."
  },
  {
    "name": "subtract",
    "doc": "Like dict.update() but subtracts counts instead of replacing them."
  },
  {
    "name": "total",
    "doc": "Sum of the counts"
  },
  {
    "name": "update",
    "doc": "Like dict.update() but add counts instead of replacing them."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "adjusted",
    "doc": "Return the adjusted exponent of the number.  Defined as exp + digits - 1."
  },
  {
    "name": "as_integer_ratio",
    "doc": "Decimal.as_integer_ratio() -> (int, int)"
  },
  {
    "name": "as_tuple",
    "doc": "Return a tuple representation of the number."
  },
  {
    "name": "canonical",
    "doc": "Return the canonical encoding of the argument.  Currently, the encoding"
  },
  {
    "name": "compare",
    "doc": "Compare self to other.  Return a decimal value:"
  },
  {
    "name": "compare_signal",
    "doc": "Identical to compare, except that all NaNs signal."
  },
  {
    "name": "compare_total",
    "doc": "Compare two operands using their abstract representation rather than"
  },
  {
    "name": "compare_total_mag",
    "doc": "Compare two operands using their abstract representation rather than their"
  },
  {
    "name": "conjugate",
    "doc": "Return self."
  },
  {
    "name": "copy_abs",
    "doc": "Return the absolute value of the argument.  This operation is unaffected by"
  },
  {
    "name": "copy_negate",
    "doc": "Return the negation of the argument.  This operation is unaffected by context"
  },
  {
    "name": "copy_sign",
    "doc": "Return a copy of the first operand with the sign set to be the same as the"
  },
  {
    "name": "exp",
    "doc": "Return the value of the (natural) exponential function e**x at the given"
  },
  {
    "name": "fma",
    "doc": "Fused multiply-add.  Return self*other+third with no rounding of the"
  },
  {
    "name": "from_float",
    "doc": "Class method that converts a float to a decimal number, exactly."
  },
  {
    "name": "is_canonical",
    "doc": "Return True if the argument is canonical and False otherwise.  Currently,"
  },
  {
    "name": "is_finite",
    "doc": "Return True if the argument is a finite number, and False if the argument"
  },
  {
    "name": "is_infinite",
    "doc": "Return True if the argument is either positive or negative infinity and"
  },
  {
    "name": "is_nan",
    "doc": "Return True if the argument is a (quiet or signaling) NaN and False"
  },
  {
    "name": "is_normal",
    "doc": "Return True if the argument is a normal finite non-zero number with an"
  },
  {
    "name": "is_qnan",
    "doc": "Return True if the argument is a quiet NaN, and False otherwise."
  },
  {
    "name": "is_signed",
    "doc": "Return True if the argument has a negative sign and False otherwise."
  },
  {
    "name": "is_snan",
    "doc": "Return True if the argument is a signaling NaN and False otherwise."
  },
  {
    "name": "is_subnormal",
    "doc": "Return True if the argument is subnormal, and False otherwise. A number is"
  },
  {
    "name": "is_zero",
    "doc": "Return True if the argument is a (positive or negative) zero and False"
  },
  {
    "name": "ln",
    "doc": "Return the natural (base e) logarithm of the operand. The function always"
  },
  {
    "name": "log10",
    "doc": "Return the base ten logarithm of the operand. The function always uses the"
  },
  {
    "name": "logb",
    "doc": "For a non-zero number, return the adjusted exponent of the operand as a"
  },
  {
    "name": "logical_and",
    "doc": "Return the digit-wise 'and' of the two (logical) operands."
  },
  {
    "name": "logical_invert",
    "doc": "Return the digit-wise inversion of the (logical) operand."
  },
  {
    "name": "logical_or",
    "doc": "Return the digit-wise 'or' of the two (logical) operands."
  },
  {
    "name": "logical_xor",
    "doc": "Return the digit-wise 'exclusive or' of the two (logical) operands."
  },
  {
    "name": "max",
    "doc": "Maximum of self and other.  If one operand is a quiet NaN and the other is"
  },
  {
    "name": "max_mag",
    "doc": "Similar to the max() method, but the comparison is done using the absolute"
  },
  {
    "name": "min",
    "doc": "Minimum of self and other. If one operand is a quiet NaN and the other is"
  },
  {
    "name": "min_mag",
    "doc": "Similar to the min() method, but the comparison is done using the absolute"
  },
  {
    "name": "next_minus",
    "doc": "Return the largest number representable in the given context (or in the"
  },
  {
    "name": "next_plus",
    "doc": "Return the smallest number representable in the given context (or in the"
  },
  {
    "name": "next_toward",
    "doc": "If the two operands are unequal, return the number closest to the first"
  },
  {
    "name": "normalize",
    "doc": "Normalize the number by stripping the rightmost trailing zeros and"
  },
  {
    "name": "number_class",
    "doc": "Return a string describing the class of the operand.  The returned value"
  },
  {
    "name": "quantize",
    "doc": "Return a value equal to the first operand after rounding and having the"
  },
  {
    "name": "radix",
    "doc": "Return Decimal(10), the radix (base) in which the Decimal class does"
  },
  {
    "name": "remainder_near",
    "doc": "Return the remainder from dividing self by other.  This differs from"
  },
  {
    "name": "rotate",
    "doc": "Return the result of rotating the digits of the first operand by an amount"
  },
  {
    "name": "same_quantum",
    "doc": "Test whether self and other have the same exponent or whether both are NaN."
  },
  {
    "name": "scaleb",
    "doc": "Return the first operand with the exponent adjusted the second.  Equivalently,"
  },
  {
    "name": "shift",
    "doc": "Return the result of shifting the digits of the first operand by an amount"
  },
  {
    "name": "sqrt",
    "doc": "Return the square root of the argument to full precision. The result is"
  },
  {
    "name": "to_eng_string",
    "doc": "Convert to an engineering-type string.  Engineering notation has an exponent"
  },
  {
    "name": "to_integral",
    "doc": "Identical to the to_integral_value() method.  The to_integral() name has been"
  },
  {
    "name": "to_integral_exact",
    "doc": "Round to the nearest integer, signaling Inexact or Rounded as appropriate if"
  },
  {
    "name": "to_integral_value",
    "doc": "Round to the nearest integer without signaling Inexact or Rounded.  The"
  },
  {
    "name": "_add",
    "doc": "a + b"
  },
  {
    "name": "_div",
    "doc": "a / b"
  },
  {
    "name": "_divmod",
    "doc": "(a // b, a % b)"
  },
  {
    "name": "_floordiv",
    "doc": "a // b"
  },
  {
    "name": "_mod",
    "doc": "a % b"
  },
  {
    "name": "_mul",
    "doc": "a * b"
  },
  {
    "name": "_operator_fallbacks",
    "doc": "Generates forward and reverse operators given a purely-rational"
  },
  {
    "name": "_richcmp",
    "doc": "Helper for comparison operators, for internal use only."
  },
  {
    "name": "_sub",
    "doc": "a - b"
  },
  {
    "name": "as_integer_ratio",
    "doc": "Return the integer ratio as a tuple."
  },
  {
    "name": "conjugate",
    "doc": "Conjugate is a no-op for Reals."
  },
  {
    "name": "from_decimal",
    "doc": "Converts a finite Decimal instance to a rational number, exactly."
  },
  {
    "name": "from_float",
    "doc": "Converts a finite float to a rational number, exactly."
  },
  {
    "name": "limit_denominator",
    "doc": "Closest Fraction to self with denominator at most max_denominator."
  },
  {
    "name": "_asdict",
    "doc": "Return a new dict which maps field names to their values."
  },
  {
    "name": "_make",
    "doc": "Make a new LinearRegression object from a sequence or iterable"
  },
  {
    "name": "_replace",
    "doc": "Return a new LinearRegression object replacing specified fields with new values"
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "cdf",
    "doc": "Cumulative distribution function.  P(X <= x)"
  },
  {
    "name": "from_samples",
    "doc": "Make a normal distribution instance from sample data."
  },
  {
    "name": "inv_cdf",
    "doc": "Inverse cumulative distribution function.  x : P(X <= x) = p"
  },
  {
    "name": "overlap",
    "doc": "Compute the overlapping coefficient (OVL) between two normal distributions."
  },
  {
    "name": "pdf",
    "doc": "Probability density function.  P(x <= X < x+dx) / dx"
  },
  {
    "name": "quantiles",
    "doc": "Divide into *n* continuous intervals with equal probability."
  },
  {
    "name": "samples",
    "doc": "Generate *n* samples for a given mean and standard deviation."
  },
  {
    "name": "zscore",
    "doc": "Compute the Standard Score.  (x - mean) / stdev"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": "D.copy() -> a shallow copy of D."
  },
  {
    "name": "fromkeys",
    "doc": "Create a new dictionary with keys from iterable and values set to value."
  },
  {
    "name": "get",
    "doc": "Return the value for key if key is in the dictionary, else default."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "Remove and return a (key, value) pair as a 2-tuple."
  },
  {
    "name": "setdefault",
    "doc": "Insert key with a value of default if key is not in the dictionary."
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "capitalize",
    "doc": "Return a capitalized version of the string."
  },
  {
    "name": "casefold",
    "doc": "Return a version of the string suitable for caseless comparisons."
  },
  {
    "name": "center",
    "doc": "Return a centered string of length width."
  },
  {
    "name": "count",
    "doc": "S.count(sub[, start[, end]]) -> int"
  },
  {
    "name": "encode",
    "doc": "Encode the string using the codec registered for encoding."
  },
  {
    "name": "endswith",
    "doc": "S.endswith(suffix[, start[, end]]) -> bool"
  },
  {
    "name": "expandtabs",
    "doc": "Return a copy where all tab characters are expanded using spaces."
  },
  {
    "name": "find",
    "doc": "S.find(sub[, start[, end]]) -> int"
  },
  {
    "name": "format",
    "doc": "S.format(*args, **kwargs) -> str"
  },
  {
    "name": "format_map",
    "doc": "S.format_map(mapping) -> str"
  },
  {
    "name": "index",
    "doc": "S.index(sub[, start[, end]]) -> int"
  },
  {
    "name": "isalnum",
    "doc": "Return True if the string is an alpha-numeric string, False otherwise."
  },
  {
    "name": "isalpha",
    "doc": "Return True if the string is an alphabetic string, False otherwise."
  },
  {
    "name": "isascii",
    "doc": "Return True if all characters in the string are ASCII, False otherwise."
  },
  {
    "name": "isdecimal",
    "doc": "Return True if the string is a decimal string, False otherwise."
  },
  {
    "name": "isdigit",
    "doc": "Return True if the string is a digit string, False otherwise."
  },
  {
    "name": "isidentifier",
    "doc": "Return True if the string is a valid Python identifier, False otherwise."
  },
  {
    "name": "islower",
    "doc": "Return True if the string is a lowercase string, False otherwise."
  },
  {
    "name": "isnumeric",
    "doc": "Return True if the string is a numeric string, False otherwise."
  },
  {
    "name": "isprintable",
    "doc": "Return True if the string is printable, False otherwise."
  },
  {
    "name": "isspace",
    "doc": "Return True if the string is a whitespace string, False otherwise."
  },
  {
    "name": "istitle",
    "doc": "Return True if the string is a title-cased string, False otherwise."
  },
  {
    "name": "isupper",
    "doc": "Return True if the string is an uppercase string, False otherwise."
  },
  {
    "name": "join",
    "doc": "Concatenate any number of strings."
  },
  {
    "name": "ljust",
    "doc": "Return a left-justified string of length width."
  },
  {
    "name": "lower",
    "doc": "Return a copy of the string converted to lowercase."
  },
  {
    "name": "lstrip",
    "doc": "Return a copy of the string with leading whitespace removed."
  },
  {
    "name": "maketrans",
    "doc": "Return a translation table usable for str.translate()."
  },
  {
    "name": "partition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "removeprefix",
    "doc": "Return a str with the given prefix string removed if present."
  },
  {
    "name": "removesuffix",
    "doc": "Return a str with the given suffix string removed if present."
  },
  {
    "name": "replace",
    "doc": "Return a copy with all occurrences of substring old replaced by new."
  },
  {
    "name": "rfind",
    "doc": "S.rfind(sub[, start[, end]]) -> int"
  },
  {
    "name": "rindex",
    "doc": "S.rindex(sub[, start[, end]]) -> int"
  },
  {
    "name": "rjust",
    "doc": "Return a right-justified string of length width."
  },
  {
    "name": "rpartition",
    "doc": "Partition the string into three parts using the given separator."
  },
  {
    "name": "rsplit",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "rstrip",
    "doc": "Return a copy of the string with trailing whitespace removed."
  },
  {
    "name": "split",
    "doc": "Return a list of the substrings in the string, using sep as the separator string."
  },
  {
    "name": "splitlines",
    "doc": "Return a list of the lines in the string, breaking at line boundaries."
  },
  {
    "name": "startswith",
    "doc": "S.startswith(prefix[, start[, end]]) -> bool"
  },
  {
    "name": "strip",
    "doc": "Return a copy of the string with leading and trailing whitespace removed."
  },
  {
    "name": "swapcase",
    "doc": "Convert uppercase characters to lowercase and lowercase characters to uppercase."
  },
  {
    "name": "title",
    "doc": "Return a version of the string where each word is titlecased."
  },
  {
    "name": "translate",
    "doc": "Replace each character in the string using the given translation table."
  },
  {
    "name": "upper",
    "doc": "Return a copy of the string converted to uppercase."
  },
  {
    "name": "zfill",
    "doc": "Pad a numeric string with zeros on the left, to fill a field of the given width."
  },
  {
    "name": "_vformat",
    "doc": ""
  },
  {
    "name": "check_unused_args",
    "doc": ""
  },
  {
    "name": "convert_field",
    "doc": ""
  },
  {
    "name": "format",
    "doc": ""
  },
  {
    "name": "format_field",
    "doc": ""
  },
  {
    "name": "get_field",
    "doc": ""
  },
  {
    "name": "get_value",
    "doc": ""
  },
  {
    "name": "parse",
    "doc": ""
  },
  {
    "name": "vformat",
    "doc": ""
  },
  {
    "name": "_invalid",
    "doc": ""
  },
  {
    "name": "get_identifiers",
    "doc": ""
  },
  {
    "name": "is_valid",
    "doc": ""
  },
  {
    "name": "safe_substitute",
    "doc": ""
  },
  {
    "name": "substitute",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": "Clear maps[0], leaving maps[1:] intact."
  },
  {
    "name": "copy",
    "doc": "New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]"
  },
  {
    "name": "fromkeys",
    "doc": "Create a ChainMap with a single dict created from the iterable."
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "new_child",
    "doc": "New ChainMap with a new map followed by all previous maps."
  },
  {
    "name": "pop",
    "doc": "Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0]."
  },
  {
    "name": "popitem",
    "doc": "Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty."
  },
  {
    "name": "setdefault",
    "doc": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D"
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "check_returncode",
    "doc": "Raise CalledProcessError if the exit code is non-zero."
  },
  {
    "name": "_check_timeout",
    "doc": "Convenience for checking if a timeout has expired."
  },
  {
    "name": "_close_pipe_fds",
    "doc": ""
  },
  {
    "name": "_communicate",
    "doc": ""
  },
  {
    "name": "_execute_child",
    "doc": "Execute program (POSIX version)"
  },
  {
    "name": "_get_devnull",
    "doc": ""
  },
  {
    "name": "_get_handles",
    "doc": "Construct and return tuple with IO objects:"
  },
  {
    "name": "_handle_exitstatus",
    "doc": "All callers to this function MUST hold self._waitpid_lock."
  },
  {
    "name": "_internal_poll",
    "doc": "Check if child process has terminated.  Returns returncode"
  },
  {
    "name": "_on_error_fd_closer",
    "doc": "Helper to ensure file descriptors opened in _get_handles are closed"
  },
  {
    "name": "_posix_spawn",
    "doc": "Execute program using os.posix_spawn()."
  },
  {
    "name": "_remaining_time",
    "doc": "Convenience for _communicate when computing timeouts."
  },
  {
    "name": "_save_input",
    "doc": ""
  },
  {
    "name": "_stdin_write",
    "doc": ""
  },
  {
    "name": "_translate_newlines",
    "doc": ""
  },
  {
    "name": "_try_wait",
    "doc": "All callers to this function MUST hold self._waitpid_lock."
  },
  {
    "name": "_wait",
    "doc": "Internal implementation of wait() on POSIX."
  },
  {
    "name": "communicate",
    "doc": "Interact with process: Send data to stdin and close it."
  },
  {
    "name": "kill",
    "doc": "Kill the process with SIGKILL"
  },
  {
    "name": "poll",
    "doc": "Check if child process has terminated. Set and return returncode"
  },
  {
    "name": "send_signal",
    "doc": "Send a signal to the process."
  },
  {
    "name": "terminate",
    "doc": "Terminate the process with SIGTERM"
  },
  {
    "name": "wait",
    "doc": "Wait for child process to terminate; returns self.returncode."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_fileobj_lookup",
    "doc": "Return a file descriptor from a file object."
  },
  {
    "name": "_key_from_fd",
    "doc": "Return the key associated to a given file descriptor."
  },
  {
    "name": "_selector_cls",
    "doc": "Returns a polling object."
  },
  {
    "name": "close",
    "doc": "Close the selector."
  },
  {
    "name": "get_key",
    "doc": "Return the key associated to a registered file object."
  },
  {
    "name": "get_map",
    "doc": "Return a mapping of file objects to selector keys."
  },
  {
    "name": "modify",
    "doc": "Change a registered file object monitored events or attached data."
  },
  {
    "name": "register",
    "doc": "Register a file object."
  },
  {
    "name": "select",
    "doc": "Perform the actual selection, until some monitored file objects are"
  },
  {
    "name": "unregister",
    "doc": "Unregister a file object."
  },
  {
    "name": "create_module",
    "doc": "Create a built-in module"
  },
  {
    "name": "exec_module",
    "doc": "Exec a built-in module"
  },
  {
    "name": "find_module",
    "doc": "Find the built-in module."
  },
  {
    "name": "find_spec",
    "doc": ""
  },
  {
    "name": "get_code",
    "doc": "Return None as built-in modules do not have code objects."
  },
  {
    "name": "get_source",
    "doc": "Return None as built-in modules do not have source code."
  },
  {
    "name": "is_package",
    "doc": "Return False as built-in modules are never packages."
  },
  {
    "name": "load_module",
    "doc": "Load the specified module into sys.modules and return it."
  },
  {
    "name": "module_repr",
    "doc": "Return repr for the module."
  },
  {
    "name": "_break",
    "doc": ""
  },
  {
    "name": "_enter",
    "doc": ""
  },
  {
    "name": "_exit",
    "doc": ""
  },
  {
    "name": "_release",
    "doc": ""
  },
  {
    "name": "_wait",
    "doc": ""
  },
  {
    "name": "abort",
    "doc": "Place the barrier into a 'broken' state."
  },
  {
    "name": "reset",
    "doc": "Reset the barrier to the initial state."
  },
  {
    "name": "wait",
    "doc": "Wait for the barrier."
  },
  {
    "name": "acquire",
    "doc": "Acquire a semaphore, decrementing the internal counter by one."
  },
  {
    "name": "release",
    "doc": "Release a semaphore, incrementing the internal counter by one or more."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_acquire_restore",
    "doc": ""
  },
  {
    "name": "_at_fork_reinit",
    "doc": ""
  },
  {
    "name": "_is_owned",
    "doc": ""
  },
  {
    "name": "_release_save",
    "doc": ""
  },
  {
    "name": "notify",
    "doc": "Wake up one or more threads waiting on this condition, if any."
  },
  {
    "name": "notifyAll",
    "doc": "Wake up all threads waiting on this condition."
  },
  {
    "name": "notify_all",
    "doc": "Wake up all threads waiting on this condition."
  },
  {
    "name": "wait",
    "doc": "Wait until notified or until a timeout occurs."
  },
  {
    "name": "wait_for",
    "doc": "Wait until a condition evaluates to True."
  },
  {
    "name": "_at_fork_reinit",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": "Reset the internal flag to false."
  },
  {
    "name": "isSet",
    "doc": "Return true if and only if the internal flag is true."
  },
  {
    "name": "is_set",
    "doc": "Return true if and only if the internal flag is true."
  },
  {
    "name": "set",
    "doc": "Set the internal flag to true."
  },
  {
    "name": "wait",
    "doc": "Block until the internal flag is true."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "acquire",
    "doc": "Acquire a semaphore, decrementing the internal counter by one."
  },
  {
    "name": "release",
    "doc": "Release a semaphore, incrementing the internal counter by one or more."
  },
  {
    "name": "_bootstrap",
    "doc": ""
  },
  {
    "name": "_bootstrap_inner",
    "doc": ""
  },
  {
    "name": "_delete",
    "doc": "Remove current thread from the dict of currently running threads."
  },
  {
    "name": "_reset_internal_locks",
    "doc": ""
  },
  {
    "name": "_set_ident",
    "doc": ""
  },
  {
    "name": "_set_native_id",
    "doc": ""
  },
  {
    "name": "_set_tstate_lock",
    "doc": "Set a lock object which will be released by the interpreter when"
  },
  {
    "name": "_stop",
    "doc": ""
  },
  {
    "name": "_wait_for_tstate_lock",
    "doc": ""
  },
  {
    "name": "getName",
    "doc": "Return a string used for identification purposes only."
  },
  {
    "name": "isDaemon",
    "doc": "Return whether this thread is a daemon."
  },
  {
    "name": "is_alive",
    "doc": "Return whether the thread is alive."
  },
  {
    "name": "join",
    "doc": "Wait until the thread terminates."
  },
  {
    "name": "run",
    "doc": "Method representing the thread's activity."
  },
  {
    "name": "setDaemon",
    "doc": "Set whether this thread is a daemon."
  },
  {
    "name": "setName",
    "doc": "Set the name string for this thread."
  },
  {
    "name": "start",
    "doc": "Start the thread's activity."
  },
  {
    "name": "add_note",
    "doc": "Exception.add_note(note) --"
  },
  {
    "name": "with_traceback",
    "doc": "Exception.with_traceback(tb) --"
  },
  {
    "name": "_bootstrap",
    "doc": ""
  },
  {
    "name": "_bootstrap_inner",
    "doc": ""
  },
  {
    "name": "_delete",
    "doc": "Remove current thread from the dict of currently running threads."
  },
  {
    "name": "_reset_internal_locks",
    "doc": ""
  },
  {
    "name": "_set_ident",
    "doc": ""
  },
  {
    "name": "_set_native_id",
    "doc": ""
  },
  {
    "name": "_set_tstate_lock",
    "doc": "Set a lock object which will be released by the interpreter when"
  },
  {
    "name": "_stop",
    "doc": ""
  },
  {
    "name": "_wait_for_tstate_lock",
    "doc": ""
  },
  {
    "name": "cancel",
    "doc": "Stop the timer if it hasn't finished yet."
  },
  {
    "name": "getName",
    "doc": "Return a string used for identification purposes only."
  },
  {
    "name": "isDaemon",
    "doc": "Return whether this thread is a daemon."
  },
  {
    "name": "is_alive",
    "doc": "Return whether the thread is alive."
  },
  {
    "name": "join",
    "doc": "Wait until the thread terminates."
  },
  {
    "name": "run",
    "doc": "Method representing the thread's activity."
  },
  {
    "name": "setDaemon",
    "doc": "Set whether this thread is a daemon."
  },
  {
    "name": "setName",
    "doc": "Set the name string for this thread."
  },
  {
    "name": "start",
    "doc": "Start the thread's activity."
  },
  {
    "name": "_commit_removals",
    "doc": ""
  },
  {
    "name": "add",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": ""
  },
  {
    "name": "copy",
    "doc": ""
  },
  {
    "name": "difference",
    "doc": ""
  },
  {
    "name": "difference_update",
    "doc": ""
  },
  {
    "name": "discard",
    "doc": ""
  },
  {
    "name": "intersection",
    "doc": ""
  },
  {
    "name": "intersection_update",
    "doc": ""
  },
  {
    "name": "isdisjoint",
    "doc": ""
  },
  {
    "name": "issubset",
    "doc": ""
  },
  {
    "name": "issuperset",
    "doc": ""
  },
  {
    "name": "pop",
    "doc": ""
  },
  {
    "name": "remove",
    "doc": ""
  },
  {
    "name": "symmetric_difference",
    "doc": ""
  },
  {
    "name": "symmetric_difference_update",
    "doc": ""
  },
  {
    "name": "union",
    "doc": ""
  },
  {
    "name": "update",
    "doc": ""
  },
  {
    "name": "_acquire_restore",
    "doc": "_acquire_restore(state) -> None"
  },
  {
    "name": "_at_fork_reinit",
    "doc": ""
  },
  {
    "name": "_is_owned",
    "doc": "_is_owned() -> bool"
  },
  {
    "name": "_release_save",
    "doc": "_release_save() -> tuple"
  },
  {
    "name": "acquire",
    "doc": "acquire(blocking=True) -> bool"
  },
  {
    "name": "release",
    "doc": "release()"
  },
  {
    "name": "_bootstrap",
    "doc": ""
  },
  {
    "name": "_bootstrap_inner",
    "doc": ""
  },
  {
    "name": "_delete",
    "doc": "Remove current thread from the dict of currently running threads."
  },
  {
    "name": "_reset_internal_locks",
    "doc": ""
  },
  {
    "name": "_set_ident",
    "doc": ""
  },
  {
    "name": "_set_native_id",
    "doc": ""
  },
  {
    "name": "_set_tstate_lock",
    "doc": "Set a lock object which will be released by the interpreter when"
  },
  {
    "name": "_stop",
    "doc": ""
  },
  {
    "name": "_wait_for_tstate_lock",
    "doc": ""
  },
  {
    "name": "getName",
    "doc": "Return a string used for identification purposes only."
  },
  {
    "name": "isDaemon",
    "doc": "Return whether this thread is a daemon."
  },
  {
    "name": "is_alive",
    "doc": "Return whether the thread is alive."
  },
  {
    "name": "join",
    "doc": "Wait until the thread terminates."
  },
  {
    "name": "run",
    "doc": "Method representing the thread's activity."
  },
  {
    "name": "setDaemon",
    "doc": "Set whether this thread is a daemon."
  },
  {
    "name": "setName",
    "doc": "Set the name string for this thread."
  },
  {
    "name": "start",
    "doc": "Start the thread's activity."
  },
  {
    "name": "_bootstrap",
    "doc": ""
  },
  {
    "name": "_bootstrap_inner",
    "doc": ""
  },
  {
    "name": "_delete",
    "doc": "Remove current thread from the dict of currently running threads."
  },
  {
    "name": "_reset_internal_locks",
    "doc": ""
  },
  {
    "name": "_set_ident",
    "doc": ""
  },
  {
    "name": "_set_native_id",
    "doc": ""
  },
  {
    "name": "_set_tstate_lock",
    "doc": "Set a lock object which will be released by the interpreter when"
  },
  {
    "name": "_stop",
    "doc": ""
  },
  {
    "name": "_wait_for_tstate_lock",
    "doc": ""
  },
  {
    "name": "getName",
    "doc": "Return a string used for identification purposes only."
  },
  {
    "name": "isDaemon",
    "doc": "Return whether this thread is a daemon."
  },
  {
    "name": "is_alive",
    "doc": "Return whether the thread is alive."
  },
  {
    "name": "join",
    "doc": "Wait until the thread terminates."
  },
  {
    "name": "run",
    "doc": "Method representing the thread's activity."
  },
  {
    "name": "setDaemon",
    "doc": "Set whether this thread is a daemon."
  },
  {
    "name": "setName",
    "doc": "Set the name string for this thread."
  },
  {
    "name": "start",
    "doc": "Start the thread's activity."
  },
  {
    "name": "_acquire_restore",
    "doc": ""
  },
  {
    "name": "_at_fork_reinit",
    "doc": ""
  },
  {
    "name": "_is_owned",
    "doc": ""
  },
  {
    "name": "_release_save",
    "doc": ""
  },
  {
    "name": "acquire",
    "doc": "Acquire a lock, blocking or non-blocking."
  },
  {
    "name": "release",
    "doc": "Release a lock, decrementing the recursion level."
  },
  {
    "name": "_acquire_restore",
    "doc": ""
  },
  {
    "name": "_at_fork_reinit",
    "doc": ""
  },
  {
    "name": "_is_owned",
    "doc": ""
  },
  {
    "name": "_release_save",
    "doc": ""
  },
  {
    "name": "acquire",
    "doc": "Acquire a lock, blocking or non-blocking."
  },
  {
    "name": "release",
    "doc": "Release a lock, decrementing the recursion level."
  },
  {
    "name": "append",
    "doc": "Add an element to the right side of the deque."
  },
  {
    "name": "appendleft",
    "doc": "Add an element to the left side of the deque."
  },
  {
    "name": "clear",
    "doc": "Remove all elements from the deque."
  },
  {
    "name": "copy",
    "doc": "Return a shallow copy of a deque."
  },
  {
    "name": "count",
    "doc": "D.count(value) -- return number of occurrences of value"
  },
  {
    "name": "extend",
    "doc": "Extend the right side of the deque with elements from the iterable"
  },
  {
    "name": "extendleft",
    "doc": "Extend the left side of the deque with elements from the iterable"
  },
  {
    "name": "index",
    "doc": "D.index(value, [start, [stop]]) -- return first index of value."
  },
  {
    "name": "insert",
    "doc": "D.insert(index, object) -- insert object before index"
  },
  {
    "name": "pop",
    "doc": "Remove and return the rightmost element."
  },
  {
    "name": "popleft",
    "doc": "Remove and return the leftmost element."
  },
  {
    "name": "remove",
    "doc": "D.remove(value) -- remove first occurrence of value."
  },
  {
    "name": "reverse",
    "doc": "D.reverse() -- reverse *IN PLACE*"
  },
  {
    "name": "rotate",
    "doc": "Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left."
  },
  {
    "name": "create_module",
    "doc": "Create a built-in module"
  },
  {
    "name": "exec_module",
    "doc": "Exec a built-in module"
  },
  {
    "name": "find_module",
    "doc": "Find the built-in module."
  },
  {
    "name": "find_spec",
    "doc": ""
  },
  {
    "name": "get_code",
    "doc": "Return None as built-in modules do not have code objects."
  },
  {
    "name": "get_source",
    "doc": "Return None as built-in modules do not have source code."
  },
  {
    "name": "is_package",
    "doc": "Return False as built-in modules are never packages."
  },
  {
    "name": "load_module",
    "doc": "Load the specified module into sys.modules and return it."
  },
  {
    "name": "module_repr",
    "doc": "Return repr for the module."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "count",
    "doc": "Return number of occurrences of value."
  },
  {
    "name": "index",
    "doc": "Return first index of value."
  },
  {
    "name": "mro",
    "doc": "Return a type's method resolution order."
  },
  {
    "name": "aclose",
    "doc": "aclose() -> raise GeneratorExit inside generator."
  },
  {
    "name": "asend",
    "doc": "asend(v) -> send 'v' in generator."
  },
  {
    "name": "athrow",
    "doc": "athrow(typ[,val[,tb]]) -> raise exception in generator."
  },
  {
    "name": "_varname_from_oparg",
    "doc": "(internal-only) Return the local variable name for the given oparg."
  },
  {
    "name": "co_lines",
    "doc": ""
  },
  {
    "name": "co_positions",
    "doc": ""
  },
  {
    "name": "replace",
    "doc": "Return a copy of the code object with new values for the specified fields."
  },
  {
    "name": "close",
    "doc": "close() -> raise GeneratorExit inside coroutine."
  },
  {
    "name": "send",
    "doc": "send(arg) -> send 'arg' into coroutine,"
  },
  {
    "name": "throw",
    "doc": "throw(value)"
  },
  {
    "name": "deleter",
    "doc": ""
  },
  {
    "name": "getter",
    "doc": ""
  },
  {
    "name": "setter",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": "F.clear(): clear most references held by the frame"
  },
  {
    "name": "close",
    "doc": "close() -> raise GeneratorExit inside generator."
  },
  {
    "name": "send",
    "doc": "send(arg) -> send 'arg' into generator,"
  },
  {
    "name": "throw",
    "doc": "throw(value)"
  },
  {
    "name": "copy",
    "doc": "D.copy() -> a shallow copy of D"
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "close",
    "doc": ""
  },
  {
    "name": "send",
    "doc": ""
  },
  {
    "name": "throw",
    "doc": ""
  },
  {
    "name": "_commit_removals",
    "doc": ""
  },
  {
    "name": "_scrub_removals",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": ""
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "keyrefs",
    "doc": "Return a list of weak references to the keys."
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "D.popitem() -> (k, v), remove and return some (key, value) pair"
  },
  {
    "name": "setdefault",
    "doc": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D"
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "_commit_removals",
    "doc": ""
  },
  {
    "name": "add",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": ""
  },
  {
    "name": "copy",
    "doc": ""
  },
  {
    "name": "difference",
    "doc": ""
  },
  {
    "name": "difference_update",
    "doc": ""
  },
  {
    "name": "discard",
    "doc": ""
  },
  {
    "name": "intersection",
    "doc": ""
  },
  {
    "name": "intersection_update",
    "doc": ""
  },
  {
    "name": "isdisjoint",
    "doc": ""
  },
  {
    "name": "issubset",
    "doc": ""
  },
  {
    "name": "issuperset",
    "doc": ""
  },
  {
    "name": "pop",
    "doc": ""
  },
  {
    "name": "remove",
    "doc": ""
  },
  {
    "name": "symmetric_difference",
    "doc": ""
  },
  {
    "name": "symmetric_difference_update",
    "doc": ""
  },
  {
    "name": "union",
    "doc": ""
  },
  {
    "name": "update",
    "doc": ""
  },
  {
    "name": "_commit_removals",
    "doc": ""
  },
  {
    "name": "clear",
    "doc": "D.clear() -> None.  Remove all items from D."
  },
  {
    "name": "copy",
    "doc": ""
  },
  {
    "name": "get",
    "doc": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None."
  },
  {
    "name": "items",
    "doc": "D.items() -> a set-like object providing a view on D's items"
  },
  {
    "name": "itervaluerefs",
    "doc": "Return an iterator that yields the weak references to the values."
  },
  {
    "name": "keys",
    "doc": "D.keys() -> a set-like object providing a view on D's keys"
  },
  {
    "name": "pop",
    "doc": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value."
  },
  {
    "name": "popitem",
    "doc": "D.popitem() -> (k, v), remove and return some (key, value) pair"
  },
  {
    "name": "setdefault",
    "doc": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D"
  },
  {
    "name": "update",
    "doc": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F."
  },
  {
    "name": "valuerefs",
    "doc": "Return a list of weak references to the values."
  },
  {
    "name": "values",
    "doc": "D.values() -> an object providing a view on D's values"
  },
  {
    "name": "_Info",
    "doc": ""
  },
  {
    "name": "_exitfunc",
    "doc": ""
  },
  {
    "name": "_select_for_exit",
    "doc": ""
  },
  {
    "name": "detach",
    "doc": "If alive then mark as dead and return (obj, func, args, kwargs);"
  },
  {
    "name": "peek",
    "doc": "If alive then return (obj, func, args, kwargs);"
  }
]
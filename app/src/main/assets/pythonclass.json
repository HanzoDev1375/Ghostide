[
  {
    "name": "ArithmeticError",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "AssertionError",
    "doc": "Assertion failed."
  },
  {
    "name": "AttributeError",
    "doc": "Attribute not found."
  },
  {
    "name": "BaseException",
    "doc": "Common base class for all exceptions"
  },
  {
    "name": "BaseExceptionGroup",
    "doc": "A combination of multiple unrelated exceptions."
  },
  {
    "name": "BlockingIOError",
    "doc": "I/O operation would block."
  },
  {
    "name": "BrokenPipeError",
    "doc": "Broken pipe."
  },
  {
    "name": "BufferError",
    "doc": "Buffer error."
  },
  {
    "name": "BytesWarning",
    "doc": "Base class for warnings about bytes and buffer related problems, mostly"
  },
  {
    "name": "ChildProcessError",
    "doc": "Child process error."
  },
  {
    "name": "ConnectionAbortedError",
    "doc": "Connection aborted."
  },
  {
    "name": "ConnectionError",
    "doc": "Connection error."
  },
  {
    "name": "ConnectionRefusedError",
    "doc": "Connection refused."
  },
  {
    "name": "ConnectionResetError",
    "doc": "Connection reset."
  },
  {
    "name": "DeprecationWarning",
    "doc": "Base class for warnings about deprecated features."
  },
  {
    "name": "EOFError",
    "doc": "Read beyond end of file."
  },
  {
    "name": "EncodingWarning",
    "doc": "Base class for warnings about encodings."
  },
  {
    "name": "EnvironmentError",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "Exception",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "ExceptionGroup",
    "doc": "A combination of multiple unrelated exceptions."
  },
  {
    "name": "FileExistsError",
    "doc": "File already exists."
  },
  {
    "name": "FileNotFoundError",
    "doc": "File not found."
  },
  {
    "name": "FloatingPointError",
    "doc": "Floating point operation failed."
  },
  {
    "name": "FutureWarning",
    "doc": "Base class for warnings about constructs that will change semantically"
  },
  {
    "name": "GeneratorExit",
    "doc": "Request that a generator exit."
  },
  {
    "name": "IOError",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "ImportError",
    "doc": "Import can't find module, or can't find name in module."
  },
  {
    "name": "ImportWarning",
    "doc": "Base class for warnings about probable mistakes in module imports"
  },
  {
    "name": "IndentationError",
    "doc": "Improper indentation."
  },
  {
    "name": "IndexError",
    "doc": "Sequence index out of range."
  },
  {
    "name": "InterruptedError",
    "doc": "Interrupted by signal."
  },
  {
    "name": "IsADirectoryError",
    "doc": "Operation doesn't work on directories."
  },
  {
    "name": "KeyError",
    "doc": "Mapping key not found."
  },
  {
    "name": "KeyboardInterrupt",
    "doc": "Program interrupted by user."
  },
  {
    "name": "LookupError",
    "doc": "Base class for lookup errors."
  },
  {
    "name": "MemoryError",
    "doc": "Out of memory."
  },
  {
    "name": "ModuleNotFoundError",
    "doc": "Module not found."
  },
  {
    "name": "NameError",
    "doc": "Name not found globally."
  },
  {
    "name": "NotADirectoryError",
    "doc": "Operation only works on directories."
  },
  {
    "name": "NotImplementedError",
    "doc": "Method or function hasn't been implemented yet."
  },
  {
    "name": "OSError",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "OverflowError",
    "doc": "Result too large to be represented."
  },
  {
    "name": "PendingDeprecationWarning",
    "doc": "Base class for warnings about features which will be deprecated"
  },
  {
    "name": "PermissionError",
    "doc": "Not enough permissions."
  },
  {
    "name": "ProcessLookupError",
    "doc": "Process not found."
  },
  {
    "name": "RecursionError",
    "doc": "Recursion limit exceeded."
  },
  {
    "name": "ReferenceError",
    "doc": "Weak ref proxy used after referent went away."
  },
  {
    "name": "ResourceWarning",
    "doc": "Base class for warnings about resource usage."
  },
  {
    "name": "RuntimeError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "RuntimeWarning",
    "doc": "Base class for warnings about dubious runtime behavior."
  },
  {
    "name": "StopAsyncIteration",
    "doc": "Signal the end from iterator.__anext__()."
  },
  {
    "name": "StopIteration",
    "doc": "Signal the end from iterator.__next__()."
  },
  {
    "name": "SyntaxError",
    "doc": "Invalid syntax."
  },
  {
    "name": "SyntaxWarning",
    "doc": "Base class for warnings about dubious syntax."
  },
  {
    "name": "SystemError",
    "doc": "Internal error in the Python interpreter."
  },
  {
    "name": "SystemExit",
    "doc": "Request to exit from the interpreter."
  },
  {
    "name": "TabError",
    "doc": "Improper mixture of spaces and tabs."
  },
  {
    "name": "TimeoutError",
    "doc": "Timeout expired."
  },
  {
    "name": "TypeError",
    "doc": "Inappropriate argument type."
  },
  {
    "name": "UnboundLocalError",
    "doc": "Local name referenced but not bound to a value."
  },
  {
    "name": "UnicodeDecodeError",
    "doc": "Unicode decoding error."
  },
  {
    "name": "UnicodeEncodeError",
    "doc": "Unicode encoding error."
  },
  {
    "name": "UnicodeError",
    "doc": "Unicode related error."
  },
  {
    "name": "UnicodeTranslateError",
    "doc": "Unicode translation error."
  },
  {
    "name": "UnicodeWarning",
    "doc": "Base class for warnings about Unicode related problems, mostly"
  },
  {
    "name": "UserWarning",
    "doc": "Base class for warnings generated by user code."
  },
  {
    "name": "ValueError",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "Warning",
    "doc": "Base class for warning categories."
  },
  {
    "name": "ZeroDivisionError",
    "doc": "Second argument to a division or modulo operation was zero."
  },
  {
    "name": "bool",
    "doc": "bool(x) -> bool"
  },
  {
    "name": "bytearray",
    "doc": "bytearray(iterable_of_ints) -> bytearray"
  },
  {
    "name": "bytes",
    "doc": "bytes(iterable_of_ints) -> bytes"
  },
  {
    "name": "classmethod",
    "doc": "classmethod(function) -> method"
  },
  {
    "name": "complex",
    "doc": "Create a complex number from a real part and an optional imaginary part."
  },
  {
    "name": "dict",
    "doc": "dict() -> new empty dictionary"
  },
  {
    "name": "enumerate",
    "doc": "Return an enumerate object."
  },
  {
    "name": "filter",
    "doc": "filter(function or None, iterable) --> filter object"
  },
  {
    "name": "float",
    "doc": "Convert a string or number to a floating point number, if possible."
  },
  {
    "name": "frozenset",
    "doc": "frozenset() -> empty frozenset object"
  },
  {
    "name": "int",
    "doc": "int([x]) -> integer"
  },
  {
    "name": "list",
    "doc": "Built-in mutable sequence."
  },
  {
    "name": "map",
    "doc": "map(func, *iterables) --> map object"
  },
  {
    "name": "memoryview",
    "doc": "Create a new memoryview object which references the given object."
  },
  {
    "name": "object",
    "doc": "The base class of the class hierarchy."
  },
  {
    "name": "property",
    "doc": "Property attribute."
  },
  {
    "name": "range",
    "doc": "range(stop) -> range object"
  },
  {
    "name": "reversed",
    "doc": "Return a reverse iterator over the values of the given sequence."
  },
  {
    "name": "set",
    "doc": "set() -> new empty set object"
  },
  {
    "name": "slice",
    "doc": "slice(stop)"
  },
  {
    "name": "staticmethod",
    "doc": "staticmethod(function) -> method"
  },
  {
    "name": "str",
    "doc": "str(object='') -> str"
  },
  {
    "name": "super",
    "doc": "super() -> same as super(__class__, <first argument>)"
  },
  {
    "name": "tuple",
    "doc": "Built-in immutable sequence."
  },
  {
    "name": "type",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "zip",
    "doc": "zip(*iterables, strict=False) --> Yield tuples until an input is exhausted."
  },
  {
    "name": "_Feature",
    "doc": ""
  },
  {
    "name": "TestFrozenUtf8_1",
    "doc": "Â¶"
  },
  {
    "name": "TestFrozenUtf8_2",
    "doc": "Ï€"
  },
  {
    "name": "TestFrozenUtf8_4",
    "doc": "ðŸ˜€"
  },
  {
    "name": "Future",
    "doc": "This class is *almost* compatible with concurrent.futures.Future."
  },
  {
    "name": "Task",
    "doc": "A coroutine wrapped in a Future."
  },
  {
    "name": "blake2b",
    "doc": "Return a new BLAKE2b hash object."
  },
  {
    "name": "blake2s",
    "doc": "Return a new BLAKE2s hash object."
  },
  {
    "name": "Popen",
    "doc": ""
  },
  {
    "name": "BZ2Compressor",
    "doc": "Create a compressor object for compressing data incrementally."
  },
  {
    "name": "BZ2Decompressor",
    "doc": "Create a decompressor object for decompressing data incrementally."
  },
  {
    "name": "ABCMeta",
    "doc": "Metaclass for defining Abstract Base Classes (ABCs)."
  },
  {
    "name": "AsyncGenerator",
    "doc": ""
  },
  {
    "name": "AsyncIterable",
    "doc": ""
  },
  {
    "name": "AsyncIterator",
    "doc": ""
  },
  {
    "name": "Awaitable",
    "doc": ""
  },
  {
    "name": "ByteString",
    "doc": "This unifies bytes and bytearray."
  },
  {
    "name": "Callable",
    "doc": ""
  },
  {
    "name": "Collection",
    "doc": ""
  },
  {
    "name": "Container",
    "doc": ""
  },
  {
    "name": "Coroutine",
    "doc": ""
  },
  {
    "name": "EllipsisType",
    "doc": ""
  },
  {
    "name": "FunctionType",
    "doc": "Create a function object."
  },
  {
    "name": "Generator",
    "doc": ""
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "Hashable",
    "doc": ""
  },
  {
    "name": "ItemsView",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "Iterable",
    "doc": ""
  },
  {
    "name": "Iterator",
    "doc": ""
  },
  {
    "name": "KeysView",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "Mapping",
    "doc": "A Mapping is a generic container for associating key/value"
  },
  {
    "name": "MappingView",
    "doc": ""
  },
  {
    "name": "MutableMapping",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "MutableSequence",
    "doc": "All the operations on a read-write sequence."
  },
  {
    "name": "MutableSet",
    "doc": "A mutable set is a finite, iterable container."
  },
  {
    "name": "Reversible",
    "doc": ""
  },
  {
    "name": "Sequence",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "Set",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "Sized",
    "doc": ""
  },
  {
    "name": "ValuesView",
    "doc": ""
  },
  {
    "name": "_CallableGenericAlias",
    "doc": "Represent `Callable[argtypes, resulttype]`."
  },
  {
    "name": "async_generator",
    "doc": ""
  },
  {
    "name": "bytearray_iterator",
    "doc": ""
  },
  {
    "name": "bytes_iterator",
    "doc": ""
  },
  {
    "name": "coroutine",
    "doc": ""
  },
  {
    "name": "dict_itemiterator",
    "doc": ""
  },
  {
    "name": "dict_items",
    "doc": ""
  },
  {
    "name": "dict_keyiterator",
    "doc": ""
  },
  {
    "name": "dict_keys",
    "doc": ""
  },
  {
    "name": "dict_valueiterator",
    "doc": ""
  },
  {
    "name": "dict_values",
    "doc": ""
  },
  {
    "name": "generator",
    "doc": ""
  },
  {
    "name": "list_iterator",
    "doc": ""
  },
  {
    "name": "list_reverseiterator",
    "doc": ""
  },
  {
    "name": "longrange_iterator",
    "doc": ""
  },
  {
    "name": "mappingproxy",
    "doc": ""
  },
  {
    "name": "range_iterator",
    "doc": ""
  },
  {
    "name": "set_iterator",
    "doc": ""
  },
  {
    "name": "str_iterator",
    "doc": ""
  },
  {
    "name": "tuple_iterator",
    "doc": ""
  },
  {
    "name": "zip_iterator",
    "doc": "zip(*iterables, strict=False) --> Yield tuples until an input is exhausted."
  },
  {
    "name": "BaseStream",
    "doc": "Mode-checking helper functions."
  },
  {
    "name": "DecompressReader",
    "doc": "Adapts the decompressor API to a RawIOBase reader API"
  },
  {
    "name": "Context",
    "doc": ""
  },
  {
    "name": "ContextVar",
    "doc": ""
  },
  {
    "name": "Token",
    "doc": ""
  },
  {
    "name": "Dialect",
    "doc": "CSV dialect"
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Reader",
    "doc": "CSV reader"
  },
  {
    "name": "Writer",
    "doc": "CSV writer"
  },
  {
    "name": "ArgumentError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Array",
    "doc": "XXX to be provided"
  },
  {
    "name": "CFuncPtr",
    "doc": "Function Pointer"
  },
  {
    "name": "Structure",
    "doc": "Structure base class"
  },
  {
    "name": "Union",
    "doc": "Union base class"
  },
  {
    "name": "_Pointer",
    "doc": "XXX to be provided"
  },
  {
    "name": "_SimpleCData",
    "doc": "XXX to be provided"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "window",
    "doc": ""
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "panel",
    "doc": ""
  },
  {
    "name": "date",
    "doc": "date(year, month, day) --> date object"
  },
  {
    "name": "datetime",
    "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])"
  },
  {
    "name": "time",
    "doc": "time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object"
  },
  {
    "name": "timedelta",
    "doc": "Difference between two datetime values."
  },
  {
    "name": "timezone",
    "doc": "Fixed offset from UTC implementation of tzinfo."
  },
  {
    "name": "tzinfo",
    "doc": "Abstract base class for time zone info objects."
  },
  {
    "name": "Clamped",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Context",
    "doc": "The context affects almost all operations and controls rounding,"
  },
  {
    "name": "ConversionSyntax",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Decimal",
    "doc": "Construct a new Decimal object. 'value' can be an integer, string, tuple,"
  },
  {
    "name": "DecimalException",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "DecimalTuple",
    "doc": "DecimalTuple(sign, digits, exponent)"
  },
  {
    "name": "DivisionByZero",
    "doc": "Second argument to a division or modulo operation was zero."
  },
  {
    "name": "DivisionImpossible",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "DivisionUndefined",
    "doc": "Second argument to a division or modulo operation was zero."
  },
  {
    "name": "FloatOperation",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Inexact",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "InvalidContext",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "InvalidOperation",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Overflow",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Rounded",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Subnormal",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Underflow",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "DistutilsMetaFinder",
    "doc": ""
  },
  {
    "name": "_TrivialRe",
    "doc": ""
  },
  {
    "name": "shim",
    "doc": ""
  },
  {
    "name": "Element",
    "doc": ""
  },
  {
    "name": "ParseError",
    "doc": "Invalid syntax."
  },
  {
    "name": "TreeBuilder",
    "doc": ""
  },
  {
    "name": "XMLParser",
    "doc": ""
  },
  {
    "name": "error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "HASH",
    "doc": "A hash is an object used to calculate a checksum of a string of information."
  },
  {
    "name": "HASHXOF",
    "doc": "A hash is an object used to calculate a checksum of a string of information."
  },
  {
    "name": "HMAC",
    "doc": "The object used to calculate HMAC of a message."
  },
  {
    "name": "UnsupportedDigestmodError",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "make_encoder",
    "doc": "_iterencode(obj, _current_indent_level) -> iterable"
  },
  {
    "name": "make_scanner",
    "doc": "JSON scanner object"
  },
  {
    "name": "Profiler",
    "doc": "Profiler(timer=None, timeunit=None, subcalls=True, builtins=True)"
  },
  {
    "name": "profiler_entry",
    "doc": "Built-in immutable sequence."
  },
  {
    "name": "profiler_subentry",
    "doc": "Built-in immutable sequence."
  },
  {
    "name": "LZMACompressor",
    "doc": "LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None)"
  },
  {
    "name": "LZMADecompressor",
    "doc": "Create a decompressor object for decompressing data incrementally."
  },
  {
    "name": "LZMAError",
    "doc": "Call to liblzma failed."
  },
  {
    "name": "ParserBase",
    "doc": "Parser base class which provides some common support methods used"
  },
  {
    "name": "MD5Type",
    "doc": ""
  },
  {
    "name": "MultibyteIncrementalDecoder",
    "doc": ""
  },
  {
    "name": "MultibyteIncrementalEncoder",
    "doc": ""
  },
  {
    "name": "MultibyteStreamReader",
    "doc": ""
  },
  {
    "name": "MultibyteStreamWriter",
    "doc": ""
  },
  {
    "name": "SemLock",
    "doc": "Semaphore/Mutex type"
  },
  {
    "name": "PickleBuffer",
    "doc": "Wrapper for potentially out-of-band buffers"
  },
  {
    "name": "PickleError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Pickler",
    "doc": "This takes a binary file for writing a pickle data stream."
  },
  {
    "name": "PicklingError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Unpickler",
    "doc": "This takes a binary file for reading a pickle data stream."
  },
  {
    "name": "UnpicklingError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "ABCMeta",
    "doc": "Metaclass for defining Abstract Base Classes (ABCs)."
  },
  {
    "name": "WeakSet",
    "doc": ""
  },
  {
    "name": "Clamped",
    "doc": "Exponent of a 0 changed to fit bounds."
  },
  {
    "name": "Context",
    "doc": "Contains the context for a Decimal instance."
  },
  {
    "name": "ConversionSyntax",
    "doc": "Trying to convert badly formed string."
  },
  {
    "name": "Decimal",
    "doc": "Floating point class for decimal arithmetic."
  },
  {
    "name": "DecimalException",
    "doc": "Base exception class."
  },
  {
    "name": "DecimalTuple",
    "doc": "DecimalTuple(sign, digits, exponent)"
  },
  {
    "name": "DivisionByZero",
    "doc": "Division by 0."
  },
  {
    "name": "DivisionImpossible",
    "doc": "Cannot perform the division adequately."
  },
  {
    "name": "DivisionUndefined",
    "doc": "Undefined result of division."
  },
  {
    "name": "FloatOperation",
    "doc": "Enable stricter semantics for mixing floats and Decimals."
  },
  {
    "name": "Inexact",
    "doc": "Had to round, losing information."
  },
  {
    "name": "InvalidContext",
    "doc": "Invalid context.  Unknown rounding, for example."
  },
  {
    "name": "InvalidOperation",
    "doc": "An invalid operation was performed."
  },
  {
    "name": "Overflow",
    "doc": "Numerical overflow."
  },
  {
    "name": "Rounded",
    "doc": "Number got rounded (not  necessarily changed during rounding)."
  },
  {
    "name": "Subnormal",
    "doc": "Exponent < Emin before rounding."
  },
  {
    "name": "Underflow",
    "doc": "Numerical underflow with result rounded to 0."
  },
  {
    "name": "_ContextManager",
    "doc": "Context manager class to support localcontext()."
  },
  {
    "name": "_Log10Memoize",
    "doc": "Class to compute, store, and allow retrieval of, digits of the"
  },
  {
    "name": "_WorkRep",
    "doc": ""
  },
  {
    "name": "BlockingIOError",
    "doc": "I/O operation would block."
  },
  {
    "name": "BufferedIOBase",
    "doc": "Base class for buffered IO objects."
  },
  {
    "name": "BufferedRWPair",
    "doc": "A buffered reader and writer object together."
  },
  {
    "name": "BufferedRandom",
    "doc": "A buffered interface to random access streams."
  },
  {
    "name": "BufferedReader",
    "doc": "BufferedReader(raw[, buffer_size])"
  },
  {
    "name": "BufferedWriter",
    "doc": "A buffer for a writeable sequential RawIO object."
  },
  {
    "name": "BytesIO",
    "doc": "Buffered I/O implementation using an in-memory bytes buffer."
  },
  {
    "name": "FileIO",
    "doc": "Base class for raw binary I/O."
  },
  {
    "name": "IOBase",
    "doc": "The abstract base class for all I/O classes."
  },
  {
    "name": "IncrementalNewlineDecoder",
    "doc": "Codec used when reading a file in universal newlines mode.  It wraps"
  },
  {
    "name": "RawIOBase",
    "doc": "Base class for raw binary I/O."
  },
  {
    "name": "StringIO",
    "doc": "Text I/O implementation using an in-memory buffer."
  },
  {
    "name": "TextIOBase",
    "doc": "Base class for text I/O."
  },
  {
    "name": "TextIOWrapper",
    "doc": "Character and line based layer over a BufferedIOBase object, buffer."
  },
  {
    "name": "UnsupportedOperation",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "_BufferedIOMixin",
    "doc": "A mixin implementation of BufferedIOBase with an underlying raw stream."
  },
  {
    "name": "Empty",
    "doc": "Exception raised by Queue.get(block=0)/get_nowait()."
  },
  {
    "name": "SimpleQueue",
    "doc": "Simple, unbounded, reentrant FIFO queue."
  },
  {
    "name": "Random",
    "doc": "Random() -> create a random number generator with its own internal state."
  },
  {
    "name": "SHA1Type",
    "doc": ""
  },
  {
    "name": "SHA224Type",
    "doc": ""
  },
  {
    "name": "SHA256Type",
    "doc": ""
  },
  {
    "name": "sha3_224",
    "doc": "sha3_224([data], *, usedforsecurity=True) -> SHA3 object"
  },
  {
    "name": "sha3_256",
    "doc": "sha3_256([data], *, usedforsecurity=True) -> SHA3 object"
  },
  {
    "name": "sha3_384",
    "doc": "sha3_384([data], *, usedforsecurity=True) -> SHA3 object"
  },
  {
    "name": "sha3_512",
    "doc": "sha3_512([data], *, usedforsecurity=True) -> SHA3 object"
  },
  {
    "name": "shake_128",
    "doc": "shake_128([data], *, usedforsecurity=True) -> SHAKE object"
  },
  {
    "name": "shake_256",
    "doc": "shake_256([data], *, usedforsecurity=True) -> SHAKE object"
  },
  {
    "name": "SHA384Type",
    "doc": ""
  },
  {
    "name": "Quitter",
    "doc": ""
  },
  {
    "name": "_Helper",
    "doc": "Define the builtin 'help'."
  },
  {
    "name": "_Printer",
    "doc": "interactive prompt objects for printing the license text, a list of"
  },
  {
    "name": "SocketType",
    "doc": "socket(family=AF_INET, type=SOCK_STREAM, proto=0) -> socket object"
  },
  {
    "name": "error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "gaierror",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "herror",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "socket",
    "doc": "socket(family=AF_INET, type=SOCK_STREAM, proto=0) -> socket object"
  },
  {
    "name": "timeout",
    "doc": "Timeout expired."
  },
  {
    "name": "Certificate",
    "doc": ""
  },
  {
    "name": "MemoryBIO",
    "doc": ""
  },
  {
    "name": "SSLCertVerificationError",
    "doc": "A certificate could not be verified."
  },
  {
    "name": "SSLEOFError",
    "doc": "SSL/TLS connection terminated abruptly."
  },
  {
    "name": "SSLError",
    "doc": "An error occurred in the SSL implementation."
  },
  {
    "name": "SSLSession",
    "doc": ""
  },
  {
    "name": "SSLSyscallError",
    "doc": "System error when attempting SSL operation."
  },
  {
    "name": "SSLWantReadError",
    "doc": "Non-blocking SSL socket needs to read more data"
  },
  {
    "name": "SSLWantWriteError",
    "doc": "Non-blocking SSL socket needs to write more data"
  },
  {
    "name": "SSLZeroReturnError",
    "doc": "SSL/TLS session closed cleanly."
  },
  {
    "name": "_SSLContext",
    "doc": ""
  },
  {
    "name": "_SSLSocket",
    "doc": ""
  },
  {
    "name": "LocaleTime",
    "doc": "Stores and handles locale-specific information related to time."
  },
  {
    "name": "TimeRE",
    "doc": "Handle conversion from format directives to regexes."
  },
  {
    "name": "datetime_date",
    "doc": "date(year, month, day) --> date object"
  },
  {
    "name": "datetime_timedelta",
    "doc": "Difference between two datetime values."
  },
  {
    "name": "datetime_timezone",
    "doc": "Fixed offset from UTC implementation of tzinfo."
  },
  {
    "name": "Struct",
    "doc": "Struct(fmt) --> compiled struct object"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "ndarray",
    "doc": ""
  },
  {
    "name": "staticarray",
    "doc": ""
  },
  {
    "name": "ContainerNoGC",
    "doc": ""
  },
  {
    "name": "Generic",
    "doc": ""
  },
  {
    "name": "GenericAlias",
    "doc": ""
  },
  {
    "name": "HeapCTypeSetattr",
    "doc": "A heap type without GC, but with overridden __setattr__."
  },
  {
    "name": "HeapCTypeSubclass",
    "doc": "Subclass of HeapCType, without GC."
  },
  {
    "name": "HeapCTypeSubclassWithFinalizer",
    "doc": "Subclass of HeapCType with a finalizer that reassigns __class__."
  },
  {
    "name": "HeapCTypeWithBuffer",
    "doc": "Heap type with buffer support."
  },
  {
    "name": "HeapCTypeWithDict",
    "doc": ""
  },
  {
    "name": "HeapCTypeWithDict2",
    "doc": ""
  },
  {
    "name": "HeapCTypeWithNegativeDict",
    "doc": ""
  },
  {
    "name": "HeapCTypeWithWeakref",
    "doc": ""
  },
  {
    "name": "HeapCTypeWithWeakref2",
    "doc": ""
  },
  {
    "name": "HeapDocCType",
    "doc": "somedoc"
  },
  {
    "name": "HeapGcCType",
    "doc": "A heap type with GC, and with overridden dealloc."
  },
  {
    "name": "MethClass",
    "doc": "Class with class methods to test calling conventions"
  },
  {
    "name": "MethInstance",
    "doc": "Class with normal (instance) methods to test calling conventions"
  },
  {
    "name": "MethStatic",
    "doc": "Class with static methods to test calling conventions"
  },
  {
    "name": "MethodDescriptor2",
    "doc": ""
  },
  {
    "name": "MethodDescriptorBase",
    "doc": ""
  },
  {
    "name": "MethodDescriptorDerived",
    "doc": ""
  },
  {
    "name": "MethodDescriptorNopGet",
    "doc": ""
  },
  {
    "name": "MyList",
    "doc": "Built-in mutable sequence."
  },
  {
    "name": "NullTpDocType",
    "doc": ""
  },
  {
    "name": "RecursingInfinitelyError",
    "doc": "Instantiating this exception starts infinite recursion."
  },
  {
    "name": "_test_structmembersType",
    "doc": "Type containing all structmember types"
  },
  {
    "name": "awaitType",
    "doc": "C level type with tp_as_async"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "instancemethod",
    "doc": "Bind a function to a class."
  },
  {
    "name": "ipowType",
    "doc": ""
  },
  {
    "name": "matmulType",
    "doc": "C level type with matrix operations defined"
  },
  {
    "name": "Example",
    "doc": "The Example type"
  },
  {
    "name": "Str",
    "doc": "str(object='') -> str"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "_localimpl",
    "doc": "A class managing thread-local dicts"
  },
  {
    "name": "local",
    "doc": ""
  },
  {
    "name": "ref",
    "doc": ""
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "WeakSet",
    "doc": ""
  },
  {
    "name": "_IterationGuard",
    "doc": ""
  },
  {
    "name": "ref",
    "doc": ""
  },
  {
    "name": "ChannelClosedError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "ChannelEmptyError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "ChannelError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "ChannelID",
    "doc": "A channel ID identifies a channel and may be used as an int."
  },
  {
    "name": "ChannelNotEmptyError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "ChannelNotFoundError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "InterpreterID",
    "doc": "A interpreter ID identifies a interpreter and may be used as an int."
  },
  {
    "name": "RunFailedError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "ZoneInfo",
    "doc": "Abstract base class for time zone info objects."
  },
  {
    "name": "ABC",
    "doc": "Helper class that provides a standard way to create an ABC using"
  },
  {
    "name": "ABCMeta",
    "doc": "Metaclass for defining Abstract Base Classes (ABCs)."
  },
  {
    "name": "abstractclassmethod",
    "doc": "A decorator indicating abstract classmethods."
  },
  {
    "name": "abstractproperty",
    "doc": "A decorator indicating abstract properties."
  },
  {
    "name": "abstractstaticmethod",
    "doc": "A decorator indicating abstract staticmethods."
  },
  {
    "name": "Aifc_read",
    "doc": ""
  },
  {
    "name": "Aifc_write",
    "doc": ""
  },
  {
    "name": "Chunk",
    "doc": ""
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "_aifc_params",
    "doc": "_aifc_params(nchannels, sampwidth, framerate, nframes, comptype, compname)"
  },
  {
    "name": "Action",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "ArgumentDefaultsHelpFormatter",
    "doc": "Help message formatter which adds default values to argument help."
  },
  {
    "name": "ArgumentError",
    "doc": "An error from creating or using an argument (optional or positional)."
  },
  {
    "name": "ArgumentParser",
    "doc": "Object for parsing command line strings into Python objects."
  },
  {
    "name": "ArgumentTypeError",
    "doc": "An error from trying to convert a command line string to a type."
  },
  {
    "name": "BooleanOptionalAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "FileType",
    "doc": "Factory for creating file object types"
  },
  {
    "name": "HelpFormatter",
    "doc": "Formatter for generating usage messages and argument help strings."
  },
  {
    "name": "MetavarTypeHelpFormatter",
    "doc": "Help message formatter which uses the argument 'type' as the default"
  },
  {
    "name": "Namespace",
    "doc": "Simple object for storing attributes."
  },
  {
    "name": "RawDescriptionHelpFormatter",
    "doc": "Help message formatter which retains any formatting in descriptions."
  },
  {
    "name": "RawTextHelpFormatter",
    "doc": "Help message formatter which retains formatting of all help text."
  },
  {
    "name": "_ActionsContainer",
    "doc": ""
  },
  {
    "name": "_AppendAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_AppendConstAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_ArgumentGroup",
    "doc": ""
  },
  {
    "name": "_AttributeHolder",
    "doc": "Abstract base class that provides __repr__."
  },
  {
    "name": "_CountAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_ExtendAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_HelpAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_MutuallyExclusiveGroup",
    "doc": ""
  },
  {
    "name": "_StoreAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_StoreConstAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_StoreFalseAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_StoreTrueAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_SubParsersAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "_VersionAction",
    "doc": "Information about how to convert command line strings to Python objects."
  },
  {
    "name": "ArrayType",
    "doc": "array(typecode [, initializer]) -> array"
  },
  {
    "name": "array",
    "doc": "array(typecode [, initializer]) -> array"
  },
  {
    "name": "AST",
    "doc": ""
  },
  {
    "name": "Add",
    "doc": "Add"
  },
  {
    "name": "And",
    "doc": "And"
  },
  {
    "name": "AnnAssign",
    "doc": "AnnAssign(expr target, expr annotation, expr? value, int simple)"
  },
  {
    "name": "Assert",
    "doc": "Assert(expr test, expr? msg)"
  },
  {
    "name": "Assign",
    "doc": "Assign(expr* targets, expr value, string? type_comment)"
  },
  {
    "name": "AsyncFor",
    "doc": "AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)"
  },
  {
    "name": "AsyncFunctionDef",
    "doc": "AsyncFunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)"
  },
  {
    "name": "AsyncWith",
    "doc": "AsyncWith(withitem* items, stmt* body, string? type_comment)"
  },
  {
    "name": "Attribute",
    "doc": "Attribute(expr value, identifier attr, expr_context ctx)"
  },
  {
    "name": "AugAssign",
    "doc": "AugAssign(expr target, operator op, expr value)"
  },
  {
    "name": "AugLoad",
    "doc": "Deprecated AST node class.  Unused in Python 3."
  },
  {
    "name": "AugStore",
    "doc": "Deprecated AST node class.  Unused in Python 3."
  },
  {
    "name": "Await",
    "doc": "Await(expr value)"
  },
  {
    "name": "BinOp",
    "doc": "BinOp(expr left, operator op, expr right)"
  },
  {
    "name": "BitAnd",
    "doc": "BitAnd"
  },
  {
    "name": "BitOr",
    "doc": "BitOr"
  },
  {
    "name": "BitXor",
    "doc": "BitXor"
  },
  {
    "name": "BoolOp",
    "doc": "BoolOp(boolop op, expr* values)"
  },
  {
    "name": "Break",
    "doc": "Break"
  },
  {
    "name": "Bytes",
    "doc": "Deprecated AST node class. Use ast.Constant instead"
  },
  {
    "name": "Call",
    "doc": "Call(expr func, expr* args, keyword* keywords)"
  },
  {
    "name": "ClassDef",
    "doc": "ClassDef(identifier name, expr* bases, keyword* keywords, stmt* body, expr* decorator_list)"
  },
  {
    "name": "Compare",
    "doc": "Compare(expr left, cmpop* ops, expr* comparators)"
  },
  {
    "name": "Constant",
    "doc": "Constant(constant value, string? kind)"
  },
  {
    "name": "Continue",
    "doc": "Continue"
  },
  {
    "name": "Del",
    "doc": "Del"
  },
  {
    "name": "Delete",
    "doc": "Delete(expr* targets)"
  },
  {
    "name": "Dict",
    "doc": "Dict(expr* keys, expr* values)"
  },
  {
    "name": "DictComp",
    "doc": "DictComp(expr key, expr value, comprehension* generators)"
  },
  {
    "name": "Div",
    "doc": "Div"
  },
  {
    "name": "Ellipsis",
    "doc": "Deprecated AST node class. Use ast.Constant instead"
  },
  {
    "name": "Eq",
    "doc": "Eq"
  },
  {
    "name": "ExceptHandler",
    "doc": "ExceptHandler(expr? type, identifier? name, stmt* body)"
  },
  {
    "name": "Expr",
    "doc": "Expr(expr value)"
  },
  {
    "name": "Expression",
    "doc": "Expression(expr body)"
  },
  {
    "name": "ExtSlice",
    "doc": "Deprecated AST node class. Use ast.Tuple instead."
  },
  {
    "name": "FloorDiv",
    "doc": "FloorDiv"
  },
  {
    "name": "For",
    "doc": "For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)"
  },
  {
    "name": "FormattedValue",
    "doc": "FormattedValue(expr value, int conversion, expr? format_spec)"
  },
  {
    "name": "FunctionDef",
    "doc": "FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)"
  },
  {
    "name": "FunctionType",
    "doc": "FunctionType(expr* argtypes, expr returns)"
  },
  {
    "name": "GeneratorExp",
    "doc": "GeneratorExp(expr elt, comprehension* generators)"
  },
  {
    "name": "Global",
    "doc": "Global(identifier* names)"
  },
  {
    "name": "Gt",
    "doc": "Gt"
  },
  {
    "name": "GtE",
    "doc": "GtE"
  },
  {
    "name": "If",
    "doc": "If(expr test, stmt* body, stmt* orelse)"
  },
  {
    "name": "IfExp",
    "doc": "IfExp(expr test, expr body, expr orelse)"
  },
  {
    "name": "Import",
    "doc": "Import(alias* names)"
  },
  {
    "name": "ImportFrom",
    "doc": "ImportFrom(identifier? module, alias* names, int? level)"
  },
  {
    "name": "In",
    "doc": "In"
  },
  {
    "name": "Index",
    "doc": "Deprecated AST node class. Use the index value directly instead."
  },
  {
    "name": "IntEnum",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "Interactive",
    "doc": "Interactive(stmt* body)"
  },
  {
    "name": "Invert",
    "doc": "Invert"
  },
  {
    "name": "Is",
    "doc": "Is"
  },
  {
    "name": "IsNot",
    "doc": "IsNot"
  },
  {
    "name": "JoinedStr",
    "doc": "JoinedStr(expr* values)"
  },
  {
    "name": "LShift",
    "doc": "LShift"
  },
  {
    "name": "Lambda",
    "doc": "Lambda(arguments args, expr body)"
  },
  {
    "name": "List",
    "doc": "List(expr* elts, expr_context ctx)"
  },
  {
    "name": "ListComp",
    "doc": "ListComp(expr elt, comprehension* generators)"
  },
  {
    "name": "Load",
    "doc": "Load"
  },
  {
    "name": "Lt",
    "doc": "Lt"
  },
  {
    "name": "LtE",
    "doc": "LtE"
  },
  {
    "name": "MatMult",
    "doc": "MatMult"
  },
  {
    "name": "Match",
    "doc": "Match(expr subject, match_case* cases)"
  },
  {
    "name": "MatchAs",
    "doc": "MatchAs(pattern? pattern, identifier? name)"
  },
  {
    "name": "MatchClass",
    "doc": "MatchClass(expr cls, pattern* patterns, identifier* kwd_attrs, pattern* kwd_patterns)"
  },
  {
    "name": "MatchMapping",
    "doc": "MatchMapping(expr* keys, pattern* patterns, identifier? rest)"
  },
  {
    "name": "MatchOr",
    "doc": "MatchOr(pattern* patterns)"
  },
  {
    "name": "MatchSequence",
    "doc": "MatchSequence(pattern* patterns)"
  },
  {
    "name": "MatchSingleton",
    "doc": "MatchSingleton(constant value)"
  },
  {
    "name": "MatchStar",
    "doc": "MatchStar(identifier? name)"
  },
  {
    "name": "MatchValue",
    "doc": "MatchValue(expr value)"
  },
  {
    "name": "Mod",
    "doc": "Mod"
  },
  {
    "name": "Module",
    "doc": "Module(stmt* body, type_ignore* type_ignores)"
  },
  {
    "name": "Mult",
    "doc": "Mult"
  },
  {
    "name": "Name",
    "doc": "Name(identifier id, expr_context ctx)"
  },
  {
    "name": "NameConstant",
    "doc": "Deprecated AST node class. Use ast.Constant instead"
  },
  {
    "name": "NamedExpr",
    "doc": "NamedExpr(expr target, expr value)"
  },
  {
    "name": "NodeTransformer",
    "doc": "A :class:`NodeVisitor` subclass that walks the abstract syntax tree and"
  },
  {
    "name": "NodeVisitor",
    "doc": "A node visitor base class that walks the abstract syntax tree and calls a"
  },
  {
    "name": "Nonlocal",
    "doc": "Nonlocal(identifier* names)"
  },
  {
    "name": "Not",
    "doc": "Not"
  },
  {
    "name": "NotEq",
    "doc": "NotEq"
  },
  {
    "name": "NotIn",
    "doc": "NotIn"
  },
  {
    "name": "Num",
    "doc": "Deprecated AST node class. Use ast.Constant instead"
  },
  {
    "name": "Or",
    "doc": "Or"
  },
  {
    "name": "Param",
    "doc": "Deprecated AST node class.  Unused in Python 3."
  },
  {
    "name": "Pass",
    "doc": "Pass"
  },
  {
    "name": "Pow",
    "doc": "Pow"
  },
  {
    "name": "RShift",
    "doc": "RShift"
  },
  {
    "name": "Raise",
    "doc": "Raise(expr? exc, expr? cause)"
  },
  {
    "name": "Return",
    "doc": "Return(expr? value)"
  },
  {
    "name": "Set",
    "doc": "Set(expr* elts)"
  },
  {
    "name": "SetComp",
    "doc": "SetComp(expr elt, comprehension* generators)"
  },
  {
    "name": "Slice",
    "doc": "Slice(expr? lower, expr? upper, expr? step)"
  },
  {
    "name": "Starred",
    "doc": "Starred(expr value, expr_context ctx)"
  },
  {
    "name": "Store",
    "doc": "Store"
  },
  {
    "name": "Str",
    "doc": "Deprecated AST node class. Use ast.Constant instead"
  },
  {
    "name": "Sub",
    "doc": "Sub"
  },
  {
    "name": "Subscript",
    "doc": "Subscript(expr value, expr slice, expr_context ctx)"
  },
  {
    "name": "Suite",
    "doc": "Deprecated AST node class.  Unused in Python 3."
  },
  {
    "name": "Try",
    "doc": "Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)"
  },
  {
    "name": "TryStar",
    "doc": "TryStar(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)"
  },
  {
    "name": "Tuple",
    "doc": "Tuple(expr* elts, expr_context ctx)"
  },
  {
    "name": "TypeIgnore",
    "doc": "TypeIgnore(int lineno, string tag)"
  },
  {
    "name": "UAdd",
    "doc": "UAdd"
  },
  {
    "name": "USub",
    "doc": "USub"
  },
  {
    "name": "UnaryOp",
    "doc": "UnaryOp(unaryop op, expr operand)"
  },
  {
    "name": "While",
    "doc": "While(expr test, stmt* body, stmt* orelse)"
  },
  {
    "name": "With",
    "doc": "With(withitem* items, stmt* body, string? type_comment)"
  },
  {
    "name": "Yield",
    "doc": "Yield(expr? value)"
  },
  {
    "name": "YieldFrom",
    "doc": "YieldFrom(expr value)"
  },
  {
    "name": "_ABC",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "_Precedence",
    "doc": "Precedence table that originated from python grammar."
  },
  {
    "name": "_Unparser",
    "doc": "Methods in this class recursively traverse an AST and"
  },
  {
    "name": "alias",
    "doc": "alias(identifier name, identifier? asname)"
  },
  {
    "name": "arg",
    "doc": "arg(identifier arg, expr? annotation, string? type_comment)"
  },
  {
    "name": "arguments",
    "doc": "arguments(arg* posonlyargs, arg* args, arg? vararg, arg* kwonlyargs, expr* kw_defaults, arg? kwarg, expr* defaults)"
  },
  {
    "name": "auto",
    "doc": "Instances are replaced with an appropriate value in Enum class suites."
  },
  {
    "name": "boolop",
    "doc": "boolop = And | Or"
  },
  {
    "name": "cmpop",
    "doc": "cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn"
  },
  {
    "name": "comprehension",
    "doc": "comprehension(expr target, expr iter, expr* ifs, int is_async)"
  },
  {
    "name": "excepthandler",
    "doc": "excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)"
  },
  {
    "name": "expr",
    "doc": "expr = BoolOp(boolop op, expr* values)"
  },
  {
    "name": "expr_context",
    "doc": "expr_context = Load | Store | Del"
  },
  {
    "name": "keyword",
    "doc": "keyword(identifier? arg, expr value)"
  },
  {
    "name": "match_case",
    "doc": "match_case(pattern pattern, expr? guard, stmt* body)"
  },
  {
    "name": "mod",
    "doc": "mod = Module(stmt* body, type_ignore* type_ignores)"
  },
  {
    "name": "nullcontext",
    "doc": "Context manager that does no additional processing."
  },
  {
    "name": "operator",
    "doc": "operator = Add | Sub | Mult | MatMult | Div | Mod | Pow | LShift | RShift | BitOr | BitXor | BitAnd | FloorDiv"
  },
  {
    "name": "pattern",
    "doc": "pattern = MatchValue(expr value)"
  },
  {
    "name": "slice",
    "doc": "Deprecated AST node class."
  },
  {
    "name": "stmt",
    "doc": "stmt = FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)"
  },
  {
    "name": "type_ignore",
    "doc": "type_ignore = TypeIgnore(int lineno, string tag)"
  },
  {
    "name": "unaryop",
    "doc": "unaryop = Invert | Not | UAdd | USub"
  },
  {
    "name": "withitem",
    "doc": "withitem(expr context_expr, expr? optional_vars)"
  },
  {
    "name": "async_chat",
    "doc": "This is an abstract class.  You must derive from this class, and add"
  },
  {
    "name": "deque",
    "doc": "deque([iterable[, maxlen]]) --> deque object"
  },
  {
    "name": "simple_producer",
    "doc": ""
  },
  {
    "name": "AbstractChildWatcher",
    "doc": "Abstract base class for monitoring child processes."
  },
  {
    "name": "AbstractEventLoop",
    "doc": "Abstract event loop."
  },
  {
    "name": "AbstractEventLoopPolicy",
    "doc": "Abstract policy for accessing the event loop."
  },
  {
    "name": "AbstractServer",
    "doc": "Abstract server returned by create_server()."
  },
  {
    "name": "Barrier",
    "doc": "Asyncio equivalent to threading.Barrier"
  },
  {
    "name": "BaseEventLoop",
    "doc": "Abstract event loop."
  },
  {
    "name": "BaseProtocol",
    "doc": "Common base class for protocol interfaces."
  },
  {
    "name": "BaseTransport",
    "doc": "Base class for transports."
  },
  {
    "name": "BoundedSemaphore",
    "doc": "A bounded semaphore implementation."
  },
  {
    "name": "BrokenBarrierError",
    "doc": "Barrier is broken by barrier.abort() call."
  },
  {
    "name": "BufferedProtocol",
    "doc": "Interface for stream protocol with manual buffer control."
  },
  {
    "name": "CancelledError",
    "doc": "The Future or Task was cancelled."
  },
  {
    "name": "Condition",
    "doc": "Asynchronous equivalent to threading.Condition."
  },
  {
    "name": "DatagramProtocol",
    "doc": "Interface for datagram protocol."
  },
  {
    "name": "DatagramTransport",
    "doc": "Interface for datagram (UDP) transports."
  },
  {
    "name": "DefaultEventLoopPolicy",
    "doc": "UNIX event loop policy with a watcher for child processes."
  },
  {
    "name": "Event",
    "doc": "Asynchronous equivalent to threading.Event."
  },
  {
    "name": "FastChildWatcher",
    "doc": "'Fast' child watcher implementation."
  },
  {
    "name": "Future",
    "doc": "This class is *almost* compatible with concurrent.futures.Future."
  },
  {
    "name": "Handle",
    "doc": "Object returned by callback registration methods."
  },
  {
    "name": "IncompleteReadError",
    "doc": "Incomplete read error. Attributes:"
  },
  {
    "name": "InvalidStateError",
    "doc": "The operation is not allowed in this state."
  },
  {
    "name": "LifoQueue",
    "doc": "A subclass of Queue that retrieves most recently added entries first."
  },
  {
    "name": "LimitOverrunError",
    "doc": "Reached the buffer limit while looking for a separator."
  },
  {
    "name": "Lock",
    "doc": "Primitive lock objects."
  },
  {
    "name": "MultiLoopChildWatcher",
    "doc": "A watcher that doesn't require running loop in the main thread."
  },
  {
    "name": "PidfdChildWatcher",
    "doc": "Child watcher implementation using Linux's pid file descriptors."
  },
  {
    "name": "PriorityQueue",
    "doc": "A subclass of Queue; retrieves entries in priority order (lowest first)."
  },
  {
    "name": "Protocol",
    "doc": "Interface for stream protocol."
  },
  {
    "name": "Queue",
    "doc": "A queue, useful for coordinating producer and consumer coroutines."
  },
  {
    "name": "QueueEmpty",
    "doc": "Raised when Queue.get_nowait() is called on an empty Queue."
  },
  {
    "name": "QueueFull",
    "doc": "Raised when the Queue.put_nowait() method is called on a full Queue."
  },
  {
    "name": "ReadTransport",
    "doc": "Interface for read-only transports."
  },
  {
    "name": "Runner",
    "doc": "A context manager that controls event loop life cycle."
  },
  {
    "name": "SafeChildWatcher",
    "doc": "'Safe' child watcher implementation."
  },
  {
    "name": "SelectorEventLoop",
    "doc": "Unix event loop."
  },
  {
    "name": "Semaphore",
    "doc": "A Semaphore implementation."
  },
  {
    "name": "SendfileNotAvailableError",
    "doc": "Sendfile syscall is not available."
  },
  {
    "name": "Server",
    "doc": "Abstract server returned by create_server()."
  },
  {
    "name": "StreamReader",
    "doc": ""
  },
  {
    "name": "StreamReaderProtocol",
    "doc": "Helper class to adapt between Protocol and StreamReader."
  },
  {
    "name": "StreamWriter",
    "doc": "Wraps a Transport."
  },
  {
    "name": "SubprocessProtocol",
    "doc": "Interface for protocol for subprocess calls."
  },
  {
    "name": "SubprocessTransport",
    "doc": "Base class for transports."
  },
  {
    "name": "Task",
    "doc": "A coroutine wrapped in a Future."
  },
  {
    "name": "TaskGroup",
    "doc": "Asynchronous context manager for managing groups of tasks."
  },
  {
    "name": "ThreadedChildWatcher",
    "doc": "Threaded child watcher implementation."
  },
  {
    "name": "Timeout",
    "doc": "Asynchronous context manager for cancelling overdue coroutines."
  },
  {
    "name": "TimeoutError",
    "doc": "Timeout expired."
  },
  {
    "name": "TimerHandle",
    "doc": "Object returned by timed callback registration methods."
  },
  {
    "name": "Transport",
    "doc": "Interface representing a bidirectional transport."
  },
  {
    "name": "WriteTransport",
    "doc": "Interface for write-only transports."
  },
  {
    "name": "ExitNow",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "dispatcher",
    "doc": ""
  },
  {
    "name": "dispatcher_with_send",
    "doc": ""
  },
  {
    "name": "file_dispatcher",
    "doc": ""
  },
  {
    "name": "file_wrapper",
    "doc": ""
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Bdb",
    "doc": "Generic Python debugger base class."
  },
  {
    "name": "BdbQuit",
    "doc": "Exception to give up completely."
  },
  {
    "name": "Breakpoint",
    "doc": "Breakpoint class."
  },
  {
    "name": "Tdb",
    "doc": "Generic Python debugger base class."
  },
  {
    "name": "Error",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "Incomplete",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "ASTSafetyError",
    "doc": "Raised when Black's generated code is not equivalent to the old AST."
  },
  {
    "name": "Any",
    "doc": "Special type indicating an unconstrained type."
  },
  {
    "name": "Cache",
    "doc": "Cache(mode: black.mode.Mode, cache_file: pathlib.Path, file_data: dict[str, black.cache.FileData] = <factory>)"
  },
  {
    "name": "Changed",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "Collection",
    "doc": ""
  },
  {
    "name": "EmptyLineTracker",
    "doc": "Provides a stateful method that returns the number of potential extra"
  },
  {
    "name": "Encoding",
    "doc": "str(object='') -> str"
  },
  {
    "name": "Enum",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "Feature",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "FileContent",
    "doc": "str(object='') -> str"
  },
  {
    "name": "FileMode",
    "doc": "Mode(target_versions: set[black.mode.TargetVersion] = <factory>, line_length: int = 88, string_normalization: bool = True, is_pyi: bool = False, is_ipynb: bool = False, skip_source_first_line: bool = False, magic_trailing_comma: bool = True, python_cell_magics: set[str] = <factory>, preview: bool = False, unstable: bool = False, enabled_features: set[black.mode.Preview] = <factory>)"
  },
  {
    "name": "Generator",
    "doc": ""
  },
  {
    "name": "GitWildMatchPatternError",
    "doc": "The :class:`GitWildMatchPatternError` indicates an invalid git wild match"
  },
  {
    "name": "InvalidInput",
    "doc": "Raised when input source code fails all parse attempts."
  },
  {
    "name": "Iterator",
    "doc": ""
  },
  {
    "name": "JSONDecodeError",
    "doc": "Subclass of ValueError with the following additional properties:"
  },
  {
    "name": "Leaf",
    "doc": "Concrete implementation for leaf nodes."
  },
  {
    "name": "LineGenerator",
    "doc": "Generates reformatted Line objects.  Empty lines are not emitted."
  },
  {
    "name": "LinesBlock",
    "doc": "Class that holds information about a block of formatted lines."
  },
  {
    "name": "Mode",
    "doc": "Mode(target_versions: set[black.mode.TargetVersion] = <factory>, line_length: int = 88, string_normalization: bool = True, is_pyi: bool = False, is_ipynb: bool = False, skip_source_first_line: bool = False, magic_trailing_comma: bool = True, python_cell_magics: set[str] = <factory>, preview: bool = False, unstable: bool = False, enabled_features: set[black.mode.Preview] = <factory>)"
  },
  {
    "name": "MutableMapping",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "NewLine",
    "doc": "str(object='') -> str"
  },
  {
    "name": "Node",
    "doc": "Concrete implementation for interior nodes."
  },
  {
    "name": "NothingChanged",
    "doc": "Raised when reformatted code is the same as source."
  },
  {
    "name": "ParameterSource",
    "doc": "This is an :class:`~enum.Enum` that indicates the source of a"
  },
  {
    "name": "Path",
    "doc": "PurePath subclass that can make system calls."
  },
  {
    "name": "PathSpec",
    "doc": "The :class:`PathSpec` class is a wrapper around a list of compiled"
  },
  {
    "name": "Pattern",
    "doc": "Compiled regular expression object."
  },
  {
    "name": "Preview",
    "doc": "Individual preview style features."
  },
  {
    "name": "Report",
    "doc": "Provides a reformatting counter. Can be rendered with `str(report)`."
  },
  {
    "name": "Sequence",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "Sized",
    "doc": ""
  },
  {
    "name": "TargetVersion",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "WriteBack",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "datetime",
    "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])"
  },
  {
    "name": "timezone",
    "doc": "Fixed offset from UTC implementation of tzinfo."
  },
  {
    "name": "Any",
    "doc": "Special type indicating an unconstrained type."
  },
  {
    "name": "AttributeResemblesVariableWarning",
    "doc": "The warning issued when Beautiful Soup suspects a provided"
  },
  {
    "name": "BeautifulSoup",
    "doc": "A data structure representing a parsed HTML or XML document."
  },
  {
    "name": "BeautifulStoneSoup",
    "doc": "Deprecated interface to an XML parser."
  },
  {
    "name": "CData",
    "doc": "A `CDATA section <https://dev.w3.org/html5/spec-LC/syntax.html#cdata-sections>`_."
  },
  {
    "name": "CSS",
    "doc": "A proxy object against the ``soupsieve`` library, to simplify its"
  },
  {
    "name": "Comment",
    "doc": "An `HTML comment <https://dev.w3.org/html5/spec-LC/syntax.html#comments>`_ or `XML comment <https://www.w3.org/TR/REC-xml/#sec-comments>`_."
  },
  {
    "name": "Counter",
    "doc": "Dict subclass for counting hashable items.  Sometimes called a bag"
  },
  {
    "name": "Declaration",
    "doc": "An `XML declaration <https://www.w3.org/TR/REC-xml/#sec-prolog-dtd>`_."
  },
  {
    "name": "Doctype",
    "doc": "A `document type declaration <https://www.w3.org/TR/REC-xml/#dt-doctype>`_."
  },
  {
    "name": "ElementFilter",
    "doc": "`ElementFilter` encapsulates the logic necessary to decide:"
  },
  {
    "name": "FeatureNotFound",
    "doc": "Exception raised by the BeautifulSoup constructor if no parser with the"
  },
  {
    "name": "Formatter",
    "doc": "Describes a strategy to use when outputting a parse tree to a string."
  },
  {
    "name": "GuessedAtParserWarning",
    "doc": "The warning issued when BeautifulSoup has to guess what parser to"
  },
  {
    "name": "HTMLParserTreeBuilder",
    "doc": "A Beautiful soup `bs4.builder.TreeBuilder` that uses the"
  },
  {
    "name": "MarkupResemblesLocatorWarning",
    "doc": "The warning issued when BeautifulSoup is given 'markup' that"
  },
  {
    "name": "NavigableString",
    "doc": "A Python string that is part of a parse tree."
  },
  {
    "name": "PageElement",
    "doc": "An abstract class representing a single element in the parse tree."
  },
  {
    "name": "ParserRejectedMarkup",
    "doc": "An Exception to be raised when the underlying parser simply"
  },
  {
    "name": "ProcessingInstruction",
    "doc": "A SGML processing instruction."
  },
  {
    "name": "ResultSet",
    "doc": "A ResultSet is a list of `PageElement` objects, gathered as the result"
  },
  {
    "name": "Script",
    "doc": "A `NavigableString` representing the contents of a `<script>"
  },
  {
    "name": "SoupStrainer",
    "doc": "The `ElementFilter` subclass used internally by Beautiful Soup."
  },
  {
    "name": "StopParsing",
    "doc": "Exception raised by a TreeBuilder if it's unable to continue parsing."
  },
  {
    "name": "Stylesheet",
    "doc": "A `NavigableString` representing the contents of a `<style> HTML"
  },
  {
    "name": "Tag",
    "doc": "An HTML or XML tag that is part of a parse tree, along with its"
  },
  {
    "name": "TemplateString",
    "doc": "A `NavigableString` representing a string found inside an `HTML"
  },
  {
    "name": "TreeBuilder",
    "doc": "Turn a textual document into a Beautiful Soup object tree."
  },
  {
    "name": "UnicodeDammit",
    "doc": "A class for detecting the encoding of a bytestring containing an"
  },
  {
    "name": "UnusualUsageWarning",
    "doc": "A superclass for warnings issued when Beautiful Soup sees"
  },
  {
    "name": "XMLParsedAsHTMLWarning",
    "doc": "The warning issued when an HTML parser is used to parse"
  },
  {
    "name": "_Encoding",
    "doc": "str(object='') -> str"
  },
  {
    "name": "_RawAttributeValue",
    "doc": "str(object='') -> str"
  },
  {
    "name": "_s",
    "doc": "A data structure representing a parsed HTML or XML document."
  },
  {
    "name": "_soup",
    "doc": "A data structure representing a parsed HTML or XML document."
  },
  {
    "name": "BZ2Compressor",
    "doc": "Create a compressor object for compressing data incrementally."
  },
  {
    "name": "BZ2Decompressor",
    "doc": "Create a decompressor object for decompressing data incrementally."
  },
  {
    "name": "BZ2File",
    "doc": "A file object providing transparent bzip2 (de)compression."
  },
  {
    "name": "Profile",
    "doc": "Profile(timer=None, timeunit=None, subcalls=True, builtins=True)"
  },
  {
    "name": "Calendar",
    "doc": "Base calendar class. This class doesn't do any formatting. It simply"
  },
  {
    "name": "HTMLCalendar",
    "doc": "This calendar returns complete HTML pages."
  },
  {
    "name": "IllegalMonthError",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "IllegalWeekdayError",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "LocaleHTMLCalendar",
    "doc": "This class can be passed a locale name in the constructor and will return"
  },
  {
    "name": "LocaleTextCalendar",
    "doc": "This class can be passed a locale name in the constructor and will return"
  },
  {
    "name": "TextCalendar",
    "doc": "Subclass of Calendar that outputs a calendar as a simple plain text"
  },
  {
    "name": "_localized_day",
    "doc": ""
  },
  {
    "name": "_localized_month",
    "doc": ""
  },
  {
    "name": "different_locale",
    "doc": ""
  },
  {
    "name": "error",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "repeat",
    "doc": "repeat(object [,times]) -> create an iterator which returns the object"
  },
  {
    "name": "BytesIO",
    "doc": "Buffered I/O implementation using an in-memory bytes buffer."
  },
  {
    "name": "FeedParser",
    "doc": "A feed-style parser of email."
  },
  {
    "name": "FieldStorage",
    "doc": "Store a sequence of fields, reading multipart/form-data."
  },
  {
    "name": "Mapping",
    "doc": "A Mapping is a generic container for associating key/value"
  },
  {
    "name": "Message",
    "doc": "Basic message object."
  },
  {
    "name": "MiniFieldStorage",
    "doc": "Like FieldStorage, for use when no file uploads are possible."
  },
  {
    "name": "StringIO",
    "doc": "Text I/O implementation using an in-memory buffer."
  },
  {
    "name": "TextIOWrapper",
    "doc": "Character and line based layer over a BufferedIOBase object, buffer."
  },
  {
    "name": "Hook",
    "doc": "A hook to replace sys.excepthook that shows tracebacks in HTML."
  },
  {
    "name": "CharsetMatch",
    "doc": ""
  },
  {
    "name": "CharsetMatches",
    "doc": "Container with every CharsetMatch items ordered by default from most probable to the less one."
  },
  {
    "name": "Chunk",
    "doc": ""
  },
  {
    "name": "Abort",
    "doc": "An internal signalling exception that signals Click to abort."
  },
  {
    "name": "Argument",
    "doc": "Arguments are positional parameters to a command.  They generally"
  },
  {
    "name": "BadArgumentUsage",
    "doc": "Raised if an argument is generally supplied but the use of the argument"
  },
  {
    "name": "BadOptionUsage",
    "doc": "Raised if an option is generally supplied but the use of the option"
  },
  {
    "name": "BadParameter",
    "doc": "An exception that formats out a standardized error message for a"
  },
  {
    "name": "Choice",
    "doc": "The choice type allows a value to be checked against a fixed set"
  },
  {
    "name": "ClickException",
    "doc": "An exception that Click can handle and show to the user."
  },
  {
    "name": "Command",
    "doc": "Commands are the basic building block of command line interfaces in"
  },
  {
    "name": "CommandCollection",
    "doc": "A :class:`Group` that looks up subcommands on other groups. If a command"
  },
  {
    "name": "Context",
    "doc": "The context is a special internal object that holds state relevant"
  },
  {
    "name": "DateTime",
    "doc": "The DateTime type converts date strings into `datetime` objects."
  },
  {
    "name": "File",
    "doc": "Declares a parameter to be a file for reading or writing.  The file"
  },
  {
    "name": "FileError",
    "doc": "Raised if a file cannot be opened."
  },
  {
    "name": "FloatRange",
    "doc": "Restrict a :data:`click.FLOAT` value to a range of accepted"
  },
  {
    "name": "Group",
    "doc": "A group is a command that nests other commands (or more groups)."
  },
  {
    "name": "HelpFormatter",
    "doc": "This class helps with formatting text-based help pages.  It's"
  },
  {
    "name": "IntRange",
    "doc": "Restrict an :data:`click.INT` value to a range of accepted"
  },
  {
    "name": "MissingParameter",
    "doc": "Raised if click required an option or argument but it was not"
  },
  {
    "name": "NoSuchOption",
    "doc": "Raised if click attempted to handle an option that does not"
  },
  {
    "name": "Option",
    "doc": "Options are usually optional values on the command line and"
  },
  {
    "name": "ParamType",
    "doc": "Represents the type of a parameter. Validates and converts values"
  },
  {
    "name": "Parameter",
    "doc": "A parameter to a command comes in two versions: they are either"
  },
  {
    "name": "Path",
    "doc": "The ``Path`` type is similar to the :class:`File` type, but"
  },
  {
    "name": "Tuple",
    "doc": "The default behavior of Click is to apply a type on a value directly."
  },
  {
    "name": "UsageError",
    "doc": "An internal exception that signals a usage error.  This typically"
  },
  {
    "name": "Cmd",
    "doc": "A simple framework for writing line-oriented command interpreters."
  },
  {
    "name": "CommandCompiler",
    "doc": "Instances of this class have __call__ methods identical in"
  },
  {
    "name": "InteractiveConsole",
    "doc": "Closely emulate the behavior of the interactive Python interpreter."
  },
  {
    "name": "InteractiveInterpreter",
    "doc": "Base class for InteractiveConsole."
  },
  {
    "name": "BufferedIncrementalDecoder",
    "doc": "This subclass of IncrementalDecoder can be used as the baseclass for an"
  },
  {
    "name": "BufferedIncrementalEncoder",
    "doc": "This subclass of IncrementalEncoder can be used as the baseclass for an"
  },
  {
    "name": "Codec",
    "doc": "Defines the interface for stateless encoders/decoders."
  },
  {
    "name": "CodecInfo",
    "doc": "Codec details when looking up the codec registry"
  },
  {
    "name": "IncrementalDecoder",
    "doc": "An IncrementalDecoder decodes an input in multiple steps. The input can"
  },
  {
    "name": "IncrementalEncoder",
    "doc": "An IncrementalEncoder encodes an input in multiple steps. The input can"
  },
  {
    "name": "StreamReader",
    "doc": "Defines the interface for stateless encoders/decoders."
  },
  {
    "name": "StreamReaderWriter",
    "doc": "StreamReaderWriter instances allow wrapping streams which"
  },
  {
    "name": "StreamRecoder",
    "doc": "StreamRecoder instances translate data from one encoding to another."
  },
  {
    "name": "StreamWriter",
    "doc": "Defines the interface for stateless encoders/decoders."
  },
  {
    "name": "CommandCompiler",
    "doc": "Instances of this class have __call__ methods identical in"
  },
  {
    "name": "Compile",
    "doc": "Instances of this class behave much like the built-in compile"
  },
  {
    "name": "ChainMap",
    "doc": "A ChainMap groups multiple dicts (or other mappings) together"
  },
  {
    "name": "Counter",
    "doc": "Dict subclass for counting hashable items.  Sometimes called a bag"
  },
  {
    "name": "OrderedDict",
    "doc": "Dictionary that remembers insertion order"
  },
  {
    "name": "UserDict",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "UserList",
    "doc": "A more or less complete user-defined wrapper around list objects."
  },
  {
    "name": "UserString",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "_Link",
    "doc": ""
  },
  {
    "name": "_OrderedDictItemsView",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "_OrderedDictKeysView",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "_OrderedDictValuesView",
    "doc": ""
  },
  {
    "name": "_chain",
    "doc": "chain(*iterables) --> chain object"
  },
  {
    "name": "_itemgetter",
    "doc": "itemgetter(item, ...) --> itemgetter object"
  },
  {
    "name": "_repeat",
    "doc": "repeat(object [,times]) -> create an iterator which returns the object"
  },
  {
    "name": "_starmap",
    "doc": "Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence."
  },
  {
    "name": "_tuplegetter",
    "doc": ""
  },
  {
    "name": "defaultdict",
    "doc": "defaultdict(default_factory=None, /, [...]) --> dict with default factory"
  },
  {
    "name": "deque",
    "doc": "deque([iterable[, maxlen]]) --> deque object"
  },
  {
    "name": "AnsiToWin32",
    "doc": "Implements a 'write()' method which, on Windows, will strip ANSI character"
  },
  {
    "name": "Path",
    "doc": "PurePath subclass that can make system calls."
  },
  {
    "name": "partial",
    "doc": "partial(func, *args, **keywords) - new function with partial application"
  },
  {
    "name": "BasicInterpolation",
    "doc": "Interpolation as implemented in the classic ConfigParser."
  },
  {
    "name": "ConfigParser",
    "doc": "ConfigParser implementing interpolation."
  },
  {
    "name": "ConverterMapping",
    "doc": "Enables reuse of get*() methods between the parser and section proxies."
  },
  {
    "name": "DuplicateOptionError",
    "doc": "Raised by strict parsers when an option is repeated in an input source."
  },
  {
    "name": "DuplicateSectionError",
    "doc": "Raised when a section is repeated in an input source."
  },
  {
    "name": "Error",
    "doc": "Base class for ConfigParser exceptions."
  },
  {
    "name": "ExtendedInterpolation",
    "doc": "Advanced variant of interpolation, supports the syntax used by"
  },
  {
    "name": "Interpolation",
    "doc": "Dummy interpolation that passes the value through with no changes."
  },
  {
    "name": "InterpolationDepthError",
    "doc": "Raised when substitutions are nested too deeply."
  },
  {
    "name": "InterpolationError",
    "doc": "Base class for interpolation-related exceptions."
  },
  {
    "name": "InterpolationMissingOptionError",
    "doc": "A string substitution required a setting which was not available."
  },
  {
    "name": "InterpolationSyntaxError",
    "doc": "Raised when the source text contains invalid syntax."
  },
  {
    "name": "LegacyInterpolation",
    "doc": "Deprecated interpolation used in old versions of ConfigParser."
  },
  {
    "name": "MissingSectionHeaderError",
    "doc": "Raised when a key-value pair is found before any section header."
  },
  {
    "name": "MutableMapping",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "NoOptionError",
    "doc": "A requested option was not found."
  },
  {
    "name": "NoSectionError",
    "doc": "Raised when no section matches a requested option."
  },
  {
    "name": "ParsingError",
    "doc": "Raised when a configuration file does not follow legal syntax."
  },
  {
    "name": "RawConfigParser",
    "doc": "ConfigParser that does not do interpolation."
  },
  {
    "name": "SafeConfigParser",
    "doc": "ConfigParser alias for backwards compatibility purposes."
  },
  {
    "name": "SectionProxy",
    "doc": "A proxy for a single section from a parser."
  },
  {
    "name": "_ChainMap",
    "doc": "A ChainMap groups multiple dicts (or other mappings) together"
  },
  {
    "name": "_default_dict",
    "doc": "dict() -> new empty dictionary"
  },
  {
    "name": "AbstractAsyncContextManager",
    "doc": "An abstract base class for asynchronous context managers."
  },
  {
    "name": "AbstractContextManager",
    "doc": "An abstract base class for context managers."
  },
  {
    "name": "AsyncContextDecorator",
    "doc": "A base class or mixin that enables async context managers to work as decorators."
  },
  {
    "name": "AsyncExitStack",
    "doc": "Async context manager for dynamic management of a stack of exit"
  },
  {
    "name": "ContextDecorator",
    "doc": "A base class or mixin that enables context managers to work as decorators."
  },
  {
    "name": "ExitStack",
    "doc": "Context manager for dynamic management of a stack of exit callbacks."
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "MethodType",
    "doc": "Create a bound instance method object."
  },
  {
    "name": "_AsyncGeneratorContextManager",
    "doc": "Helper for @asynccontextmanager decorator."
  },
  {
    "name": "_BaseExitStack",
    "doc": "A base class for ExitStack and AsyncExitStack."
  },
  {
    "name": "_GeneratorContextManager",
    "doc": "Helper for @contextmanager decorator."
  },
  {
    "name": "_GeneratorContextManagerBase",
    "doc": "Shared functionality for @contextmanager and @asynccontextmanager."
  },
  {
    "name": "_RedirectStream",
    "doc": "An abstract base class for context managers."
  },
  {
    "name": "aclosing",
    "doc": "Async context manager for safely finalizing an asynchronously cleaned-up"
  },
  {
    "name": "chdir",
    "doc": "Non thread-safe context manager to change the current working directory."
  },
  {
    "name": "closing",
    "doc": "Context to automatically close something at the end of a block."
  },
  {
    "name": "deque",
    "doc": "deque([iterable[, maxlen]]) --> deque object"
  },
  {
    "name": "nullcontext",
    "doc": "Context manager that does no additional processing."
  },
  {
    "name": "redirect_stderr",
    "doc": "Context manager for temporarily redirecting stderr to another file."
  },
  {
    "name": "redirect_stdout",
    "doc": "Context manager for temporarily redirecting stdout to another file."
  },
  {
    "name": "suppress",
    "doc": "Context manager to suppress specified exceptions"
  },
  {
    "name": "Context",
    "doc": ""
  },
  {
    "name": "ContextVar",
    "doc": ""
  },
  {
    "name": "Token",
    "doc": ""
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "_new_type",
    "doc": ""
  },
  {
    "name": "Dialect",
    "doc": "Describe a CSV dialect."
  },
  {
    "name": "DictReader",
    "doc": ""
  },
  {
    "name": "DictWriter",
    "doc": ""
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Sniffer",
    "doc": "\"Sniffs\" the format of a CSV file (i.e. delimiter, quotechar)"
  },
  {
    "name": "StringIO",
    "doc": "Text I/O implementation using an in-memory buffer."
  },
  {
    "name": "_Dialect",
    "doc": "CSV dialect"
  },
  {
    "name": "excel",
    "doc": "Describe the usual properties of Excel-generated CSV files."
  },
  {
    "name": "excel_tab",
    "doc": "Describe the usual properties of Excel-generated TAB-delimited files."
  },
  {
    "name": "unix_dialect",
    "doc": "Describe the usual properties of Unix-generated CSV files."
  },
  {
    "name": "ArgumentError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Array",
    "doc": "XXX to be provided"
  },
  {
    "name": "BigEndianStructure",
    "doc": "Structure with big endian byte order"
  },
  {
    "name": "BigEndianUnion",
    "doc": "Union with big endian byte order"
  },
  {
    "name": "CDLL",
    "doc": "An instance of this class represents a loaded dll/shared"
  },
  {
    "name": "LibraryLoader",
    "doc": ""
  },
  {
    "name": "LittleEndianStructure",
    "doc": "Structure base class"
  },
  {
    "name": "LittleEndianUnion",
    "doc": "Union base class"
  },
  {
    "name": "PyDLL",
    "doc": "This class represents the Python library itself.  It allows"
  },
  {
    "name": "Structure",
    "doc": "Structure base class"
  },
  {
    "name": "Union",
    "doc": "Union base class"
  },
  {
    "name": "_CFuncPtr",
    "doc": "Function Pointer"
  },
  {
    "name": "_Pointer",
    "doc": "XXX to be provided"
  },
  {
    "name": "_SimpleCData",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_bool",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_byte",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_char",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_char_p",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_double",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_float",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_int",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_int16",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_int32",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_int64",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_int8",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_long",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_longdouble",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_longlong",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_short",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_size_t",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_ssize_t",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_ubyte",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_uint",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_uint16",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_uint32",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_uint64",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_uint8",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_ulong",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_ulonglong",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_ushort",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_void_p",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_voidp",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_wchar",
    "doc": "XXX to be provided"
  },
  {
    "name": "c_wchar_p",
    "doc": "XXX to be provided"
  },
  {
    "name": "py_object",
    "doc": "XXX to be provided"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "window",
    "doc": ""
  },
  {
    "name": "Field",
    "doc": ""
  },
  {
    "name": "FrozenInstanceError",
    "doc": "Attribute not found."
  },
  {
    "name": "FunctionType",
    "doc": "Create a function object."
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "InitVar",
    "doc": ""
  },
  {
    "name": "_DataclassParams",
    "doc": ""
  },
  {
    "name": "_FIELD_BASE",
    "doc": ""
  },
  {
    "name": "_HAS_DEFAULT_FACTORY_CLASS",
    "doc": ""
  },
  {
    "name": "_KW_ONLY_TYPE",
    "doc": ""
  },
  {
    "name": "_MISSING_TYPE",
    "doc": ""
  },
  {
    "name": "date",
    "doc": "date(year, month, day) --> date object"
  },
  {
    "name": "datetime",
    "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])"
  },
  {
    "name": "time",
    "doc": "time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object"
  },
  {
    "name": "timedelta",
    "doc": "Difference between two datetime values."
  },
  {
    "name": "timezone",
    "doc": "Fixed offset from UTC implementation of tzinfo."
  },
  {
    "name": "tzinfo",
    "doc": "Abstract base class for time zone info objects."
  },
  {
    "name": "Clamped",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Context",
    "doc": "The context affects almost all operations and controls rounding,"
  },
  {
    "name": "ConversionSyntax",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Decimal",
    "doc": "Construct a new Decimal object. 'value' can be an integer, string, tuple,"
  },
  {
    "name": "DecimalException",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "DecimalTuple",
    "doc": "DecimalTuple(sign, digits, exponent)"
  },
  {
    "name": "DivisionByZero",
    "doc": "Second argument to a division or modulo operation was zero."
  },
  {
    "name": "DivisionImpossible",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "DivisionUndefined",
    "doc": "Second argument to a division or modulo operation was zero."
  },
  {
    "name": "FloatOperation",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Inexact",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "InvalidContext",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "InvalidOperation",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Overflow",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Rounded",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Subnormal",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Underflow",
    "doc": "Base class for arithmetic errors."
  },
  {
    "name": "Differ",
    "doc": "Differ is a class for comparing sequences of lines of text, and"
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "HtmlDiff",
    "doc": "For producing HTML side by side comparison with change highlights."
  },
  {
    "name": "Match",
    "doc": "Match(a, b, size)"
  },
  {
    "name": "SequenceMatcher",
    "doc": "SequenceMatcher is a flexible class for comparing pairs of sequences of"
  },
  {
    "name": "Bytecode",
    "doc": "The bytecode operations of a piece of code"
  },
  {
    "name": "Instruction",
    "doc": "Details for a bytecode operation"
  },
  {
    "name": "Positions",
    "doc": "Positions(lineno, end_lineno, col_offset, end_col_offset)"
  },
  {
    "name": "_ExceptionTableEntry",
    "doc": "_ExceptionTableEntry(start, end, target, depth, lasti)"
  },
  {
    "name": "_Instruction",
    "doc": "_Instruction(opname, opcode, arg, argval, argrepr, offset, starts_line, is_jump_target, positions)"
  },
  {
    "name": "_Unknown",
    "doc": ""
  },
  {
    "name": "DebugRunner",
    "doc": "Run doc tests but raise an exception as soon as there is a failure."
  },
  {
    "name": "DocFileCase",
    "doc": "A class whose instances are single test cases."
  },
  {
    "name": "DocTest",
    "doc": "A collection of doctest examples that should be run in a single"
  },
  {
    "name": "DocTestCase",
    "doc": "A class whose instances are single test cases."
  },
  {
    "name": "DocTestFailure",
    "doc": "A DocTest example has failed in debugging mode."
  },
  {
    "name": "DocTestFinder",
    "doc": "A class used to extract the DocTests that are relevant to a given"
  },
  {
    "name": "DocTestParser",
    "doc": "A class used to parse strings containing doctest examples."
  },
  {
    "name": "DocTestRunner",
    "doc": "A class used to run DocTest test cases, and accumulate statistics."
  },
  {
    "name": "Example",
    "doc": "A single doctest example, consisting of source code and expected"
  },
  {
    "name": "IncrementalNewlineDecoder",
    "doc": "Codec used when reading a file in universal newlines mode."
  },
  {
    "name": "OutputChecker",
    "doc": "A class used to check the whether the actual output from a doctest"
  },
  {
    "name": "SkipDocTestCase",
    "doc": "A class whose instances are single test cases."
  },
  {
    "name": "StringIO",
    "doc": "Text I/O implementation using an in-memory buffer."
  },
  {
    "name": "TestResults",
    "doc": "TestResults(failed, attempted)"
  },
  {
    "name": "UnexpectedException",
    "doc": "A DocTest example has encountered an unexpected exception"
  },
  {
    "name": "_DocTestSuite",
    "doc": "A test suite is a composite test consisting of a number of TestCases."
  },
  {
    "name": "_OutputRedirectingPdb",
    "doc": "A specialized version of the python debugger that redirects stdout"
  },
  {
    "name": "_SpoofOut",
    "doc": "Text I/O implementation using an in-memory buffer."
  },
  {
    "name": "_TestClass",
    "doc": "A pointless class, for sanity-checking of docstring testing."
  },
  {
    "name": "CodecRegistryError",
    "doc": "Base class for lookup errors."
  },
  {
    "name": "DynamicClassAttribute",
    "doc": "Route attribute access on a class to __getattr__."
  },
  {
    "name": "Enum",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "EnumCheck",
    "doc": "various conditions to check an enumeration for"
  },
  {
    "name": "EnumMeta",
    "doc": "Metaclass for Enum"
  },
  {
    "name": "EnumType",
    "doc": "Metaclass for Enum"
  },
  {
    "name": "Flag",
    "doc": "Support for flags"
  },
  {
    "name": "FlagBoundary",
    "doc": "control how out of range values are handled"
  },
  {
    "name": "IntEnum",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "IntFlag",
    "doc": "Support for integer-based Flags"
  },
  {
    "name": "MappingProxyType",
    "doc": ""
  },
  {
    "name": "ReprEnum",
    "doc": "Only changes the repr(), leaving str() and format() to the mixed-in type."
  },
  {
    "name": "StrEnum",
    "doc": "Enum where members are also (and must be) strings"
  },
  {
    "name": "_EnumDict",
    "doc": "Track enum member order and ensure member names are not reused."
  },
  {
    "name": "_proto_member",
    "doc": "intermediate step for enum members between class execution and final creation"
  },
  {
    "name": "auto",
    "doc": "Instances are replaced with an appropriate value in Enum class suites."
  },
  {
    "name": "member",
    "doc": "Forces item to become an Enum member during class creation."
  },
  {
    "name": "nonmember",
    "doc": "Protects item from becoming an Enum member during class creation."
  },
  {
    "name": "property",
    "doc": "This is a descriptor, used to define attributes that act differently"
  },
  {
    "name": "verify",
    "doc": "Check an enumeration for various constraints. (see EnumCheck)"
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "dircmp",
    "doc": "A class that manages the comparison of 2 directories."
  },
  {
    "name": "filterfalse",
    "doc": "Return those items of iterable for which function(item) is false."
  },
  {
    "name": "FileInput",
    "doc": "FileInput([files[, inplace[, backup]]], *, mode=None, openhook=None)"
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "Decimal",
    "doc": "Construct a new Decimal object. 'value' can be an integer, string, tuple,"
  },
  {
    "name": "Fraction",
    "doc": "This class implements rational numbers."
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "FTP",
    "doc": "An FTP client class."
  },
  {
    "name": "FTP_TLS",
    "doc": "A FTP subclass which adds TLS support to FTP as described"
  },
  {
    "name": "_SSLSocket",
    "doc": "This class implements a subtype of socket.socket that wraps"
  },
  {
    "name": "error_perm",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "error_proto",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "error_reply",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "error_temp",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "RLock",
    "doc": ""
  },
  {
    "name": "_CacheInfo",
    "doc": "CacheInfo(hits, misses, maxsize, currsize)"
  },
  {
    "name": "_HashedSeq",
    "doc": "This class guarantees that hash() will be called no more than once"
  },
  {
    "name": "_lru_cache_wrapper",
    "doc": "Create a cached callable that wraps another function."
  },
  {
    "name": "cached_property",
    "doc": ""
  },
  {
    "name": "partial",
    "doc": "partial(func, *args, **keywords) - new function with partial application"
  },
  {
    "name": "partialmethod",
    "doc": "Method descriptor with partial application of the given arguments"
  },
  {
    "name": "singledispatchmethod",
    "doc": "Single-dispatch generic method descriptor."
  },
  {
    "name": "GetoptError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "GetPassWarning",
    "doc": "Base class for warnings generated by user code."
  },
  {
    "name": "GNUTranslations",
    "doc": ""
  },
  {
    "name": "NullTranslations",
    "doc": ""
  },
  {
    "name": "CycleError",
    "doc": "Subclass of ValueError raised by TopologicalSorter.prepare if cycles"
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "TopologicalSorter",
    "doc": "Provides functionality to topologically sort a graph of hashable nodes"
  },
  {
    "name": "_NodeInfo",
    "doc": ""
  },
  {
    "name": "BadGzipFile",
    "doc": "Exception raised in some cases for invalid gzip files."
  },
  {
    "name": "GzipFile",
    "doc": "The GzipFile class simulates most of the methods of a file object with"
  },
  {
    "name": "_GzipReader",
    "doc": "Adapts the decompressor API to a RawIOBase reader API"
  },
  {
    "name": "_PaddedFile",
    "doc": "Minimal read-only file object that prepends a string to the contents"
  },
  {
    "name": "blake2b",
    "doc": "Return a new BLAKE2b hash object."
  },
  {
    "name": "blake2s",
    "doc": "Return a new BLAKE2s hash object."
  },
  {
    "name": "HMAC",
    "doc": "RFC 2104 HMAC class.  Also complies with RFC 4231."
  },
  {
    "name": "_functype",
    "doc": ""
  },
  {
    "name": "HTTPMethod",
    "doc": "HTTP methods and descriptions"
  },
  {
    "name": "HTTPStatus",
    "doc": "HTTP status codes and reason phrases"
  },
  {
    "name": "IntEnum",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "StrEnum",
    "doc": "Enum where members are also (and must be) strings"
  },
  {
    "name": "IDNABidiError",
    "doc": "Exception when bidirectional requirements are not satisfied"
  },
  {
    "name": "IDNAError",
    "doc": "Base exception for all IDNA-encoding related problems"
  },
  {
    "name": "InvalidCodepoint",
    "doc": "Exception when a disallowed or unallocated codepoint is used"
  },
  {
    "name": "InvalidCodepointContext",
    "doc": "Exception when the codepoint is not valid in the context it is used"
  },
  {
    "name": "IMAP4",
    "doc": "IMAP4 client class."
  },
  {
    "name": "IMAP4_SSL",
    "doc": "IMAP4 client class over SSL connection"
  },
  {
    "name": "IMAP4_stream",
    "doc": "IMAP4 client class over a stream"
  },
  {
    "name": "_Authenticator",
    "doc": "Private class to provide en/decoding"
  },
  {
    "name": "datetime",
    "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])"
  },
  {
    "name": "timedelta",
    "doc": "Difference between two datetime values."
  },
  {
    "name": "timezone",
    "doc": "Fixed offset from UTC implementation of tzinfo."
  },
  {
    "name": "PathLike",
    "doc": "Abstract base class for implementing the file system path protocol."
  },
  {
    "name": "NullImporter",
    "doc": "**DEPRECATED**"
  },
  {
    "name": "SourcelessFileLoader",
    "doc": "Loader which handles sourceless file imports."
  },
  {
    "name": "_HackedGetData",
    "doc": "Compatibility support for 'file' arguments of various load_*()"
  },
  {
    "name": "_LoadCompiledCompatibility",
    "doc": "Compatibility support for implementing load_compiled()."
  },
  {
    "name": "_LoadSourceCompatibility",
    "doc": "Compatibility support for implementing load_source()."
  },
  {
    "name": "ArgInfo",
    "doc": "ArgInfo(args, varargs, keywords, locals)"
  },
  {
    "name": "Arguments",
    "doc": "Arguments(args, varargs, varkw)"
  },
  {
    "name": "Attribute",
    "doc": "Attribute(name, kind, defining_class, object)"
  },
  {
    "name": "BlockFinder",
    "doc": "Provide a tokeneater() method to detect the end of a code block."
  },
  {
    "name": "BoundArguments",
    "doc": "Result of `Signature.bind` call.  Holds the mapping of arguments"
  },
  {
    "name": "ClassFoundException",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "ClosureVars",
    "doc": "ClosureVars(nonlocals, globals, builtins, unbound)"
  },
  {
    "name": "EndOfBlock",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "FrameInfo",
    "doc": "_FrameInfo(frame, filename, lineno, function, code_context, index)"
  },
  {
    "name": "FullArgSpec",
    "doc": "FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)"
  },
  {
    "name": "OrderedDict",
    "doc": "Dictionary that remembers insertion order"
  },
  {
    "name": "Parameter",
    "doc": "Represents a parameter in a function signature."
  },
  {
    "name": "Signature",
    "doc": "A Signature object represents the overall signature of a function."
  },
  {
    "name": "Traceback",
    "doc": "_Traceback(filename, lineno, function, code_context, index)"
  },
  {
    "name": "_ClassFinder",
    "doc": "A node visitor base class that walks the abstract syntax tree and calls a"
  },
  {
    "name": "_FrameInfo",
    "doc": "_FrameInfo(frame, filename, lineno, function, code_context, index)"
  },
  {
    "name": "_ParameterKind",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "_Traceback",
    "doc": "_Traceback(filename, lineno, function, code_context, index)"
  },
  {
    "name": "_empty",
    "doc": "Marker object for Signature.empty and Parameter.empty."
  },
  {
    "name": "_void",
    "doc": "A private marker - used in Parameter & Signature."
  },
  {
    "name": "attrgetter",
    "doc": "attrgetter(attr, ...) --> attrgetter object"
  },
  {
    "name": "BlockingIOError",
    "doc": "I/O operation would block."
  },
  {
    "name": "BufferedIOBase",
    "doc": "Base class for buffered IO objects."
  },
  {
    "name": "BufferedRWPair",
    "doc": "A buffered reader and writer object together."
  },
  {
    "name": "BufferedRandom",
    "doc": "A buffered interface to random access streams."
  },
  {
    "name": "BufferedReader",
    "doc": "Create a new buffered reader using the given readable raw IO object."
  },
  {
    "name": "BufferedWriter",
    "doc": "A buffer for a writeable sequential RawIO object."
  },
  {
    "name": "BytesIO",
    "doc": "Buffered I/O implementation using an in-memory bytes buffer."
  },
  {
    "name": "FileIO",
    "doc": "Open a file."
  },
  {
    "name": "IOBase",
    "doc": "The abstract base class for all I/O classes."
  },
  {
    "name": "IncrementalNewlineDecoder",
    "doc": "Codec used when reading a file in universal newlines mode."
  },
  {
    "name": "RawIOBase",
    "doc": "Base class for raw binary I/O."
  },
  {
    "name": "StringIO",
    "doc": "Text I/O implementation using an in-memory buffer."
  },
  {
    "name": "TextIOBase",
    "doc": "Base class for text I/O."
  },
  {
    "name": "TextIOWrapper",
    "doc": "Character and line based layer over a BufferedIOBase object, buffer."
  },
  {
    "name": "UnsupportedOperation",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "AddressValueError",
    "doc": "A Value Error related to the address."
  },
  {
    "name": "IPv4Address",
    "doc": "Represent and manipulate single IPv4 Addresses."
  },
  {
    "name": "IPv4Interface",
    "doc": "Represent and manipulate single IPv4 Addresses."
  },
  {
    "name": "IPv4Network",
    "doc": "This class represents and manipulates 32-bit IPv4 network + addresses.."
  },
  {
    "name": "IPv6Address",
    "doc": "Represent and manipulate single IPv6 Addresses."
  },
  {
    "name": "IPv6Interface",
    "doc": "Represent and manipulate single IPv6 Addresses."
  },
  {
    "name": "IPv6Network",
    "doc": "This class represents and manipulates 128-bit IPv6 networks."
  },
  {
    "name": "NetmaskValueError",
    "doc": "A Value Error related to the netmask."
  },
  {
    "name": "_BaseAddress",
    "doc": "A generic IP object."
  },
  {
    "name": "_BaseConstants",
    "doc": ""
  },
  {
    "name": "_BaseNetwork",
    "doc": "A generic IP network object."
  },
  {
    "name": "_BaseV4",
    "doc": "Base IPv4 object."
  },
  {
    "name": "_BaseV6",
    "doc": "Base IPv6 object."
  },
  {
    "name": "_IPAddressBase",
    "doc": "The mother class."
  },
  {
    "name": "_IPv4Constants",
    "doc": ""
  },
  {
    "name": "_IPv6Constants",
    "doc": ""
  },
  {
    "name": "JSONDecodeError",
    "doc": "Subclass of ValueError with the following additional properties:"
  },
  {
    "name": "JSONDecoder",
    "doc": "Simple JSON <https://json.org> decoder"
  },
  {
    "name": "JSONEncoder",
    "doc": "Extensible JSON <https://json.org> encoder for Python data structures."
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "_builtin_str",
    "doc": "str(object='') -> str"
  },
  {
    "name": "BufferingFormatter",
    "doc": "A formatter suitable for formatting a number of records."
  },
  {
    "name": "FileHandler",
    "doc": "A handler class which writes formatted logging records to disk files."
  },
  {
    "name": "Filter",
    "doc": "Filter instances are used to perform arbitrary filtering of LogRecords."
  },
  {
    "name": "Filterer",
    "doc": "A base class for loggers and handlers which allows them to share"
  },
  {
    "name": "Formatter",
    "doc": "Formatter instances are used to convert a LogRecord to text."
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "Handler",
    "doc": "Handler instances dispatch logging events to specific destinations."
  },
  {
    "name": "LogRecord",
    "doc": "A LogRecord instance represents an event being logged."
  },
  {
    "name": "Logger",
    "doc": "Instances of the Logger class represent a single logging channel. A"
  },
  {
    "name": "LoggerAdapter",
    "doc": "An adapter for loggers which makes it easier to specify contextual"
  },
  {
    "name": "Manager",
    "doc": "There is [under normal circumstances] just one Manager instance, which"
  },
  {
    "name": "NullHandler",
    "doc": "This handler does nothing. It's intended to be used to avoid the"
  },
  {
    "name": "PercentStyle",
    "doc": ""
  },
  {
    "name": "PlaceHolder",
    "doc": "PlaceHolder instances are used in the Manager logger hierarchy to take"
  },
  {
    "name": "RootLogger",
    "doc": "A root logger is not that different to any other logger, except that"
  },
  {
    "name": "StrFormatStyle",
    "doc": ""
  },
  {
    "name": "StreamHandler",
    "doc": "A handler class which writes logging records, appropriately formatted,"
  },
  {
    "name": "StringTemplateStyle",
    "doc": ""
  },
  {
    "name": "Template",
    "doc": "A string class for supporting $-substitutions."
  },
  {
    "name": "_StderrHandler",
    "doc": "This class is like a StreamHandler using sys.stderr, but always uses"
  },
  {
    "name": "_logRecordFactory",
    "doc": "A LogRecord instance represents an event being logged."
  },
  {
    "name": "_loggerClass",
    "doc": "Instances of the Logger class represent a single logging channel. A"
  },
  {
    "name": "LZMACompressor",
    "doc": "LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None)"
  },
  {
    "name": "LZMADecompressor",
    "doc": "Create a decompressor object for decompressing data incrementally."
  },
  {
    "name": "LZMAError",
    "doc": "Call to liblzma failed."
  },
  {
    "name": "LZMAFile",
    "doc": "A file object providing transparent LZMA (de)compression."
  },
  {
    "name": "Babyl",
    "doc": "An Rmail-style Babyl mailbox."
  },
  {
    "name": "BabylMessage",
    "doc": "Message with Babyl-specific properties."
  },
  {
    "name": "Error",
    "doc": "Raised for module-specific errors."
  },
  {
    "name": "ExternalClashError",
    "doc": "Another process caused an action to fail."
  },
  {
    "name": "FormatError",
    "doc": "A file appears to have an invalid format."
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "MH",
    "doc": "An MH mailbox."
  },
  {
    "name": "MHMessage",
    "doc": "Message with MH-specific properties."
  },
  {
    "name": "MMDF",
    "doc": "An MMDF mailbox."
  },
  {
    "name": "MMDFMessage",
    "doc": "Message with MMDF-specific properties."
  },
  {
    "name": "Mailbox",
    "doc": "A group of messages in a particular place."
  },
  {
    "name": "Maildir",
    "doc": "A qmail-style Maildir mailbox."
  },
  {
    "name": "MaildirMessage",
    "doc": "Message with Maildir-specific properties."
  },
  {
    "name": "Message",
    "doc": "Message with mailbox-format-specific properties."
  },
  {
    "name": "NoSuchMailboxError",
    "doc": "The specified mailbox does not exist and won't be created."
  },
  {
    "name": "NotEmptyError",
    "doc": "The specified mailbox is not empty and deletion was requested."
  },
  {
    "name": "_PartialFile",
    "doc": "A read-only wrapper of part of a file."
  },
  {
    "name": "_ProxyFile",
    "doc": "A read-only wrapper of a file."
  },
  {
    "name": "_mboxMMDF",
    "doc": "An mbox or MMDF mailbox."
  },
  {
    "name": "_mboxMMDFMessage",
    "doc": "Message with mbox- or MMDF-specific properties."
  },
  {
    "name": "_singlefileMailbox",
    "doc": "A single-file mailbox."
  },
  {
    "name": "mbox",
    "doc": "A classic mbox mailbox."
  },
  {
    "name": "mboxMessage",
    "doc": "Message with mbox-specific properties."
  },
  {
    "name": "UnsafeMailcapInput",
    "doc": "Warning raised when refusing unsafe input"
  },
  {
    "name": "MimeTypes",
    "doc": "MIME-types datastore."
  },
  {
    "name": "error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "mmap",
    "doc": "Windows: mmap(fileno, length[, tagname[, access[, offset]]])"
  },
  {
    "name": "Module",
    "doc": ""
  },
  {
    "name": "ModuleFinder",
    "doc": ""
  },
  {
    "name": "AuthenticationError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "BufferTooShort",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Process",
    "doc": "Process objects represent activity that is run in a separate process"
  },
  {
    "name": "ProcessError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "TimeoutError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Any",
    "doc": "Special type indicating an unconstrained type."
  },
  {
    "name": "TypedDict",
    "doc": "A simple typed name space. At runtime it is equivalent to a plain dict."
  },
  {
    "name": "_DEPRECATED_NoReturn",
    "doc": ""
  },
  {
    "name": "_FlexibleAliasCls",
    "doc": ""
  },
  {
    "name": "_FlexibleAliasClsApplied",
    "doc": ""
  },
  {
    "name": "_NativeIntMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "_TypedDictMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "i16",
    "doc": "A native fixed-width integer type when used with mypyc."
  },
  {
    "name": "i32",
    "doc": "A native fixed-width integer type when used with mypyc."
  },
  {
    "name": "i64",
    "doc": "A native fixed-width integer type when used with mypyc."
  },
  {
    "name": "u8",
    "doc": "A native fixed-width integer type when used with mypyc."
  },
  {
    "name": "NetrcParseError",
    "doc": "Exception raised on syntax errors in the .netrc file."
  },
  {
    "name": "_netrclex",
    "doc": ""
  },
  {
    "name": "netrc",
    "doc": ""
  },
  {
    "name": "ArticleInfo",
    "doc": "ArticleInfo(number, message_id, lines)"
  },
  {
    "name": "GroupInfo",
    "doc": "GroupInfo(group, last, first, flag)"
  },
  {
    "name": "NNTP",
    "doc": ""
  },
  {
    "name": "NNTPDataError",
    "doc": "Error in response data"
  },
  {
    "name": "NNTPError",
    "doc": "Base class for all nntplib exceptions"
  },
  {
    "name": "NNTPPermanentError",
    "doc": "5xx errors"
  },
  {
    "name": "NNTPProtocolError",
    "doc": "Response does not begin with [1-5]"
  },
  {
    "name": "NNTPReplyError",
    "doc": "Unexpected [123]xx reply"
  },
  {
    "name": "NNTPTemporaryError",
    "doc": "4xx errors"
  },
  {
    "name": "NNTP_SSL",
    "doc": ""
  },
  {
    "name": "ABCMeta",
    "doc": "Metaclass for defining Abstract Base Classes (ABCs)."
  },
  {
    "name": "Complex",
    "doc": "Complex defines the operations that work on the builtin complex type."
  },
  {
    "name": "Integral",
    "doc": "Integral adds methods that work on integral numbers."
  },
  {
    "name": "Number",
    "doc": "All numbers inherit from this class."
  },
  {
    "name": "Rational",
    "doc": ".numerator and .denominator should be in lowest terms."
  },
  {
    "name": "Real",
    "doc": "To Complex, Real adds the operations that work on real numbers."
  },
  {
    "name": "attrgetter",
    "doc": "attrgetter(attr, ...) --> attrgetter object"
  },
  {
    "name": "itemgetter",
    "doc": "itemgetter(item, ...) --> itemgetter object"
  },
  {
    "name": "methodcaller",
    "doc": "methodcaller(name, ...) --> methodcaller object"
  },
  {
    "name": "AmbiguousOptionError",
    "doc": "Raised if an ambiguous option is seen on the command line."
  },
  {
    "name": "BadOptionError",
    "doc": "Raised if an invalid option is seen on the command line."
  },
  {
    "name": "HelpFormatter",
    "doc": "Abstract base class for formatting option help.  OptionParser"
  },
  {
    "name": "IndentedHelpFormatter",
    "doc": "Format help with indented section bodies."
  },
  {
    "name": "OptParseError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Option",
    "doc": "Instance attributes:"
  },
  {
    "name": "OptionConflictError",
    "doc": "Raised if conflicting options are added to an OptionParser."
  },
  {
    "name": "OptionContainer",
    "doc": "Abstract base class."
  },
  {
    "name": "OptionError",
    "doc": "Raised if an Option instance is created with invalid or"
  },
  {
    "name": "OptionGroup",
    "doc": "Abstract base class."
  },
  {
    "name": "OptionParser",
    "doc": "Class attributes:"
  },
  {
    "name": "OptionValueError",
    "doc": "Raised if an invalid option value is encountered on the command"
  },
  {
    "name": "TitledHelpFormatter",
    "doc": "Format help with underlined section headers."
  },
  {
    "name": "Values",
    "doc": ""
  },
  {
    "name": "make_option",
    "doc": "Instance attributes:"
  },
  {
    "name": "DirEntry",
    "doc": ""
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "Mapping",
    "doc": "A Mapping is a generic container for associating key/value"
  },
  {
    "name": "MutableMapping",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "PathLike",
    "doc": "Abstract base class for implementing the file system path protocol."
  },
  {
    "name": "_Environ",
    "doc": "A MutableMapping is a generic container for associating"
  },
  {
    "name": "_wrap_close",
    "doc": ""
  },
  {
    "name": "error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "sched_param",
    "doc": "Currently has only one field: sched_priority"
  },
  {
    "name": "stat_result",
    "doc": "stat_result: Result from stat, fstat, or lstat."
  },
  {
    "name": "statvfs_result",
    "doc": "statvfs_result: Result from statvfs or fstatvfs."
  },
  {
    "name": "terminal_size",
    "doc": "A tuple of (columns, lines) for holding terminal window size"
  },
  {
    "name": "times_result",
    "doc": "times_result: Result from os.times()."
  },
  {
    "name": "uname_result",
    "doc": "uname_result: Result from os.uname()."
  },
  {
    "name": "waitid_result",
    "doc": "waitid_result: Result from waitid."
  },
  {
    "name": "OSSAudioError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Path",
    "doc": "PurePath subclass that can make system calls."
  },
  {
    "name": "PosixPath",
    "doc": "Path subclass for non-Windows systems."
  },
  {
    "name": "PurePath",
    "doc": "Base class for manipulating paths without I/O."
  },
  {
    "name": "PurePosixPath",
    "doc": "PurePath subclass for non-Windows systems."
  },
  {
    "name": "PureWindowsPath",
    "doc": "PurePath subclass for Windows systems."
  },
  {
    "name": "Sequence",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "WindowsPath",
    "doc": "Path subclass for Windows systems."
  },
  {
    "name": "_Flavour",
    "doc": "A flavour implements a particular (platform-specific) set of path"
  },
  {
    "name": "_PathParents",
    "doc": "This object provides sequence-like access to the logical ancestors"
  },
  {
    "name": "_PosixFlavour",
    "doc": "A flavour implements a particular (platform-specific) set of path"
  },
  {
    "name": "_PreciseSelector",
    "doc": "A selector matches a specific glob pattern part against the children"
  },
  {
    "name": "_RecursiveWildcardSelector",
    "doc": "A selector matches a specific glob pattern part against the children"
  },
  {
    "name": "_Selector",
    "doc": "A selector matches a specific glob pattern part against the children"
  },
  {
    "name": "_TerminatingSelector",
    "doc": ""
  },
  {
    "name": "_WildcardSelector",
    "doc": "A selector matches a specific glob pattern part against the children"
  },
  {
    "name": "_WindowsFlavour",
    "doc": "A flavour implements a particular (platform-specific) set of path"
  },
  {
    "name": "attrgetter",
    "doc": "attrgetter(attr, ...) --> attrgetter object"
  },
  {
    "name": "GitIgnorePattern",
    "doc": "The :class:`GitIgnorePattern` class is deprecated by :class:`GitWildMatchPattern`."
  },
  {
    "name": "GitIgnoreSpec",
    "doc": "The :class:`GitIgnoreSpec` class extends :class:`pathspec.pathspec.PathSpec` to"
  },
  {
    "name": "PathSpec",
    "doc": "The :class:`PathSpec` class is a wrapper around a list of compiled"
  },
  {
    "name": "Pattern",
    "doc": "The :class:`Pattern` class is the abstract definition of a pattern."
  },
  {
    "name": "RecursionError",
    "doc": "The :exc:`RecursionError` exception is raised when recursion is"
  },
  {
    "name": "RegexPattern",
    "doc": "The :class:`RegexPattern` class is an implementation of a pattern using"
  },
  {
    "name": "Pdb",
    "doc": "Generic Python debugger base class."
  },
  {
    "name": "Restart",
    "doc": "Causes a debugger to be restarted for the debugged python program."
  },
  {
    "name": "_ModuleTarget",
    "doc": "str(object='') -> str"
  },
  {
    "name": "_ScriptTarget",
    "doc": "str(object='') -> str"
  },
  {
    "name": "_rstr",
    "doc": "String that doesn't quote its repr."
  },
  {
    "name": "FunctionType",
    "doc": "Create a function object."
  },
  {
    "name": "PickleBuffer",
    "doc": "Wrapper for potentially out-of-band buffers"
  },
  {
    "name": "PickleError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Pickler",
    "doc": "This takes a binary file for writing a pickle data stream."
  },
  {
    "name": "PicklingError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Unpickler",
    "doc": "This takes a binary file for reading a pickle data stream."
  },
  {
    "name": "UnpicklingError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "_Framer",
    "doc": ""
  },
  {
    "name": "_Pickler",
    "doc": ""
  },
  {
    "name": "_Stop",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "_Unframer",
    "doc": ""
  },
  {
    "name": "_Unpickler",
    "doc": ""
  },
  {
    "name": "islice",
    "doc": "islice(iterable, stop) --> islice object"
  },
  {
    "name": "partial",
    "doc": "partial(func, *args, **keywords) - new function with partial application"
  },
  {
    "name": "ArgumentDescriptor",
    "doc": ""
  },
  {
    "name": "OpcodeInfo",
    "doc": ""
  },
  {
    "name": "StackObject",
    "doc": ""
  },
  {
    "name": "_Example",
    "doc": ""
  },
  {
    "name": "Template",
    "doc": "Class representing a pipeline template."
  },
  {
    "name": "AvailableDistributions",
    "doc": "Searchable snapshot of distributions on a search path"
  },
  {
    "name": "ContextualVersionConflict",
    "doc": "A VersionConflict that accepts a third parameter, the set of the"
  },
  {
    "name": "DefaultProvider",
    "doc": "Provides access to package resources in the filesystem"
  },
  {
    "name": "DistInfoDistribution",
    "doc": "Wrap an actual or potential sys.path entry"
  },
  {
    "name": "Distribution",
    "doc": "Wrap an actual or potential sys.path entry w/metadata"
  },
  {
    "name": "DistributionNotFound",
    "doc": "A requested distribution was not found"
  },
  {
    "name": "EggInfoDistribution",
    "doc": "Wrap an actual or potential sys.path entry w/metadata"
  },
  {
    "name": "EggMetadata",
    "doc": "Metadata provider for .egg files"
  },
  {
    "name": "EggProvider",
    "doc": "Provider based on a virtual filesystem"
  },
  {
    "name": "EmptyProvider",
    "doc": "Provider that returns nothing for all requests"
  },
  {
    "name": "EntryPoint",
    "doc": "Object representing an advertised importable object"
  },
  {
    "name": "Environment",
    "doc": "Searchable snapshot of distributions on a search path"
  },
  {
    "name": "ExtractionError",
    "doc": "An error occurred extracting a resource"
  },
  {
    "name": "FileMetadata",
    "doc": "Metadata handler for standalone PKG-INFO files"
  },
  {
    "name": "IMetadataProvider",
    "doc": ""
  },
  {
    "name": "IResourceProvider",
    "doc": "An object that provides access to package resources"
  },
  {
    "name": "MemoizedZipManifests",
    "doc": "Memoized zipfile manifests."
  },
  {
    "name": "NoDists",
    "doc": ">>> bool(NoDists())"
  },
  {
    "name": "NullProvider",
    "doc": "Try to implement resources and metadata for arbitrary PEP 302 loaders"
  },
  {
    "name": "PEP440Warning",
    "doc": "Used when there is an issue with a version or specifier not complying with"
  },
  {
    "name": "PathMetadata",
    "doc": "Metadata provider for egg directories"
  },
  {
    "name": "PkgResourcesDeprecationWarning",
    "doc": "Base class for warning about deprecations in ``pkg_resources``"
  },
  {
    "name": "Requirement",
    "doc": "Parse a requirement."
  },
  {
    "name": "RequirementParseError",
    "doc": "Compatibility wrapper for InvalidRequirement"
  },
  {
    "name": "ResolutionError",
    "doc": "Abstract base for dependency resolution errors"
  },
  {
    "name": "ResourceManager",
    "doc": "Manage resource extraction and packages"
  },
  {
    "name": "UnknownExtra",
    "doc": "Distribution doesn't have an \"extra feature\" of the given name"
  },
  {
    "name": "VersionConflict",
    "doc": "An already-installed version conflicts with the requested version."
  },
  {
    "name": "WorkingSet",
    "doc": "A collection of active distributions on sys.path (or a similar list)"
  },
  {
    "name": "ZipManifests",
    "doc": "zip manifest builder"
  },
  {
    "name": "ZipProvider",
    "doc": "Resource support for zips and eggs"
  },
  {
    "name": "_ReqExtras",
    "doc": "Map each requirement to the extras that demanded it."
  },
  {
    "name": "parse_version",
    "doc": "This class abstracts handling of a project's versions."
  },
  {
    "name": "ImpImporter",
    "doc": "PEP 302 Finder that wraps Python's \"classic\" import algorithm"
  },
  {
    "name": "ImpLoader",
    "doc": "PEP 302 Loader that wraps Python's \"classic\" import algorithm"
  },
  {
    "name": "ModuleInfo",
    "doc": "A namedtuple with minimal info about a module."
  },
  {
    "name": "ModuleType",
    "doc": "Create a module object."
  },
  {
    "name": "zipimporter",
    "doc": "zipimporter(archivepath) -> zipimporter object"
  },
  {
    "name": "_Processor",
    "doc": ""
  },
  {
    "name": "uname_result",
    "doc": "A uname_result that's largely compatible with a"
  },
  {
    "name": "AppDirs",
    "doc": "On Unix/Linux, we follow the `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-"
  },
  {
    "name": "PlatformDirs",
    "doc": "On Unix/Linux, we follow the `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-"
  },
  {
    "name": "PlatformDirsABC",
    "doc": "Abstract base class for platform directories."
  },
  {
    "name": "_Result",
    "doc": "On Unix/Linux, we follow the `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-"
  },
  {
    "name": "BytesIO",
    "doc": "Buffered I/O implementation using an in-memory bytes buffer."
  },
  {
    "name": "InvalidFileException",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "PlistFormat",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "UID",
    "doc": ""
  },
  {
    "name": "_BinaryPlistParser",
    "doc": "Read or write a binary plist file, following the description of the binary"
  },
  {
    "name": "_BinaryPlistWriter",
    "doc": ""
  },
  {
    "name": "_DumbXMLWriter",
    "doc": ""
  },
  {
    "name": "_PlistParser",
    "doc": ""
  },
  {
    "name": "_PlistWriter",
    "doc": ""
  },
  {
    "name": "POP3",
    "doc": "This class supports both the minimal and optional command sets."
  },
  {
    "name": "POP3_SSL",
    "doc": "POP3 client class over SSL connection"
  },
  {
    "name": "error_proto",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "PrettyPrinter",
    "doc": ""
  },
  {
    "name": "_StringIO",
    "doc": "Text I/O implementation using an in-memory buffer."
  },
  {
    "name": "_safe_key",
    "doc": "Helper function for key functions when sorting unorderable objects."
  },
  {
    "name": "Profile",
    "doc": "Profiler class."
  },
  {
    "name": "_Utils",
    "doc": "Support class for utility functions which are shared by"
  },
  {
    "name": "ANSI",
    "doc": "ANSI formatted text."
  },
  {
    "name": "Application",
    "doc": "The main Application class!"
  },
  {
    "name": "HTML",
    "doc": "HTML formatted text."
  },
  {
    "name": "PromptSession",
    "doc": "PromptSession for a prompt application, which can be used as a GNU Readline"
  },
  {
    "name": "FunctionProfile",
    "doc": "FunctionProfile(ncalls: str, tottime: float, percall_tottime: float, cumtime: float, percall_cumtime: float, file_name: str, line_number: int)"
  },
  {
    "name": "SortKey",
    "doc": "An enumeration."
  },
  {
    "name": "Stats",
    "doc": "This class is used for creating reports from data generated by the"
  },
  {
    "name": "StatsProfile",
    "doc": "Class for keeping track of an item in inventory."
  },
  {
    "name": "StrEnum",
    "doc": "Enum where members are also (and must be) strings"
  },
  {
    "name": "TupleComp",
    "doc": "This class provides a generic function for comparing any two tuples."
  },
  {
    "name": "PyCompileError",
    "doc": "Exception raised when an error occurs while attempting to"
  },
  {
    "name": "PycInvalidationMode",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "Class",
    "doc": "Information about a Python class."
  },
  {
    "name": "Function",
    "doc": "Information about a Python function, including methods."
  },
  {
    "name": "_ModuleBrowser",
    "doc": "A node visitor base class that walks the abstract syntax tree and calls a"
  },
  {
    "name": "_Object",
    "doc": "Information about Python class or function."
  },
  {
    "name": "ExpatError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "XMLParserType",
    "doc": "XML parser"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Empty",
    "doc": "Exception raised by Queue.get(block=0)/get_nowait()."
  },
  {
    "name": "Full",
    "doc": "Exception raised by Queue.put(block=0)/put_nowait()."
  },
  {
    "name": "LifoQueue",
    "doc": "Variant of Queue that retrieves most recently added entries first."
  },
  {
    "name": "PriorityQueue",
    "doc": "Variant of Queue that retrieves open entries in priority order (lowest first)."
  },
  {
    "name": "Queue",
    "doc": "Create a queue object with a given maximum size."
  },
  {
    "name": "SimpleQueue",
    "doc": "Simple, unbounded, reentrant FIFO queue."
  },
  {
    "name": "_PySimpleQueue",
    "doc": "Simple, unbounded FIFO queue."
  },
  {
    "name": "deque",
    "doc": "deque([iterable[, maxlen]]) --> deque object"
  },
  {
    "name": "Random",
    "doc": "Random number generator base class used by bound module functions."
  },
  {
    "name": "SystemRandom",
    "doc": "Alternate random number generator using sources provided"
  },
  {
    "name": "_Sequence",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "_Set",
    "doc": "A set is a finite, iterable container."
  },
  {
    "name": "_accumulate",
    "doc": "Return series of accumulated sums (or other binary function results)."
  },
  {
    "name": "_repeat",
    "doc": "repeat(object [,times]) -> create an iterator which returns the object"
  },
  {
    "name": "Match",
    "doc": "The result of re.match() and re.search()."
  },
  {
    "name": "Pattern",
    "doc": "Compiled regular expression object."
  },
  {
    "name": "RegexFlag",
    "doc": "An enumeration."
  },
  {
    "name": "Scanner",
    "doc": ""
  },
  {
    "name": "error",
    "doc": "Exception raised for invalid regular expressions."
  },
  {
    "name": "Repr",
    "doc": ""
  },
  {
    "name": "islice",
    "doc": "islice(iterable, stop) --> islice object"
  },
  {
    "name": "ConnectTimeout",
    "doc": "The request timed out while trying to connect to the remote server."
  },
  {
    "name": "ConnectionError",
    "doc": "A Connection error occurred."
  },
  {
    "name": "DependencyWarning",
    "doc": "Warned when an attempt is made to import a module with missing optional"
  },
  {
    "name": "FileModeWarning",
    "doc": "A file was opened in text mode, but Requests determined its binary length."
  },
  {
    "name": "HTTPError",
    "doc": "An HTTP error occurred."
  },
  {
    "name": "JSONDecodeError",
    "doc": "Couldn't decode the text into json"
  },
  {
    "name": "NullHandler",
    "doc": "This handler does nothing. It's intended to be used to avoid the"
  },
  {
    "name": "PreparedRequest",
    "doc": "The fully mutable :class:`PreparedRequest <PreparedRequest>` object,"
  },
  {
    "name": "ReadTimeout",
    "doc": "The server did not send any data in the allotted amount of time."
  },
  {
    "name": "Request",
    "doc": "A user-created :class:`Request <Request>` object."
  },
  {
    "name": "RequestException",
    "doc": "There was an ambiguous exception that occurred while handling your"
  },
  {
    "name": "RequestsDependencyWarning",
    "doc": "An imported dependency doesn't match the expected version range."
  },
  {
    "name": "Response",
    "doc": "The :class:`Response <Response>` object, which contains a"
  },
  {
    "name": "Session",
    "doc": "A Requests session."
  },
  {
    "name": "Timeout",
    "doc": "The request timed out."
  },
  {
    "name": "TooManyRedirects",
    "doc": "Too many redirects."
  },
  {
    "name": "URLRequired",
    "doc": "A valid URL is required to make a request."
  },
  {
    "name": "error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "struct_rusage",
    "doc": "struct_rusage: Result from getrusage."
  },
  {
    "name": "Completer",
    "doc": ""
  },
  {
    "name": "ModuleType",
    "doc": "Create a module object."
  },
  {
    "name": "_Error",
    "doc": "Error that _run_module_as_main() should report without a traceback"
  },
  {
    "name": "_ModifiedArgv0",
    "doc": ""
  },
  {
    "name": "_TempModule",
    "doc": "Temporarily replace a module in sys.modules with an empty namespace"
  },
  {
    "name": "Event",
    "doc": "Event(time, priority, sequence, action, argument, kwargs)"
  },
  {
    "name": "count",
    "doc": "Return a count object whose .__next__() method returns consecutive values."
  },
  {
    "name": "scheduler",
    "doc": ""
  },
  {
    "name": "SystemRandom",
    "doc": "Alternate random number generator using sources provided"
  },
  {
    "name": "epoll",
    "doc": "select.epoll(sizehint=-1, flags=0)"
  },
  {
    "name": "error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "ABCMeta",
    "doc": "Metaclass for defining Abstract Base Classes (ABCs)."
  },
  {
    "name": "BaseSelector",
    "doc": "Selector abstract base class."
  },
  {
    "name": "DefaultSelector",
    "doc": "Epoll-based selector."
  },
  {
    "name": "EpollSelector",
    "doc": "Epoll-based selector."
  },
  {
    "name": "Mapping",
    "doc": "A Mapping is a generic container for associating key/value"
  },
  {
    "name": "PollSelector",
    "doc": "Poll-based selector."
  },
  {
    "name": "SelectSelector",
    "doc": "Select-based selector."
  },
  {
    "name": "SelectorKey",
    "doc": "SelectorKey(fileobj, fd, events, data)"
  },
  {
    "name": "_BaseSelectorImpl",
    "doc": "Base selector implementation."
  },
  {
    "name": "_PollLikeSelector",
    "doc": "Base class shared between poll, epoll and devpoll selectors."
  },
  {
    "name": "_SelectorMapping",
    "doc": "Mapping of file objects to selector keys."
  },
  {
    "name": "Command",
    "doc": "Setuptools internal actions are organized using a *command design pattern*."
  },
  {
    "name": "Distribution",
    "doc": "Distribution with support for tests and package data"
  },
  {
    "name": "DistutilsOptionError",
    "doc": "Syntactic/semantic errors in command options, such as use of"
  },
  {
    "name": "Extension",
    "doc": "Describes a single extension module."
  },
  {
    "name": "PEP420PackageFinder",
    "doc": "Generate a list of all Python packages found within a directory"
  },
  {
    "name": "PackageFinder",
    "doc": "Generate a list of all Python packages found within a directory"
  },
  {
    "name": "Require",
    "doc": "A prerequisite to building or installing a distribution"
  },
  {
    "name": "SetuptoolsDeprecationWarning",
    "doc": "Base class for warning deprecations in ``setuptools``"
  },
  {
    "name": "_Command",
    "doc": "Abstract base class for defining command classes, the \"worker bees\""
  },
  {
    "name": "sic",
    "doc": "Treat this string as-is (https://en.wikipedia.org/wiki/Sic)"
  },
  {
    "name": "BsdDbShelf",
    "doc": "Shelf implementation using the \"BSD\" db interface."
  },
  {
    "name": "BytesIO",
    "doc": "Buffered I/O implementation using an in-memory bytes buffer."
  },
  {
    "name": "DbfilenameShelf",
    "doc": "Shelf implementation using the \"dbm\" generic dbm interface."
  },
  {
    "name": "Pickler",
    "doc": "This takes a binary file for writing a pickle data stream."
  },
  {
    "name": "Shelf",
    "doc": "Base class for shelf implementations."
  },
  {
    "name": "Unpickler",
    "doc": "This takes a binary file for reading a pickle data stream."
  },
  {
    "name": "_ClosedDict",
    "doc": "Marker for a closed dict.  Access attempts raise a ValueError."
  },
  {
    "name": "StringIO",
    "doc": "Text I/O implementation using an in-memory buffer."
  },
  {
    "name": "deque",
    "doc": "deque([iterable[, maxlen]]) --> deque object"
  },
  {
    "name": "shlex",
    "doc": "A lexical analyzer class for simple shell-like syntaxes."
  },
  {
    "name": "Error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "ExecError",
    "doc": "Raised when a command could not be executed"
  },
  {
    "name": "ReadError",
    "doc": "Raised when an archive cannot be read"
  },
  {
    "name": "RegistryError",
    "doc": "Raised when a registry operation with the archiving"
  },
  {
    "name": "SameFileError",
    "doc": "Raised when source and destination are the same file."
  },
  {
    "name": "SpecialFileError",
    "doc": "Raised when trying to do a kind of operation (e.g. copying) which is"
  },
  {
    "name": "_GiveupOnFastCopy",
    "doc": "Raised as a signal to fallback on using raw read()/write()"
  },
  {
    "name": "_ntuple_diskusage",
    "doc": "usage(total, used, free)"
  },
  {
    "name": "Handlers",
    "doc": "An enumeration."
  },
  {
    "name": "ItimerError",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "Sigmasks",
    "doc": "An enumeration."
  },
  {
    "name": "Signals",
    "doc": "An enumeration."
  },
  {
    "name": "_IntEnum",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "struct_siginfo",
    "doc": "struct_siginfo: Result from sigwaitinfo or sigtimedwait."
  },
  {
    "name": "DebuggingServer",
    "doc": ""
  },
  {
    "name": "Devnull",
    "doc": ""
  },
  {
    "name": "Options",
    "doc": ""
  },
  {
    "name": "PureProxy",
    "doc": ""
  },
  {
    "name": "SMTPChannel",
    "doc": "This is an abstract class.  You must derive from this class, and add"
  },
  {
    "name": "SMTPServer",
    "doc": ""
  },
  {
    "name": "LMTP",
    "doc": "LMTP - Local Mail Transfer Protocol"
  },
  {
    "name": "SMTP",
    "doc": "This class manages a connection to an SMTP or ESMTP server."
  },
  {
    "name": "SMTPAuthenticationError",
    "doc": "Authentication error."
  },
  {
    "name": "SMTPConnectError",
    "doc": "Error during connection establishment."
  },
  {
    "name": "SMTPDataError",
    "doc": "The SMTP server didn't accept the data."
  },
  {
    "name": "SMTPException",
    "doc": "Base class for all exceptions raised by this module."
  },
  {
    "name": "SMTPHeloError",
    "doc": "The server refused our HELO reply."
  },
  {
    "name": "SMTPNotSupportedError",
    "doc": "The command or option is not supported by the SMTP server."
  },
  {
    "name": "SMTPRecipientsRefused",
    "doc": "All recipient addresses refused."
  },
  {
    "name": "SMTPResponseException",
    "doc": "Base class for all exceptions that include an SMTP error code."
  },
  {
    "name": "SMTPSenderRefused",
    "doc": "Sender address refused."
  },
  {
    "name": "SMTPServerDisconnected",
    "doc": "Not connected to any SMTP server."
  },
  {
    "name": "SMTP_SSL",
    "doc": "This is a subclass derived from SMTP that connects over an SSL"
  },
  {
    "name": "SndHeaders",
    "doc": "SndHeaders(filetype, framerate, nchannels, nframes, sampwidth)"
  },
  {
    "name": "AddressFamily",
    "doc": "An enumeration."
  },
  {
    "name": "AddressInfo",
    "doc": "An enumeration."
  },
  {
    "name": "IntEnum",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "IntFlag",
    "doc": "Support for integer-based Flags"
  },
  {
    "name": "MsgFlag",
    "doc": "An enumeration."
  },
  {
    "name": "SocketIO",
    "doc": "Raw I/O implementation for stream sockets."
  },
  {
    "name": "SocketKind",
    "doc": "An enumeration."
  },
  {
    "name": "SocketType",
    "doc": "socket(family=AF_INET, type=SOCK_STREAM, proto=0) -> socket object"
  },
  {
    "name": "_GiveupOnSendfile",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "gaierror",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "herror",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "socket",
    "doc": "A subclass of _socket.socket adding the makefile() method."
  },
  {
    "name": "timeout",
    "doc": "Timeout expired."
  },
  {
    "name": "BaseRequestHandler",
    "doc": "Base class for request handler classes."
  },
  {
    "name": "BaseServer",
    "doc": "Base class for server classes."
  },
  {
    "name": "BufferedIOBase",
    "doc": "Base class for buffered IO objects."
  },
  {
    "name": "DatagramRequestHandler",
    "doc": "Define self.rfile and self.wfile for datagram sockets."
  },
  {
    "name": "ForkingMixIn",
    "doc": "Mix-in class to handle each request in a new process."
  },
  {
    "name": "ForkingTCPServer",
    "doc": "Mix-in class to handle each request in a new process."
  },
  {
    "name": "ForkingUDPServer",
    "doc": "Mix-in class to handle each request in a new process."
  },
  {
    "name": "StreamRequestHandler",
    "doc": "Define self.rfile and self.wfile for stream sockets."
  },
  {
    "name": "TCPServer",
    "doc": "Base class for various socket-based server classes."
  },
  {
    "name": "ThreadingMixIn",
    "doc": "Mix-in class to handle each request in a new thread."
  },
  {
    "name": "ThreadingTCPServer",
    "doc": "Mix-in class to handle each request in a new thread."
  },
  {
    "name": "ThreadingUDPServer",
    "doc": "Mix-in class to handle each request in a new thread."
  },
  {
    "name": "ThreadingUnixDatagramServer",
    "doc": "Mix-in class to handle each request in a new thread."
  },
  {
    "name": "ThreadingUnixStreamServer",
    "doc": "Mix-in class to handle each request in a new thread."
  },
  {
    "name": "UDPServer",
    "doc": "UDP server class."
  },
  {
    "name": "UnixDatagramServer",
    "doc": "UDP server class."
  },
  {
    "name": "UnixStreamServer",
    "doc": "Base class for various socket-based server classes."
  },
  {
    "name": "_NoThreads",
    "doc": "Degenerate version of _Threads."
  },
  {
    "name": "_ServerSelector",
    "doc": "Poll-based selector."
  },
  {
    "name": "_SocketWriter",
    "doc": "Simple writable BufferedIOBase implementation for a socket"
  },
  {
    "name": "_Threads",
    "doc": "Joinable list of all non-daemon threads."
  },
  {
    "name": "Any",
    "doc": "Special type indicating an unconstrained type."
  },
  {
    "name": "SelectorSyntaxError",
    "doc": "Syntax error in a CSS selector."
  },
  {
    "name": "SoupSieve",
    "doc": "Compiled Soup Sieve selector matching object."
  },
  {
    "name": "error",
    "doc": "Exception raised for invalid regular expressions."
  },
  {
    "name": "_NamedIntConstant",
    "doc": "int([x]) -> integer"
  },
  {
    "name": "error",
    "doc": "Exception raised for invalid regular expressions."
  },
  {
    "name": "State",
    "doc": ""
  },
  {
    "name": "SubPattern",
    "doc": ""
  },
  {
    "name": "Tokenizer",
    "doc": ""
  },
  {
    "name": "error",
    "doc": "Exception raised for invalid regular expressions."
  },
  {
    "name": "AlertDescription",
    "doc": "An enumeration."
  },
  {
    "name": "CertificateError",
    "doc": "A certificate could not be verified."
  },
  {
    "name": "DefaultVerifyPaths",
    "doc": "DefaultVerifyPaths(cafile, capath, openssl_cafile_env, openssl_cafile, openssl_capath_env, openssl_capath)"
  },
  {
    "name": "MemoryBIO",
    "doc": ""
  },
  {
    "name": "Options",
    "doc": "An enumeration."
  },
  {
    "name": "Purpose",
    "doc": "SSLContext purpose flags with X509v3 Extended Key Usage objects"
  },
  {
    "name": "SSLCertVerificationError",
    "doc": "A certificate could not be verified."
  },
  {
    "name": "SSLContext",
    "doc": "An SSLContext holds various SSL-related configuration options and"
  },
  {
    "name": "SSLEOFError",
    "doc": "SSL/TLS connection terminated abruptly."
  },
  {
    "name": "SSLError",
    "doc": "An error occurred in the SSL implementation."
  },
  {
    "name": "SSLErrorNumber",
    "doc": "An enumeration."
  },
  {
    "name": "SSLObject",
    "doc": "This class implements an interface on top of a low-level SSL object as"
  },
  {
    "name": "SSLSession",
    "doc": ""
  },
  {
    "name": "SSLSocket",
    "doc": "This class implements a subtype of socket.socket that wraps"
  },
  {
    "name": "SSLSyscallError",
    "doc": "System error when attempting SSL operation."
  },
  {
    "name": "SSLWantReadError",
    "doc": "Non-blocking SSL socket needs to read more data"
  },
  {
    "name": "SSLWantWriteError",
    "doc": "Non-blocking SSL socket needs to write more data"
  },
  {
    "name": "SSLZeroReturnError",
    "doc": "SSL/TLS session closed cleanly."
  },
  {
    "name": "TLSVersion",
    "doc": "An enumeration."
  },
  {
    "name": "VerifyFlags",
    "doc": "An enumeration."
  },
  {
    "name": "VerifyMode",
    "doc": "An enumeration."
  },
  {
    "name": "_ASN1Object",
    "doc": "ASN.1 object identifier lookup"
  },
  {
    "name": "_Enum",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "_IntEnum",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "_IntFlag",
    "doc": "Support for integer-based Flags"
  },
  {
    "name": "_SSLContext",
    "doc": ""
  },
  {
    "name": "_SSLMethod",
    "doc": "An enumeration."
  },
  {
    "name": "_TLSAlertType",
    "doc": "Alert types for TLSContentType.ALERT messages"
  },
  {
    "name": "_TLSContentType",
    "doc": "Content types (record layer)"
  },
  {
    "name": "_TLSMessageType",
    "doc": "Message types (handshake protocol)"
  },
  {
    "name": "socket",
    "doc": "A subclass of _socket.socket adding the makefile() method."
  },
  {
    "name": "socket_error",
    "doc": "Base class for I/O related errors."
  },
  {
    "name": "Counter",
    "doc": "Dict subclass for counting hashable items.  Sometimes called a bag"
  },
  {
    "name": "Decimal",
    "doc": "Construct a new Decimal object. 'value' can be an integer, string, tuple,"
  },
  {
    "name": "Fraction",
    "doc": "This class implements rational numbers."
  },
  {
    "name": "LinearRegression",
    "doc": "LinearRegression(slope, intercept)"
  },
  {
    "name": "NormalDist",
    "doc": "Normal distribution of a random variable"
  },
  {
    "name": "StatisticsError",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "defaultdict",
    "doc": "defaultdict(default_factory=None, /, [...]) --> dict with default factory"
  },
  {
    "name": "groupby",
    "doc": "make an iterator that returns consecutive keys and groups from the iterable"
  },
  {
    "name": "repeat",
    "doc": "repeat(object [,times]) -> create an iterator which returns the object"
  },
  {
    "name": "Formatter",
    "doc": ""
  },
  {
    "name": "Template",
    "doc": "A string class for supporting $-substitutions."
  },
  {
    "name": "_ChainMap",
    "doc": "A ChainMap groups multiple dicts (or other mappings) together"
  },
  {
    "name": "Struct",
    "doc": "Struct(fmt) --> compiled struct object"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "CalledProcessError",
    "doc": "Raised when run() is called with check=True and the process"
  },
  {
    "name": "CompletedProcess",
    "doc": "A process that has finished running."
  },
  {
    "name": "Popen",
    "doc": "Execute a child program in a new process."
  },
  {
    "name": "SubprocessError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "TimeoutExpired",
    "doc": "This exception is raised when the timeout expires while waiting for a"
  },
  {
    "name": "_PopenSelector",
    "doc": "Poll-based selector."
  },
  {
    "name": "Au_read",
    "doc": ""
  },
  {
    "name": "Au_write",
    "doc": ""
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "_sunau_params",
    "doc": "_sunau_params(nchannels, sampwidth, framerate, nframes, comptype, compname)"
  },
  {
    "name": "Class",
    "doc": ""
  },
  {
    "name": "Function",
    "doc": ""
  },
  {
    "name": "Symbol",
    "doc": ""
  },
  {
    "name": "SymbolTable",
    "doc": ""
  },
  {
    "name": "SymbolTableFactory",
    "doc": ""
  },
  {
    "name": "NannyNag",
    "doc": "Raised by process_tokens() if detecting an ambiguous indent."
  },
  {
    "name": "Whitespace",
    "doc": ""
  },
  {
    "name": "AbsoluteLinkError",
    "doc": "Base exception."
  },
  {
    "name": "AbsolutePathError",
    "doc": "Base exception."
  },
  {
    "name": "CompressionError",
    "doc": "Exception for unavailable compression methods."
  },
  {
    "name": "EOFHeaderError",
    "doc": "Exception for end of file headers."
  },
  {
    "name": "EmptyHeaderError",
    "doc": "Exception for empty headers."
  },
  {
    "name": "ExFileObject",
    "doc": "Create a new buffered reader using the given readable raw IO object."
  },
  {
    "name": "ExtractError",
    "doc": "General exception for extract errors."
  },
  {
    "name": "FilterError",
    "doc": "Base exception."
  },
  {
    "name": "HeaderError",
    "doc": "Base exception for header errors."
  },
  {
    "name": "InvalidHeaderError",
    "doc": "Exception for invalid headers."
  },
  {
    "name": "LinkOutsideDestinationError",
    "doc": "Base exception."
  },
  {
    "name": "OutsideDestinationError",
    "doc": "Base exception."
  },
  {
    "name": "ReadError",
    "doc": "Exception for unreadable tar archives."
  },
  {
    "name": "SpecialFileError",
    "doc": "Base exception."
  },
  {
    "name": "StreamError",
    "doc": "Exception for unsupported operations on stream-like TarFiles."
  },
  {
    "name": "SubsequentHeaderError",
    "doc": "Exception for missing and invalid extended headers."
  },
  {
    "name": "TarError",
    "doc": "Base exception."
  },
  {
    "name": "TarFile",
    "doc": "The TarFile Class provides an interface to tar archives."
  },
  {
    "name": "TarInfo",
    "doc": "Informational class which holds the details about an"
  },
  {
    "name": "TruncatedHeaderError",
    "doc": "Exception for truncated headers."
  },
  {
    "name": "_FileInFile",
    "doc": "A thin wrapper around an existing file object that"
  },
  {
    "name": "_LowLevelFile",
    "doc": "Low-level file object. Supports reading and writing."
  },
  {
    "name": "_Stream",
    "doc": "Class that serves as an adapter between TarFile and"
  },
  {
    "name": "_StreamProxy",
    "doc": "Small proxy class that enables transparent compression"
  },
  {
    "name": "Telnet",
    "doc": "Telnet interface class."
  },
  {
    "name": "_TelnetSelector",
    "doc": "Poll-based selector."
  },
  {
    "name": "SpooledTemporaryFile",
    "doc": "Temporary file wrapper, specialized to switch from BytesIO"
  },
  {
    "name": "TemporaryDirectory",
    "doc": "Create and return a temporary directory.  This has the same"
  },
  {
    "name": "_Random",
    "doc": "Random number generator base class used by bound module functions."
  },
  {
    "name": "_RandomNameSequence",
    "doc": "An instance of _RandomNameSequence generates an endless"
  },
  {
    "name": "_TemporaryFileCloser",
    "doc": "A separate object allowing proper closing of a temporary file's"
  },
  {
    "name": "_TemporaryFileWrapper",
    "doc": "Temporary file wrapper"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "TextWrapper",
    "doc": "Object for wrapping/filling text.  The public interface consists of"
  },
  {
    "name": "Barrier",
    "doc": "Implements a Barrier."
  },
  {
    "name": "BoundedSemaphore",
    "doc": "Implements a bounded semaphore."
  },
  {
    "name": "BrokenBarrierError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "Condition",
    "doc": "Class that implements a condition variable."
  },
  {
    "name": "Event",
    "doc": "Class implementing event objects."
  },
  {
    "name": "ExceptHookArgs",
    "doc": "ExceptHookArgs"
  },
  {
    "name": "Semaphore",
    "doc": "This class implements semaphore objects."
  },
  {
    "name": "Thread",
    "doc": "A class that represents a thread of control."
  },
  {
    "name": "ThreadError",
    "doc": "Unspecified run-time error."
  },
  {
    "name": "Timer",
    "doc": "Call a function after a specified number of seconds:"
  },
  {
    "name": "WeakSet",
    "doc": ""
  },
  {
    "name": "_CRLock",
    "doc": ""
  },
  {
    "name": "_DummyThread",
    "doc": "A class that represents a thread of control."
  },
  {
    "name": "_MainThread",
    "doc": "A class that represents a thread of control."
  },
  {
    "name": "_PyRLock",
    "doc": "This class implements reentrant lock objects."
  },
  {
    "name": "_RLock",
    "doc": "This class implements reentrant lock objects."
  },
  {
    "name": "_count",
    "doc": "Return a count object whose .__next__() method returns consecutive values."
  },
  {
    "name": "_deque",
    "doc": "deque([iterable[, maxlen]]) --> deque object"
  },
  {
    "name": "_islice",
    "doc": "islice(iterable, stop) --> islice object"
  },
  {
    "name": "local",
    "doc": "Thread-local data"
  },
  {
    "name": "Timer",
    "doc": "Class for timing execution speed of small code snippets."
  },
  {
    "name": "StopTokenizing",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "TextIOWrapper",
    "doc": "Character and line based layer over a BufferedIOBase object, buffer."
  },
  {
    "name": "TokenError",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "TokenInfo",
    "doc": "TokenInfo(type, string, start, end, line)"
  },
  {
    "name": "Untokenizer",
    "doc": ""
  },
  {
    "name": "TOMLDecodeError",
    "doc": "An error raised if a document is not valid TOML."
  },
  {
    "name": "CoverageResults",
    "doc": ""
  },
  {
    "name": "Trace",
    "doc": ""
  },
  {
    "name": "_Ignore",
    "doc": ""
  },
  {
    "name": "FrameSummary",
    "doc": "Information about a single frame from a traceback."
  },
  {
    "name": "StackSummary",
    "doc": "A list of FrameSummary objects, representing a stack of frames."
  },
  {
    "name": "TracebackException",
    "doc": "An exception ready for rendering."
  },
  {
    "name": "_Anchors",
    "doc": "_Anchors(left_end_offset, right_start_offset, primary_char, secondary_char)"
  },
  {
    "name": "_ExceptionPrintContext",
    "doc": ""
  },
  {
    "name": "_Sentinel",
    "doc": ""
  },
  {
    "name": "suppress",
    "doc": "Context manager to suppress specified exceptions"
  },
  {
    "name": "BaseFilter",
    "doc": ""
  },
  {
    "name": "DomainFilter",
    "doc": ""
  },
  {
    "name": "Filter",
    "doc": ""
  },
  {
    "name": "Frame",
    "doc": "Frame of a traceback."
  },
  {
    "name": "Iterable",
    "doc": ""
  },
  {
    "name": "Sequence",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "Snapshot",
    "doc": "Snapshot of traces of memory blocks allocated by Python."
  },
  {
    "name": "Statistic",
    "doc": "Statistic difference on memory allocations between two Snapshot instance."
  },
  {
    "name": "StatisticDiff",
    "doc": "Statistic difference on memory allocations between an old and a new"
  },
  {
    "name": "Trace",
    "doc": "Trace of a memory block."
  },
  {
    "name": "Traceback",
    "doc": "Sequence of Frame instances sorted from the oldest frame"
  },
  {
    "name": "_Traces",
    "doc": "All the operations on a read-only sequence."
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "AsyncGeneratorType",
    "doc": ""
  },
  {
    "name": "BuiltinFunctionType",
    "doc": ""
  },
  {
    "name": "BuiltinMethodType",
    "doc": ""
  },
  {
    "name": "CellType",
    "doc": "Create a new cell object."
  },
  {
    "name": "ClassMethodDescriptorType",
    "doc": ""
  },
  {
    "name": "CodeType",
    "doc": "Create a code object.  Not for the faint of heart."
  },
  {
    "name": "CoroutineType",
    "doc": ""
  },
  {
    "name": "DynamicClassAttribute",
    "doc": "Route attribute access on a class to __getattr__."
  },
  {
    "name": "EllipsisType",
    "doc": ""
  },
  {
    "name": "FrameType",
    "doc": ""
  },
  {
    "name": "FunctionType",
    "doc": "Create a function object."
  },
  {
    "name": "GeneratorType",
    "doc": ""
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "GetSetDescriptorType",
    "doc": ""
  },
  {
    "name": "LambdaType",
    "doc": "Create a function object."
  },
  {
    "name": "MappingProxyType",
    "doc": ""
  },
  {
    "name": "MemberDescriptorType",
    "doc": ""
  },
  {
    "name": "MethodDescriptorType",
    "doc": ""
  },
  {
    "name": "MethodType",
    "doc": "Create a bound instance method object."
  },
  {
    "name": "MethodWrapperType",
    "doc": ""
  },
  {
    "name": "ModuleType",
    "doc": "Create a module object."
  },
  {
    "name": "NoneType",
    "doc": ""
  },
  {
    "name": "NotImplementedType",
    "doc": ""
  },
  {
    "name": "SimpleNamespace",
    "doc": "A simple attribute-based namespace."
  },
  {
    "name": "TracebackType",
    "doc": "TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)"
  },
  {
    "name": "UnionType",
    "doc": "Represent a PEP 604 union type"
  },
  {
    "name": "WrapperDescriptorType",
    "doc": ""
  },
  {
    "name": "_GeneratorWrapper",
    "doc": ""
  },
  {
    "name": "ABCMeta",
    "doc": "Metaclass for defining Abstract Base Classes (ABCs)."
  },
  {
    "name": "Annotated",
    "doc": "Add context-specific metadata to a type."
  },
  {
    "name": "Any",
    "doc": "Special type indicating an unconstrained type."
  },
  {
    "name": "BinaryIO",
    "doc": "Typed version of the return of open() in binary mode."
  },
  {
    "name": "ForwardRef",
    "doc": "Internal wrapper to hold a forward reference."
  },
  {
    "name": "Generic",
    "doc": "Abstract base class for generic types."
  },
  {
    "name": "GenericAlias",
    "doc": "Represent a PEP 585 generic type"
  },
  {
    "name": "IO",
    "doc": "Generic base class for TextIO and BinaryIO."
  },
  {
    "name": "MethodDescriptorType",
    "doc": ""
  },
  {
    "name": "MethodWrapperType",
    "doc": ""
  },
  {
    "name": "NamedTupleMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "NewType",
    "doc": "NewType creates simple unique types with almost zero runtime overhead."
  },
  {
    "name": "ParamSpec",
    "doc": "Parameter specification variable."
  },
  {
    "name": "ParamSpecArgs",
    "doc": "The args for a ParamSpec object."
  },
  {
    "name": "ParamSpecKwargs",
    "doc": "The kwargs for a ParamSpec object."
  },
  {
    "name": "Protocol",
    "doc": "Base class for protocol classes."
  },
  {
    "name": "SupportsAbs",
    "doc": "An ABC with one abstract method __abs__ that is covariant in its return type."
  },
  {
    "name": "SupportsBytes",
    "doc": "An ABC with one abstract method __bytes__."
  },
  {
    "name": "SupportsComplex",
    "doc": "An ABC with one abstract method __complex__."
  },
  {
    "name": "SupportsFloat",
    "doc": "An ABC with one abstract method __float__."
  },
  {
    "name": "SupportsIndex",
    "doc": "An ABC with one abstract method __index__."
  },
  {
    "name": "SupportsInt",
    "doc": "An ABC with one abstract method __int__."
  },
  {
    "name": "SupportsRound",
    "doc": "An ABC with one abstract method __round__ that is covariant in its return type."
  },
  {
    "name": "Text",
    "doc": "str(object='') -> str"
  },
  {
    "name": "TextIO",
    "doc": "Typed version of the return of open() in text mode."
  },
  {
    "name": "TypeVar",
    "doc": "Type variable."
  },
  {
    "name": "TypeVarTuple",
    "doc": "Type variable tuple."
  },
  {
    "name": "WrapperDescriptorType",
    "doc": ""
  },
  {
    "name": "_AnnotatedAlias",
    "doc": "Runtime representation of an annotated type."
  },
  {
    "name": "_AnyMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "_BaseGenericAlias",
    "doc": "The central part of the internal API."
  },
  {
    "name": "_BoundVarianceMixin",
    "doc": "Mixin giving __init__ bound and variance arguments."
  },
  {
    "name": "_CallableGenericAlias",
    "doc": "Mixin to prevent iteration, without being compatible with Iterable."
  },
  {
    "name": "_CallableType",
    "doc": "Mixin to prevent iteration, without being compatible with Iterable."
  },
  {
    "name": "_ConcatenateGenericAlias",
    "doc": "The central part of the internal API."
  },
  {
    "name": "_DeprecatedType",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "_Final",
    "doc": "Mixin to prohibit subclassing."
  },
  {
    "name": "_GenericAlias",
    "doc": "The central part of the internal API."
  },
  {
    "name": "_Immutable",
    "doc": "Mixin to indicate that object should not be copied."
  },
  {
    "name": "_LiteralGenericAlias",
    "doc": "The central part of the internal API."
  },
  {
    "name": "_LiteralSpecialForm",
    "doc": ""
  },
  {
    "name": "_NamedTuple",
    "doc": ""
  },
  {
    "name": "_NotIterable",
    "doc": "Mixin to prevent iteration, without being compatible with Iterable."
  },
  {
    "name": "_PickleUsingNameMixin",
    "doc": "Mixin enabling pickling based on self.__name__."
  },
  {
    "name": "_ProtocolMeta",
    "doc": "Metaclass for defining Abstract Base Classes (ABCs)."
  },
  {
    "name": "_SpecialForm",
    "doc": ""
  },
  {
    "name": "_SpecialGenericAlias",
    "doc": "Mixin to prevent iteration, without being compatible with Iterable."
  },
  {
    "name": "_TupleType",
    "doc": "Mixin to prevent iteration, without being compatible with Iterable."
  },
  {
    "name": "_TypedDict",
    "doc": ""
  },
  {
    "name": "_TypedDictMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "_TypingEllipsis",
    "doc": "Internal placeholder for ... (ellipsis)."
  },
  {
    "name": "_UnionGenericAlias",
    "doc": "Mixin to prevent iteration, without being compatible with Iterable."
  },
  {
    "name": "_UnpackGenericAlias",
    "doc": "The central part of the internal API."
  },
  {
    "name": "_alias",
    "doc": "Mixin to prevent iteration, without being compatible with Iterable."
  },
  {
    "name": "defaultdict",
    "doc": "defaultdict(default_factory=None, /, [...]) --> dict with default factory"
  },
  {
    "name": "io",
    "doc": "Wrapper namespace for IO generic classes."
  },
  {
    "name": "re",
    "doc": "Wrapper namespace for re type aliases."
  },
  {
    "name": "Annotated",
    "doc": "Add context-specific metadata to a type."
  },
  {
    "name": "Any",
    "doc": "Special type indicating an unconstrained type."
  },
  {
    "name": "BinaryIO",
    "doc": "Typed version of the return of open() in binary mode."
  },
  {
    "name": "Buffer",
    "doc": "Base class for classes that implement the buffer protocol."
  },
  {
    "name": "CapsuleType",
    "doc": "Capsule objects let you wrap a C \"void *\" pointer in a Python"
  },
  {
    "name": "Doc",
    "doc": "Define the documentation of a type annotation using ``Annotated``, to be"
  },
  {
    "name": "Format",
    "doc": "Enum where members are also (and must be) ints"
  },
  {
    "name": "ForwardRef",
    "doc": "Internal wrapper to hold a forward reference."
  },
  {
    "name": "Generic",
    "doc": "Abstract base class for generic types."
  },
  {
    "name": "GenericMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "IO",
    "doc": "Generic base class for TextIO and BinaryIO."
  },
  {
    "name": "NewType",
    "doc": "NewType creates simple unique types with almost zero runtime overhead."
  },
  {
    "name": "ParamSpec",
    "doc": "Parameter specification."
  },
  {
    "name": "ParamSpecArgs",
    "doc": "The args for a ParamSpec object."
  },
  {
    "name": "ParamSpecKwargs",
    "doc": "The kwargs for a ParamSpec object."
  },
  {
    "name": "Protocol",
    "doc": "Base class for protocol classes."
  },
  {
    "name": "Reader",
    "doc": "Protocol for simple I/O reader instances."
  },
  {
    "name": "Sentinel",
    "doc": "Create a unique sentinel object."
  },
  {
    "name": "SupportsAbs",
    "doc": "An ABC with one abstract method __abs__ that is covariant in its return type."
  },
  {
    "name": "SupportsBytes",
    "doc": "An ABC with one abstract method __bytes__."
  },
  {
    "name": "SupportsComplex",
    "doc": "An ABC with one abstract method __complex__."
  },
  {
    "name": "SupportsFloat",
    "doc": "An ABC with one abstract method __float__."
  },
  {
    "name": "SupportsIndex",
    "doc": "Base class for protocol classes."
  },
  {
    "name": "SupportsInt",
    "doc": "An ABC with one abstract method __int__."
  },
  {
    "name": "SupportsRound",
    "doc": "An ABC with one abstract method __round__ that is covariant in its return type."
  },
  {
    "name": "Text",
    "doc": "str(object='') -> str"
  },
  {
    "name": "TextIO",
    "doc": "Typed version of the return of open() in text mode."
  },
  {
    "name": "TypeAliasType",
    "doc": "Create named, parameterized type aliases."
  },
  {
    "name": "TypeVar",
    "doc": "Type variable."
  },
  {
    "name": "TypeVarTuple",
    "doc": "Type variable tuple."
  },
  {
    "name": "Writer",
    "doc": "Protocol for simple I/O writer instances."
  },
  {
    "name": "_AnnotatedAlias",
    "doc": "Runtime representation of an annotated type."
  },
  {
    "name": "_CapsuleType",
    "doc": "Capsule objects let you wrap a C \"void *\" pointer in a Python"
  },
  {
    "name": "_ConcatenateGenericAlias",
    "doc": "The central part of the internal API."
  },
  {
    "name": "_DefaultMixin",
    "doc": "Mixin for TypeVarLike defaults."
  },
  {
    "name": "_EllipsisDummy",
    "doc": ""
  },
  {
    "name": "_ExtensionsSpecialForm",
    "doc": ""
  },
  {
    "name": "_NamedTuple",
    "doc": ""
  },
  {
    "name": "_NamedTupleMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "_NoneType",
    "doc": ""
  },
  {
    "name": "_ProtocolMeta",
    "doc": "Metaclass for defining Abstract Base Classes (ABCs)."
  },
  {
    "name": "_Sentinel",
    "doc": ""
  },
  {
    "name": "_SpecialForm",
    "doc": ""
  },
  {
    "name": "_SpecialGenericAlias",
    "doc": "Mixin to prevent iteration, without being compatible with Iterable."
  },
  {
    "name": "_TypeFormForm",
    "doc": ""
  },
  {
    "name": "_TypeVarLikeMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "_TypedDict",
    "doc": ""
  },
  {
    "name": "_TypedDictMeta",
    "doc": "type(object) -> the object's type"
  },
  {
    "name": "_TypedDictSpecialForm",
    "doc": ""
  },
  {
    "name": "_UnpackAlias",
    "doc": "The central part of the internal API."
  },
  {
    "name": "_UnpackSpecialForm",
    "doc": ""
  },
  {
    "name": "deprecated",
    "doc": "Indicate that a class, function or overload is deprecated."
  },
  {
    "name": "UCD",
    "doc": ""
  },
  {
    "name": "BaseHTTPResponse",
    "doc": "The abstract base class for all I/O classes."
  },
  {
    "name": "HTTPConnectionPool",
    "doc": "Thread-safe connection pool for one host."
  },
  {
    "name": "HTTPHeaderDict",
    "doc": ":param headers:"
  },
  {
    "name": "HTTPResponse",
    "doc": "HTTP Response container."
  },
  {
    "name": "HTTPSConnectionPool",
    "doc": "Same as :class:`.HTTPConnectionPool`, but HTTPS."
  },
  {
    "name": "PoolManager",
    "doc": "Allows for arbitrary requests while transparently keeping track of"
  },
  {
    "name": "ProxyManager",
    "doc": "Behaves just like :class:`PoolManager`, but sends all requests through"
  },
  {
    "name": "Retry",
    "doc": "Retry configuration."
  },
  {
    "name": "Timeout",
    "doc": "Timeout configuration."
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Enum",
    "doc": "Create a collection of name/value pairs."
  },
  {
    "name": "SafeUUID",
    "doc": "An enumeration."
  },
  {
    "name": "UUID",
    "doc": "Instances of the UUID class represent UUIDs as specified in RFC 4122."
  },
  {
    "name": "bytes_",
    "doc": "bytes(iterable_of_ints) -> bytes"
  },
  {
    "name": "int_",
    "doc": "int([x]) -> integer"
  },
  {
    "name": "EnvBuilder",
    "doc": "This class exists to allow virtual environment creation to be"
  },
  {
    "name": "WarningMessage",
    "doc": ""
  },
  {
    "name": "_OptionError",
    "doc": "Exception used by option processing helpers."
  },
  {
    "name": "catch_warnings",
    "doc": "A context manager that copies and restores the warnings filter upon"
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Wave_read",
    "doc": "Variables used in this class:"
  },
  {
    "name": "Wave_write",
    "doc": "Variables used in this class:"
  },
  {
    "name": "_Chunk",
    "doc": ""
  },
  {
    "name": "_wave_params",
    "doc": "_wave_params(nchannels, sampwidth, framerate, nframes, comptype, compname)"
  },
  {
    "name": "CallableProxyType",
    "doc": ""
  },
  {
    "name": "KeyedRef",
    "doc": "Specialized reference that includes a key corresponding to the value."
  },
  {
    "name": "ProxyType",
    "doc": ""
  },
  {
    "name": "ReferenceType",
    "doc": ""
  },
  {
    "name": "WeakKeyDictionary",
    "doc": "Mapping class that references keys weakly."
  },
  {
    "name": "WeakMethod",
    "doc": "A custom `weakref.ref` subclass which simulates a weak reference to"
  },
  {
    "name": "WeakSet",
    "doc": ""
  },
  {
    "name": "WeakValueDictionary",
    "doc": "Mapping class that references values weakly."
  },
  {
    "name": "_IterationGuard",
    "doc": ""
  },
  {
    "name": "finalize",
    "doc": "Class for finalization of weakrefable objects"
  },
  {
    "name": "ref",
    "doc": ""
  },
  {
    "name": "BackgroundBrowser",
    "doc": "Class for all browsers which are to be started in the"
  },
  {
    "name": "BaseBrowser",
    "doc": "Parent class for all browsers. Do not use directly."
  },
  {
    "name": "Chrome",
    "doc": "Launcher class for Google Chrome browser."
  },
  {
    "name": "Chromium",
    "doc": "Launcher class for Google Chrome browser."
  },
  {
    "name": "Elinks",
    "doc": "Launcher class for Elinks browsers."
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Galeon",
    "doc": "Launcher class for Galeon/Epiphany browsers."
  },
  {
    "name": "GenericBrowser",
    "doc": "Class for all browsers started with a command"
  },
  {
    "name": "Grail",
    "doc": "Parent class for all browsers. Do not use directly."
  },
  {
    "name": "Konqueror",
    "doc": "Controller for the KDE File Manager (kfm, or Konqueror)."
  },
  {
    "name": "Mozilla",
    "doc": "Launcher class for Mozilla browsers."
  },
  {
    "name": "Netscape",
    "doc": "Launcher class for Netscape browser."
  },
  {
    "name": "Opera",
    "doc": "Launcher class for Opera browser."
  },
  {
    "name": "UnixBrowser",
    "doc": "Parent class for all Unix browsers with remote functionality."
  },
  {
    "name": "BytesIO",
    "doc": "Buffered I/O implementation using an in-memory bytes buffer."
  },
  {
    "name": "ConversionError",
    "doc": "Exception class for this module. Use:"
  },
  {
    "name": "Error",
    "doc": "Exception class for this module. Use:"
  },
  {
    "name": "Packer",
    "doc": "Pack various data representations into a buffer."
  },
  {
    "name": "Unpacker",
    "doc": "Unpacks various data representations from the given buffer."
  },
  {
    "name": "Error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "Str",
    "doc": "str(object='') -> str"
  },
  {
    "name": "Xxo",
    "doc": "A class that explicitly stores attributes in an internal dict"
  },
  {
    "name": "Null",
    "doc": ""
  },
  {
    "name": "Str",
    "doc": "str(object='') -> str"
  },
  {
    "name": "Xxo",
    "doc": "The Xxo type"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "ZipAppError",
    "doc": "Inappropriate argument value (of correct type)."
  },
  {
    "name": "BadZipFile",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "BadZipfile",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "CompleteDirs",
    "doc": "A ZipFile subclass that ensures that implied directories"
  },
  {
    "name": "FastLookup",
    "doc": "ZipFile subclass to ensure implicit"
  },
  {
    "name": "LZMACompressor",
    "doc": ""
  },
  {
    "name": "LZMADecompressor",
    "doc": ""
  },
  {
    "name": "LargeZipFile",
    "doc": "Raised when writing a zipfile, the zipfile requires ZIP64 extensions"
  },
  {
    "name": "Path",
    "doc": "A pathlib-compatible interface for zip files."
  },
  {
    "name": "PyZipFile",
    "doc": "Class to create ZIP archives with Python library files and packages."
  },
  {
    "name": "ZipExtFile",
    "doc": "File-like object for reading an archive member."
  },
  {
    "name": "ZipFile",
    "doc": "Class with methods to open, read, write, close, list zip files."
  },
  {
    "name": "ZipInfo",
    "doc": "Class with attributes describing each file in the ZIP archive."
  },
  {
    "name": "_SharedFile",
    "doc": ""
  },
  {
    "name": "_Tellable",
    "doc": ""
  },
  {
    "name": "_ZipWriteFile",
    "doc": "Base class for buffered IO objects."
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "ZipImportError",
    "doc": "Import can't find module, or can't find name in module."
  },
  {
    "name": "_code_type",
    "doc": "Create a code object.  Not for the faint of heart."
  },
  {
    "name": "_module_type",
    "doc": "Create a module object."
  },
  {
    "name": "zipimporter",
    "doc": "zipimporter(archivepath) -> zipimporter object"
  },
  {
    "name": "error",
    "doc": "Common base class for all non-exit exceptions."
  },
  {
    "name": "InvalidTZPathWarning",
    "doc": "Warning raised if an invalid path is specified in PYTHONTZPATH."
  },
  {
    "name": "ZoneInfo",
    "doc": "Abstract base class for time zone info objects."
  },
  {
    "name": "ZoneInfoNotFoundError",
    "doc": "Exception raised when a ZoneInfo key is not found."
  }
]